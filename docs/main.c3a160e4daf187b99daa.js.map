{"version":3,"file":"main.c3a160e4daf187b99daa.js","mappings":"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","sources":["webpack://weblabyrinth/./src/ts/base/color.ts","webpack://weblabyrinth/./src/ts/base/vector.ts","webpack://weblabyrinth/./src/ts/game/events/game-event-handler.ts","webpack://weblabyrinth/./src/ts/game/events/game-event.ts","webpack://weblabyrinth/./src/ts/game/events/item-consumed-event.ts","webpack://weblabyrinth/./src/ts/game/events/item-required-event.ts","webpack://weblabyrinth/./src/ts/game/game.ts","webpack://weblabyrinth/./src/ts/game/item.ts","webpack://weblabyrinth/./src/ts/game/player.ts","webpack://weblabyrinth/./src/ts/game/raycast.ts","webpack://weblabyrinth/./src/ts/game/room/room.ts","webpack://weblabyrinth/./src/ts/game/world/door.ts","webpack://weblabyrinth/./src/ts/game/world/game-object.ts","webpack://weblabyrinth/./src/ts/game/world/pickup.ts","webpack://weblabyrinth/./src/ts/game/world/portal.ts","webpack://weblabyrinth/./src/ts/game/world/sprite.ts","webpack://weblabyrinth/./src/ts/game/world/world.ts","webpack://weblabyrinth/./src/ts/presentation/dialog.ts","webpack://weblabyrinth/./src/ts/presentation/gui-manager.ts","webpack://weblabyrinth/./src/ts/presentation/input.ts","webpack://weblabyrinth/./src/ts/presentation/rendering/renderer.ts","webpack://weblabyrinth/./src/ts/presentation/rendering/view-sprite.ts","webpack://weblabyrinth/./src/ts/presentation/resource-resolver.ts","webpack://weblabyrinth/webpack/bootstrap","webpack://weblabyrinth/./src/index.ts"],"sourcesContent":["export class Color\r\n{\r\n    hue: number;\r\n    saturation: number;\r\n    lightness: number;\r\n    \r\n    constructor(hue: number, saturation: number, lightness: number) {\r\n        this.hue = hue;\r\n        this.saturation = saturation;\r\n        this.lightness = lightness;\r\n    }\r\n}","export class Vector {\r\n    public x: number;\r\n    public y: number;\r\n\r\n    constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    add(vector: Vector): Vector {\r\n        return new Vector(this.x + vector.x, this.y + vector.y);\r\n    }\r\n\r\n    multiply(scalar: number): Vector {\r\n        return new Vector(this.x * scalar, this.y * scalar);\r\n    }\r\n\r\n    subtract(vector: Vector): Vector {\r\n        return new Vector(this.x - vector.x, this.y - vector.y);\r\n    }\r\n\r\n    rotateBy(degrees: number): Vector {\r\n        degrees = -degrees * (Math.PI / 180);\r\n        const cos = Math.cos(degrees);\r\n        const sin = Math.sin(degrees);\r\n        const newX = Math.round(10000 * (this.x * cos - this.y * sin)) / 10000;\r\n        const newY = Math.round(10000 * (this.x * sin + this.y * cos)) / 10000;\r\n        return new Vector(newX, newY);\r\n    }\r\n\r\n    magnitude(): number {\r\n        return Math.sqrt((this.x * this.x) + (this.y * this.y));\r\n    }\r\n\r\n    setLength(length: number): Vector {\r\n        const mag = this.magnitude();\r\n        return new Vector(this.x * (length / mag), this.y * (length / mag));\r\n    }\r\n\r\n    normalize(): Vector {\r\n        const mgn = this.magnitude();\r\n        return new Vector(this.x / mgn, this.y / mgn);\r\n    }\r\n\r\n    dot(vector: Vector): number {\r\n        return (this.x * vector.x) + (this.y * vector.y);\r\n    }\r\n\r\n    cross(vector: Vector): number {\r\n        return (this.x * vector.y) - (vector.x * this.y);\r\n    }\r\n\r\n    rotationDiff(vector: Vector): number {\r\n        const result =\r\n            (Math.atan2(this.y, this.x)\r\n            - Math.atan2(vector.y, vector.x)) \r\n            * (180/Math.PI);\r\n        return result\r\n    }\r\n}\r\n","import { GuiManager } from \"../../presentation/gui-manager\";\r\nimport { GameEvent } from \"./game-event\";\r\nimport { Game } from \"../game\";\r\n\r\nexport class GameEventHandler {\r\n    public game: Game;\r\n    public guiManager: GuiManager;\r\n\r\n    constructor(game: Game, gui: GuiManager) {\r\n        this.game = game;\r\n        this.guiManager = gui;\r\n    }\r\n\r\n    public handle(event: GameEvent) {\r\n        event.handle(this);\r\n    }\r\n}","import { GameEventHandler } from \"./game-event-handler\";\r\n\r\nexport abstract class GameEvent {\r\n    public abstract handle(handler: GameEventHandler);\r\n}","import { GameEvent } from \"./game-event\"\r\nimport { GameEventHandler } from \"./game-event-handler\";\r\n\r\nexport class ItemConsumedEvent extends GameEvent {\r\n    public item: string;\r\n\r\n    constructor(itemName: string) {\r\n        super();\r\n        this.item = itemName;\r\n    }\r\n    \r\n    public handle(handler: GameEventHandler) {\r\n        const sprite = handler.game.world.items.get(this.item).texture;\r\n        handler.guiManager.addDialog('Item consumed', sprite, handler.game.world);\r\n    }\r\n}","import { GameEvent } from \"./game-event\";\r\nimport { GameEventHandler } from \"./game-event-handler\";\r\n\r\nexport class ItemRequiredEvent extends GameEvent {\r\n    public item: string;\r\n\r\n    constructor(itemName: string) {\r\n        super();\r\n        this.item = itemName;\r\n    }\r\n\r\n    public handle(handler: GameEventHandler) {\r\n        const sprite = handler.game.world.items.get(this.item).texture;\r\n        handler.guiManager.addDialog('Missing required item', sprite, handler.game.world);\r\n    }\r\n}","import { Room } from \"./room/room\";\r\nimport { Input } from '../presentation/input';\r\nimport { Player } from './player';\r\nimport { Renderer } from '../presentation/rendering/renderer';\r\nimport { World } from './world/world';\r\nimport { Vector } from '../base/vector';\r\nimport { RayCast } from \"./raycast\";\r\nimport { Door } from './world/door';\r\nimport { Pickup } from \"./world/pickup\";\r\nimport { GameEventHandler } from \"./events/game-event-handler\";\r\nimport { GameEvent } from \"./events/game-event\";\r\nimport { GuiManager } from \"../presentation/gui-manager\";\r\nimport { Portal } from \"./world/portal\";\r\n\r\nexport class Game {\r\n    public world: World;\r\n\r\n\tplayer: Player;\r\n\tinput: Input;\r\n\trenderer: Renderer;\r\n\tguiManager: GuiManager;\r\n\tevents: Array<GameEvent>;\r\n\thandler: GameEventHandler;\r\n\t\r\n\tcurrentTileX = 0;\r\n\tcurrentTileY = 0;\r\n\r\n\tcurrentTime = 0;\r\n\tpreviousTime = 0;\r\n\r\n\tconstructor(renderer: Renderer, input: Input, guiManager: GuiManager) {\r\n\t\tthis.renderer = renderer;\r\n\t\tthis.input = input;\r\n\t\tthis.guiManager = guiManager;\r\n\t\tthis.handler = new GameEventHandler(this, guiManager);\r\n\r\n\t\tthis.player = new Player(17, 19);\r\n\t\tthis.events = new Array<GameEvent>();\r\n\t}\r\n\r\n\tpublic loadRoom(urlString: string) {\r\n\t\tconst url = new URL(urlString);\r\n\t\tconsole.log('Loading new room from URL', url.href);\r\n\r\n\t\tfetch(url.href, {\r\n\t\t\tmethod: 'get',\r\n\t\t\tmode: 'cors'\r\n\t\t}).then((response) => {\r\n\t\t\tif ( response.ok ) {\r\n\t\t\t\tresponse.json().then(json => {\r\n\t\t\t\t\tconst room = json as Room;\r\n\t\t\t\t\tRoom.validate(room);\r\n\t\t\t\t\tthis.world = World.from(room, url);\r\n\t\t\t\t\tthis.tick();\r\n\t\t\t\t})\r\n\t\t\t} else {\r\n\t\t\t\tthrow new Error(`Unable to retrieve room at URL: ${urlString}`);\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Progresses the game by 1 step, and schedules the next step\r\n\t */\r\n\tpublic tick() {\r\n\t\tif (this.previousTime=== 0 ) {\r\n\t\t\tthis.previousTime = performance.now();\r\n\t\t} else {\r\n\t\t\tthis.previousTime = this.currentTime;\r\n\t\t}\r\n\r\n\t\tthis.currentTime = performance.now();\r\n\r\n\t\tconst delta = (this.currentTime - this.previousTime)/1000;\r\n\t\tthis.gameStep(delta);\r\n\t\tthis.world.step(delta);\r\n\t\tthis.renderer.render(this, delta);\r\n\t\tthis.guiManager.tick(this, delta);\r\n\r\n\t\tthis.events.forEach(e => this.handler.handle(e));\r\n\t\tthis.events = [];\r\n\r\n\t\twindow.requestAnimationFrame(this.tick.bind(this));\r\n\t}\r\n\r\n\tpublic addEvent(event: GameEvent) {\r\n\t\tthis.events.push(event);\r\n\t}\r\n\r\n\tprivate gameStep(delta: number) {\r\n\t\tif ( this.input.keyQueue.length > 0) {\r\n\t\t\tif ( this.input.keyQueue.find((k) => k === 'm') != null) {\r\n\t\t\t\tthis.renderer.toggleMap();\r\n\t\t\t}\r\n\r\n\t\t\tthis.input.clearQueue();\r\n\t\t}\r\n\r\n\t\t// Interact with doors\r\n\t\tif ( this.input.usePressed || this.input.leftMouseUp ) {\r\n\t\t\tconst ray = RayCast.ray(this.player.position, this.player.direction, this.player.plane, 0, this.world);\r\n\t\t\tif ( ray.hit && ray.perpWallDist < 2 ) {\r\n\t\t\t\tif ( ray.worldObject instanceof Door) {\r\n\t\t\t\t\tray.worldObject.interact(this);\r\n\t\t\t\t}\r\n\t\t\t} \r\n\t\t}\r\n\r\n\t\tif ( !this.input.anyDirectional() && this.input.mouseDragStart == null ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tvar movement = this.getMovementFromInput();\r\n\t\tif ( movement.x === 0 && movement.y === 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet newPlayerPos = this.player.position.add(movement);\r\n\r\n\t\t// Out of bounds\r\n\t\tif (newPlayerPos.y > this.world.objects.length || newPlayerPos.y < 0 || \r\n\t\t\tnewPlayerPos.x > this.world.objects[0].length || newPlayerPos.x < 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst currentTile = this.world.objects[this.currentTileY][this.currentTileX];\r\n\t\tconst nextTile = this.world.objects[Math.floor(newPlayerPos.y)][Math.floor(newPlayerPos.x)];\r\n\t\tlet rotationOffset = 0;\r\n\t\tif (nextTile != null ) {\r\n\t\t\tif ( nextTile.collidable() ) { return; }\r\n\t\t\tif ( nextTile instanceof Portal ) {\r\n\t\t\t\trotationOffset = -(nextTile.targetPortal.targetDirection.rotationDiff(nextTile.targetDirection)-180);\r\n\t\t\t\tnewPlayerPos = \r\n\t\t\t\t\tnew Vector(\r\n\t\t\t\t\t\tnewPlayerPos.x - Math.floor(newPlayerPos.x),\r\n\t\t\t\t\t\tnewPlayerPos.y - Math.floor(newPlayerPos.y)\r\n\t\t\t\t\t)\r\n\t\t\t\t\t.rotateBy(rotationOffset)\r\n\t\t\t\t\t.add(nextTile.targetPortal.targetDirection);\r\n\r\n\t\t\t\tif (newPlayerPos.x < 0) {newPlayerPos.x++;}\r\n\t\t\t\tif (newPlayerPos.y < 0) {newPlayerPos.y++;}\r\n\t\t\t\tnewPlayerPos = newPlayerPos.add(nextTile.targetPosition);\r\n\r\n\t\t\t\tconst nudge = nextTile.targetPortal.targetDirection.multiply(0.1);\r\n\t\t\t\twhile (\tMath.floor(newPlayerPos.x) === Math.floor(nextTile.targetPosition.x) &&\r\n\t\t\t\t\tMath.floor(newPlayerPos.y) === Math.floor(nextTile.targetPosition.y)) {\r\n\t\t\t\t\tnewPlayerPos = newPlayerPos.add(nudge);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.player.position = newPlayerPos;\r\n\t\tthis.player.rotateBy(rotationOffset);\r\n\t\tthis.currentTileX = Math.floor(newPlayerPos.x);\r\n\t\tthis.currentTileY = Math.floor(newPlayerPos.y);\r\n\r\n\t\tif ( currentTile instanceof Pickup) {\r\n\t\t\tcurrentTile.onPickup(this.player);\r\n\t\t\tthis.world.objects[this.currentTileY][this.currentTileX] = null;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate getMovementFromInput(): Vector {\r\n\t\tif ( this.input.leftPressed) {\r\n\t\t\tthis.player.rotateBy(1.5);\r\n\t\t} else if ( this.input.rightPressed) {\r\n\t\t\tthis.player.rotateBy(-1.5);\r\n\t\t}\r\n\r\n\t\tlet xVel = 0;\r\n\t\tlet yVel = 0;\r\n\t\tif ( this.input.upPressed ) {\r\n\t\t\tyVel += this.player.direction.y * this.player.movementSpeed;\r\n\t\t\txVel += this.player.direction.x * this.player.movementSpeed;\r\n\t\t} else if (this.input.downPressed) {\r\n\t\t\tyVel -= this.player.direction.y * this.player.movementSpeed;\r\n\t\t\txVel -= this.player.direction.x * this.player.movementSpeed;\r\n\t\t} \r\n\r\n\t\tif ( this.input.mouseDragStart != null) {\r\n\t\t\tthis.player.rotateBy((this.input.mouseDragStart.x - this.input.mousePosition.x)*0.01);\r\n\t\t\tconst forward = (this.input.mouseDragStart.y - this.input.mousePosition.y) * 0.0005;\r\n\t\t\tif ( forward > 0.01 ) {\r\n\t\t\t\tyVel = this.player.direction.y * Math.min(forward, this.player.movementSpeed)\r\n\t\t\t\txVel = this.player.direction.x * Math.min(forward, this.player.movementSpeed)\r\n\t\t\t} else if (forward < -0.01) {\r\n\t\t\t\tyVel = this.player.direction.y * Math.max(forward, -this.player.movementSpeed)\r\n\t\t\t\txVel = this.player.direction.x * Math.max(forward, -this.player.movementSpeed)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn new Vector(xVel, yVel);\r\n\t}\r\n};\r\n","export class Item {\r\n    sprite: number;\r\n    amount: number;\r\n    name: string;\r\n\r\n    constructor(name: string, sprite: number, amount: number = 1) {\r\n        this.amount = amount;\r\n        this.sprite = sprite;\r\n        this.name = name;\r\n    }\r\n}","import { Vector } from '../base/vector';\r\nimport { Item } from \"./item\";\r\n\r\nexport class Player {\r\n    movementSpeed: number = 0.05;\r\n    items: Array<Item> = [];\r\n\r\n    position: Vector;\r\n    direction: Vector;\r\n    plane: Vector;\r\n    \r\n    constructor(x: number, y: number) {\r\n        this.position = new Vector(x, y);\r\n        this.direction = new Vector(0, -1);\r\n        this.plane = new Vector(0.66, 0);\r\n    }\r\n\r\n    get score(): number {\r\n        let points = 0;\r\n        this.items.forEach(i => {\r\n            if ( i.name === 'score') {\r\n                points+=i.amount;\r\n            }\r\n        })\r\n\r\n        return points;\r\n    }\r\n\r\n    rotateBy(degrees: number) {\r\n        this.direction = this.direction.rotateBy(degrees);\r\n        this.plane = this.plane.rotateBy(degrees);\r\n    }\r\n}","import { World } from \"./world/world\";\r\nimport { Vector } from \"../base/vector\";\r\nimport { ViewSprite } from \"../presentation/rendering/view-sprite\";\r\nimport { Sprite } from \"./world/sprite\";\r\nimport { Door } from \"./world/door\";\r\nimport { GameObject } from \"./world/game-object\";\r\nimport { Portal } from \"./world/portal\";\r\n\r\nexport class RayCastResult {\r\n    public sprites: Array<ViewSprite>;\r\n    public perpWallDist: number;\r\n    public worldObject: GameObject | null;\r\n    public inside: boolean;\r\n    public hit: boolean;\r\n    public side: number;\r\n    public texture: number;\r\n    public direction: Vector;\r\n    public wallX: number;\r\n}\r\n\r\nexport class RayCast {\r\n    public static ray(originPos: Vector, originDir: Vector, originPlane: Vector, cameraX: number, world: World, \r\n        stopOnSprite: boolean = false, startLength: number = 0, maxLength: number = 8192): RayCastResult {\r\n        var rayDirX = originDir.x + originPlane.x * cameraX;\r\n        var rayDirY = originDir.y + originPlane.y * cameraX;\r\n\r\n        // Which box of the map we're in\r\n        var mapX = Math.floor(originPos.x);\r\n        var mapY = Math.floor(originPos.y);\r\n\r\n        // Length of ray from one X or Y-side to next X or Y-side\r\n        var deltaDistX = Math.abs(1/rayDirX);\r\n        var deltaDistY = Math.abs(1/rayDirY);\r\n\r\n        // What direction to step in X or Y-direction (either +1 or -1)\r\n        var stepX;\r\n        var stepY;\r\n\r\n        // Length of array from current position to next X or Y-side\r\n        var sideDistX;\r\n        var sideDistY;\r\n\r\n        // Calculate step and initial sideDist\r\n        if (rayDirX < 0)\r\n        {\r\n            stepX = -1;\r\n            sideDistX = (originPos.x - mapX) * deltaDistX;\r\n        }\r\n        else\r\n        {\r\n            stepX = 1;\r\n            sideDistX = (mapX + 1 - originPos.x) * deltaDistX;\r\n        }\r\n        if (rayDirY < 0)\r\n        {\r\n            stepY = -1;\r\n            sideDistY = (originPos.y - mapY) * deltaDistY;\r\n        }\r\n        else\r\n        {\r\n            stepY = 1;\r\n            sideDistY = (mapY + 1 - originPos.y) * deltaDistY;\r\n        }\r\n\r\n        var hit = 0;\r\n        var wallXOffset = 0;\r\n        var wallYOffset = 0;\r\n        var inside = false\r\n\r\n        const sprites: Array<ViewSprite> = [];\r\n        var side: number;\r\n        var texNum: number;\r\n        var worldObject: GameObject;\r\n        \r\n        // Perform DDA\r\n        while (hit === 0)\r\n        {\r\n            // Jump to next map square, OR in X-direction, OR in Y-direction\r\n            if (sideDistX < sideDistY)\r\n            {\r\n                sideDistX += deltaDistX;\r\n                mapX += stepX;\r\n                side = 0;\r\n            }\r\n            else\r\n            {\r\n                sideDistY += deltaDistY;\r\n                mapY += stepY;\r\n                side = 1;\r\n            }\r\n            // Check if ray has hit a wall\r\n            worldObject = world.objects[mapY][mapX];\r\n            if ( worldObject == null) continue;\r\n\r\n            if ( worldObject instanceof Sprite ) {\r\n                var viewSprite = new ViewSprite((mapX+0.5) - originPos.x, (mapY+0.5) - originPos.y, worldObject.texture, worldObject.scale);\r\n                if ( sprites.findIndex(v => v.x === viewSprite.x && v.y === viewSprite.y) < 0) {\r\n                    sprites.push(viewSprite);\r\n                }\r\n                if ( stopOnSprite ) {\r\n                    hit = 1;\r\n                }\r\n                continue;\r\n            } else if ( worldObject instanceof Door) {\r\n                if ( worldObject.block ) {\r\n                    if ( worldObject.openAmount < 1) {\r\n                        // Distance starts at 1, which is a normal hit, then offset by twice the open amount\r\n                        if (side === 1 && sideDistY - (deltaDistY*(1-worldObject.openAmount*2)) < sideDistX) {\r\n                            hit = 1;\r\n                            texNum = worldObject.texture;\r\n                            wallYOffset = (worldObject.openAmount*2) * stepY;\r\n                        } else if (side === 0 && sideDistX - (deltaDistX*(1-worldObject.openAmount*2)) < sideDistY) {\r\n                            hit = 1;\r\n                            texNum = worldObject.texture;\r\n                            wallXOffset = (worldObject.openAmount*2) * stepX;\r\n                        }\r\n                    }\r\n                } else {\r\n                    texNum = worldObject.texture;\r\n                    hit = 1;\r\n\r\n                    if (side == 1) {\r\n                        wallYOffset = 0.5 * stepY;\r\n                        if (sideDistY - (deltaDistY/2) < sideDistX) { //If ray hits offset wall\r\n                            let wallX = originPos.x + this.perpendicularDistance(mapY, originPos.y, wallYOffset, stepY, rayDirY) * rayDirX;\r\n                            wallX -= Math.floor(wallX);\r\n                            if ( wallX <= worldObject.openAmount){\r\n                                hit = 0; //Continue raycast for open/opening doors\r\n                                wallYOffset = 0;\r\n                            }\r\n                        } else {\r\n                            mapX += stepX;\r\n                            side = 0;\r\n                            inside =  true;\r\n                            wallYOffset = 0;\r\n                            texNum = world.objects[mapY][mapX].texture;\r\n                        }\r\n                    } else { //side == 0\r\n                        wallXOffset = 0.5 * stepX;\r\n                        if (sideDistX - (deltaDistX/2) < sideDistY) {\r\n                            let wallX = originPos.y + this.perpendicularDistance(mapX, originPos.x, wallXOffset, stepX, rayDirX) * rayDirY;\r\n                            wallX -= Math.floor(wallX);\r\n                            if ( wallX < worldObject.openAmount) {\r\n                                hit = 0;\r\n                                wallXOffset = 0;\r\n                            }\r\n                        } else {\r\n                            mapY += stepY;\r\n                            side = 1;\r\n                            inside = true;\r\n                            wallXOffset = 0;\r\n                            texNum = world.objects[mapY][mapX].texture;\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                texNum = worldObject.texture;\r\n                hit = 1;\r\n            }\r\n        }\r\n\r\n        var perpWallDist;\r\n        var wallX;\r\n\r\n        // Calculate distance projected on camera direction, and the offset from the start of the wall\r\n        if (side === 0) {\r\n            perpWallDist = this.perpendicularDistance(mapX, originPos.x, wallXOffset, stepX, rayDirX);\r\n            wallX = originPos.y + perpWallDist * rayDirY;\r\n        }\r\n        else {\r\n            perpWallDist = this.perpendicularDistance(mapY, originPos.y, wallYOffset, stepY, rayDirY);\r\n            wallX = originPos.x + perpWallDist * rayDirX;\r\n        }\r\n\r\n        wallX = wallX - Math.floor(wallX);\r\n\r\n        // If the ray hit a portal, we cast another ray from the hit location relative to the target portal\r\n        if (worldObject instanceof Portal && perpWallDist + startLength < maxLength) {\r\n            const angleOffset = -(worldObject.targetPortal.targetDirection.rotationDiff(worldObject.targetDirection) - 180);\r\n            // Convert hit information into vector in entrance portal space\r\n            let newPos = new Vector(wallX * side, !side ? wallX : 0)\r\n                        .rotateBy(angleOffset)\r\n                        .add(worldObject.targetPortal.targetDirection);\r\n            if (newPos.x < 0) {newPos.x++;}\r\n            if (newPos.y < 0) {newPos.y++;}\r\n\r\n            newPos = newPos.add(worldObject.targetPosition);\r\n\r\n            const nudge = worldObject.targetPortal.targetDirection.multiply(0.1);\r\n            while ( Math.floor(newPos.x) === Math.floor(worldObject.targetPosition.x) &&\r\n                    Math.floor(newPos.y) === Math.floor(worldObject.targetPosition.y)) {\r\n                    newPos = newPos.add(nudge);\r\n            }\r\n\r\n            const newDir = originDir.rotateBy(angleOffset);\r\n            const newPlane = originPlane.rotateBy(angleOffset);\r\n\r\n            const castResult = RayCast.ray(newPos, newDir, newPlane, cameraX, world, stopOnSprite, perpWallDist + startLength, maxLength);\r\n\r\n            if ( castResult.sprites.length > 0) {\r\n                let offset = new Vector(wallX * side, !side ? wallX : 0)\r\n                        .add(worldObject.targetDirection)\r\n                if (offset.x < 0) { offset.x++;}\r\n                if (offset.y < 0) { offset.y++;}\r\n\r\n                offset = offset.add(new Vector(mapX - originPos.x, mapY - originPos.y));\r\n\r\n                // Reinterpret sprite position for all sprites discovered by the ray from the portal           \r\n                castResult.sprites.forEach(s => {\r\n                    const spritePos = new Vector(s.x, s.y)\r\n                        .rotateBy(-angleOffset)\r\n                        .add(offset);\r\n\r\n                    sprites.push(new ViewSprite(spritePos.x, spritePos.y, s.sprite, s.scale));\r\n                });\r\n                \r\n                castResult.sprites = sprites;\r\n            }\r\n\r\n            return castResult;\r\n        }\r\n\r\n        var result = new RayCastResult();\r\n        result.sprites = sprites;\r\n        result.hit = hit === 1;\r\n        result.side = side;\r\n        result.perpWallDist = perpWallDist + startLength;\r\n        result.inside = inside;\r\n        result.worldObject = worldObject;\r\n        result.texture = texNum;\r\n        result.direction = new Vector(rayDirX, rayDirY);\r\n        result.wallX = wallX;\r\n        return result;\r\n    }\r\n\r\n    private static perpendicularDistance(map: number, pos: number, wallOffset: number, step: number, rayDir: number) {\r\n        return (map - pos + wallOffset + (1 - step) / 2) / rayDir;\r\n    }\r\n}\r\n","import { RoomObject } from \"./room-object\";\r\n\r\nexport class Room {\r\n    public objects: Array<RoomObject>;\r\n    public tiles: Array<Array<number>>;\r\n    public textures: string;\r\n    public sprites: string;\r\n\r\n    public static validate(room: Room) {\r\n        if ( room.textures == null || room.textures.length < 1) {\r\n            throw new Error(`Room does not reference a texture file`);\r\n        }\r\n\r\n        if ( room.sprites == null || room.sprites.length < 1) {\r\n            throw new Error(`Room does not reference a sprites file`);\r\n        }\r\n\r\n        if ( room.objects== null || room.objects.length < 1) {\r\n            throw new Error(`Room contains no objects`);\r\n        }\r\n\r\n        if (room.tiles == null || room.tiles.length < 1) {\r\n            throw new Error(`Room contains no tiles`);\r\n        }\r\n\r\n        var tilesWidth = room.tiles[0].length;\r\n        for (let y = 0; y < room.tiles.length; y++) {\r\n            if ( room.tiles[y].length != tilesWidth) {\r\n                console.debug('Faulty row looks like', room.tiles[y]);\r\n                throw new Error(`Irregular row length for row ${y}, expected: ${tilesWidth} actual: ${room.tiles[y].length}`);\r\n            }\r\n\r\n            for (let x = 0; x < room.tiles[y].length; x++) {\r\n                if ( room.tiles[y][x] < 0 || room.tiles[y][x] > room.objects.length) {\r\n                    throw new Error(`Tile reference out of bounds at coordinates ${x},${y}. Should be between 0 and ${room.objects.length}`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import { GameObject } from \"./game-object\";\r\nimport { DynamicObject } from \"./dynamic-object\";\r\nimport { Interactable } from \"./interactable\";\r\nimport { Game } from \"../game\";\r\nimport { ItemRequiredEvent } from \"../events/item-required-event\";\r\nimport { ItemConsumedEvent } from \"../events/item-consumed-event\"\r\n\r\nexport class Door extends GameObject implements DynamicObject, Interactable {\r\n    public closed: boolean;\r\n    public openAmount: number;\r\n    public block: boolean;\r\n    public openTime: number;\r\n    public key: string | null;\r\n    public unlockTexture: number;\r\n\r\n    constructor(texture: number, block: boolean = false, key: string | null = null, unlockTexture: number | null = null) {\r\n        super(texture);\r\n        this.closed = true;\r\n        this.openAmount = 0;\r\n        this.openTime = 0;\r\n        this.block = block;\r\n        this.key = key;\r\n        this.unlockTexture = unlockTexture ?? texture;\r\n    }\r\n\r\n    public override collidable(): boolean {\r\n        return this.openAmount !== 1;\r\n    }\r\n\r\n    public unlock() {\r\n        this.key = null;\r\n        this.texture = this.unlockTexture;\r\n    }\r\n\r\n    public interact(game: Game) {\r\n        if ( this.key != null) {\r\n            const key = this.key;\r\n            const keyIndex = game.player.items.findIndex(i => i.name === this.key && i.amount > 0);\r\n            if ( keyIndex < 0) {\r\n                game.addEvent(new ItemRequiredEvent(key));\r\n                return; // Nothing happens, door is locked\r\n            }\r\n\r\n            game.player.items[keyIndex].amount -= 1;\r\n            this.unlock();\r\n            game.addEvent(new ItemConsumedEvent(key));\r\n            return;\r\n        }\r\n\r\n        if ( this.closed && this.openAmount === 0 ) {\r\n           this.closed = false;\r\n           this.openTime = 0;\r\n        } else if ( !this.closed && this.openAmount === 1) {\r\n            this.closed = true;\r\n        }\r\n    }\r\n\r\n    public step(delta: number) {\r\n        const amount = this.block ? delta * 0.2 : delta;\r\n        if ( this.closed && this.openAmount > 0) { \r\n            this.openAmount -= amount; \r\n        }\r\n        if ( !this.closed && this.openAmount < 1) { \r\n            console.debug('Opening', amount);\r\n            this.openAmount += amount; \r\n        }\r\n\r\n        if ( this.openAmount > 1) { this.openAmount = 1; }\r\n        if ( this.openAmount < 0) { this.openAmount = 0; }\r\n\r\n        // Automatically start closing the door if it's open for a few seconds\r\n        if ( !this.block) {\r\n            if ( this.openAmount === 1) { this.openTime += delta; }\r\n            if ( this.openTime > 5) { this.closed = true; }\r\n        }\r\n    }\r\n}","export class GameObject {\r\n    public texture: number;\r\n\r\n    constructor(texture: number) {\r\n        this.texture = texture;\r\n    }\r\n\r\n    public collidable(): boolean {\r\n        return true;\r\n    }\r\n}","import { Sprite } from \"./sprite\"\r\nimport { Player } from \"../player\"\r\nimport { Item } from \"../item\";\r\n\r\nexport class Pickup extends Sprite {\r\n    public name: string;\r\n    public amount: number;\r\n\r\n    constructor(sprite: number, name: string, amount: number = 1, scale: number = 1) {\r\n        super(sprite, scale);\r\n        this.amount = amount;\r\n        this.name = name;\r\n    }\r\n\r\n    public override collidable(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public onPickup(player: Player) {\r\n        const existing = player.items.findIndex(i => i.name === this.name);\r\n        if ( existing >= 0)  {\r\n            player.items[existing].amount+=this.amount;\r\n            return;\r\n        }\r\n\r\n        player.items.push(new Item(this.name, this.texture, this.amount));\r\n        return;\r\n    }\r\n}\r\n","import { GameObject } from \"./game-object\";\r\nimport { Vector } from \"../../base/vector\";\r\n\r\nexport class Portal extends GameObject {\r\n    public position: Vector;\r\n    public targetPortal: Portal;\r\n    public targetPosition: Vector;\r\n    public targetDirection: Vector;\r\n\r\n    constructor(position: Vector, direction: Vector) {\r\n        super(0);\r\n        this.position = position;\r\n        this.targetDirection = direction;\r\n    }\r\n\r\n    public connect(portal: Portal) {\r\n        this.targetPortal = portal;\r\n        this.targetPosition = portal.position;\r\n        this.targetPortal.targetPortal = this;\r\n        this.targetPortal.targetPosition = this.position;\r\n    }\r\n\r\n    public override collidable(): boolean {\r\n        return false;\r\n    }\r\n}","import { GameObject } from \"./game-object\";\r\n\r\nexport class Sprite extends GameObject{\r\n    public scale: number;\r\n    \r\n    constructor(sprite: number, scale: number = 1) {\r\n        super(sprite);\r\n        this.scale = scale;\r\n    }\r\n\r\n    distanceBetween(x: number, y: number, otherX: number, otherY: number) : number {\r\n        return ((otherX - x) * (otherX - x) + (otherY - y) * (otherY - y));\r\n    }\r\n}","import { GameObject } from \"./game-object\";\r\nimport { DynamicObject } from \"./dynamic-object\";\r\nimport { Door } from \"./door\";\r\nimport { Sprite } from \"./sprite\";\r\nimport { Room } from \"../room/room\";\r\nimport { Pickup } from \"./pickup\";\r\nimport { Portal } from \"./portal\";\r\nimport { Vector } from \"../../base/vector\";\r\n\r\nexport class World {\r\n    public objects: Array<Array<GameObject | null>>;\r\n    public items: Map<string, Pickup>;\r\n\r\n    public textures: URL;\r\n    public sprites: URL;\r\n\r\n\tpublic ceiling = 5;\r\n\tpublic floor = 2;\r\n\r\n    private dynamicObjects: Array<DynamicObject>;\r\n\r\n    private constructor() {\r\n        this.objects = [];\r\n        this.dynamicObjects = [];\r\n        this.items = new Map<string, Pickup>();\r\n    }\r\n\r\n    public step(delta: number) {\r\n        this.dynamicObjects.forEach(o => o.step(delta));\r\n    }\r\n\r\n    public cacheDynamicObjects() {\r\n        this.dynamicObjects.splice(0);\r\n        for (let x = 0; x < this.objects.length; x++) {\r\n            for (let y = 0; y < this.objects[x].length; y++) {\r\n                const obj = this.objects[x][y];\r\n                if ( obj instanceof Door ) {\r\n                    this.dynamicObjects.push(obj);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public static from(room: Room, url: URL): World {\r\n        let pathParts = url.pathname.split('/');\r\n        pathParts.splice(pathParts.length-1, 1);\r\n        const basePath = pathParts.join('/');\r\n\r\n\t\tlet world = new World();\r\n        world.textures = new URL(`${basePath}/${room.textures}`, url.origin);\r\n        world.sprites = new URL(`${basePath}/${room.sprites}`, url.origin);\r\n\r\n        let portals: Map<number, { portal: Portal, target: number} > = new Map<number, { portal: Portal, target: number}>();\r\n\t\tfor (let y = 0; y < room.tiles.length; y++) {\r\n\t\t\tlet row: Array<GameObject> = [];\r\n\r\n\t\t\tfor (let x = 0; x < room.tiles[y].length; x++) {\r\n\t\t\t\tconst tile = room.tiles[y][x]-1;\r\n\t\t\t\tif ( tile < 0) {\r\n                    row.push(null);\r\n                } else {\r\n                    const obj = room.objects[tile];\r\n                    switch (obj.type) {\r\n                        case \"block\":\r\n                            row.push(new GameObject(obj[\"texture\"] as number));\r\n                            break;\r\n\r\n                        case \"portal\":\r\n                            const dir = obj[\"targetDirection\"] as Array<number>;\r\n                            const target = obj[\"targetPortal\"] as number;\r\n                            const portal = new Portal(new Vector(x, y), new Vector(dir[0], dir[1]));\r\n                            row.push(portal);\r\n                            portals.set(tile+1, { portal: portal, target: target });\r\n                            break;\r\n\r\n                        case \"door\":\r\n                            const block = obj[\"block\"] as boolean;\r\n                            const unlockTexture = obj[\"texture-unlocked\"] as number | null;\r\n                            row.push(new Door(obj[\"texture\"] as number, block ?? false, obj[\"key\"] as string, unlockTexture));\r\n                            break;\r\n\r\n                        case \"sprite\":\r\n                            row.push(new Sprite(obj[\"texture\"] as number));\r\n                            break;\r\n\r\n                        case \"item\":\r\n                            const scale = obj[\"scale\"] as number;\r\n                            const amount = obj[\"amount\"] as number;\r\n                            const name = obj[\"name\"];\r\n                            const pickup = new Pickup(obj[\"texture\"] as number, name, amount ?? 1, scale ?? 1);\r\n                            row.push(pickup);\r\n                            world.items.set(name, pickup);\r\n                            break;\r\n\r\n                        default:\r\n                            throw new Error(`Unknown type '${obj.type}' for object ${tile} at ${x},${y}`);\r\n                    }\r\n                }\r\n\t\t\t}\r\n\r\n            world.objects.push(row);\r\n\t\t}\r\n\r\n        // Connect related portals\r\n        portals.forEach((v,k) => {\r\n            const target = portals.get(v.target);\r\n            if ( target == null) {\r\n                throw new Error(`Unable to find Portal with id ${v.target}`);\r\n            }\r\n            \r\n            v.portal.connect(target.portal);\r\n        })\r\n\r\n        world.cacheDynamicObjects();\r\n        return world;\r\n\t}\r\n}","export class Dialog {\r\n    public message: string;\r\n    public sprite: number | null;\r\n    public alive: number;\r\n    public element: HTMLElement;\r\n\r\n    constructor(message: string, element: HTMLElement, sprite: number | null = null) {\r\n        this.message = message;\r\n        this.sprite = sprite;\r\n        this.element = element;\r\n        this.alive = 0;\r\n    }\r\n\r\n    public addDelta(delta: number) {\r\n        this.alive += delta;\r\n    }\r\n}","import { World } from \"../game/world/world\";\r\nimport { Dialog } from \"./dialog\";\r\nimport { ResourceResolver } from \"./resource-resolver\";\r\nimport { Game } from \"../game/game\";\r\n\r\nexport class GuiManager {\r\n    resourceResolver: ResourceResolver;\r\n    parentElement: HTMLElement;\r\n    scoreElement: HTMLElement;\r\n\r\n    dialog: Dialog | null;\r\n    lastScore = -1;\r\n    texWidth = 64;\r\n    texHeight = 64;\r\n\r\n    constructor(resourceResolver: ResourceResolver, parent: HTMLElement) {\r\n        this.resourceResolver = resourceResolver;\r\n        this.parentElement = parent;\r\n        this.scoreElement = document.createElement('p');\r\n        this.scoreElement.classList.add('score');\r\n        this.parentElement.appendChild(this.scoreElement);\r\n    }\r\n\r\n    public addDialog(message: string, sprite: number | null = null, world: World | null = null) {\r\n        if ( this.dialog ) {\r\n            let oldElement = this.dialog.element;\r\n            this.parentElement.removeChild(oldElement);\r\n        }\r\n\r\n        const element = document.createElement('div');\r\n        element.classList.add('dialog');\r\n        const text = document.createElement('p');\r\n        text.innerText = message;\r\n\r\n        if ( sprite != null && world != null) {\r\n            element.appendChild(this.createSpriteCanvas(sprite, world));\r\n        }\r\n        \r\n        element.appendChild(text);\r\n        this.parentElement.appendChild(element);\r\n        this.dialog = new Dialog(message, element, sprite);\r\n    }\r\n\r\n    public tick(game: Game, delta: number) {\r\n        if ( this.dialog ) {\r\n            this.dialog.addDelta(delta);\r\n            if ( this.dialog.alive > 3 ) {\r\n                this.parentElement.removeChild(this.dialog.element);\r\n                this.dialog = null;\r\n            }\r\n        }\r\n\r\n        if ( game.player.score !== this.lastScore) {\r\n            this.lastScore = game.player.score;\r\n            this.scoreElement.innerText = `${this.lastScore}`.padStart(10, '0');\r\n        }\r\n    }\r\n\r\n    private createSpriteCanvas(sprite: number, world: World): HTMLCanvasElement {\r\n        const canvas = document.createElement('canvas');\r\n        canvas.width = this.texWidth;\r\n        canvas.height = this.texHeight;\r\n\r\n        const ctx = canvas.getContext('2d');\r\n        if ( ctx == null ) {\r\n            throw new Error(`Unable to create 2D context`);\r\n        }\r\n\r\n        const sheet = this.resourceResolver.getSprites(world);\r\n        ctx.drawImage(sheet, sprite*this.texWidth, 0, this.texWidth, this.texHeight, 0, 0, this.texWidth, this.texHeight);\r\n        return canvas;\r\n    }\r\n}","import { Vector } from \"../base/vector\";\r\n\r\nexport class Input {\r\n    public upPressed = false;\r\n    public downPressed = false;\r\n    public leftPressed = false;\r\n    public rightPressed = false;\r\n    public usePressed = false;\r\n\r\n    public leftMousePressed = false;\r\n    public previousLeftMousePressed = false;\r\n    public mouseDragStart: Vector | null = null;\r\n    public mousePosition = new Vector(0,0);\r\n    \r\n    public keyQueue = [];\r\n    \r\n    public get leftMouseUp(): boolean {\r\n        if ( this.previousLeftMousePressed) {\r\n            this.previousLeftMousePressed = false;\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public attachEventListeners(el: HTMLElement) {\r\n        el.addEventListener(\"keydown\", (e: KeyboardEvent) => {\r\n            e.preventDefault();\r\n            if (e.key === \"ArrowLeft\") { this.leftPressed = true; };\r\n            if (e.key === \"ArrowRight\") { this.rightPressed = true; };\r\n            if (e.key === \"ArrowUp\") { this.upPressed = true; };\r\n            if (e.key === \"ArrowDown\") { this.downPressed = true; };\r\n            if (e.key === \" \" ) {this.usePressed = true;}\r\n        });\r\n\r\n        el.addEventListener(\"keyup\", (e: KeyboardEvent) => {\r\n            e.preventDefault();\r\n            if (e.key === \"ArrowLeft\") { this.leftPressed = false; };\r\n            if (e.key === \"ArrowRight\") { this.rightPressed = false; };\r\n            if (e.key === \"ArrowUp\") { this.upPressed = false; };\r\n            if (e.key === \"ArrowDown\") { this.downPressed = false; };\r\n            if (e.key === \" \" ) {this.usePressed = false;}\r\n            if (e.key.length === 1 ) { this.keyQueue.push(e.key); }\r\n        });\r\n\r\n        el.addEventListener(\"mousedown\", (e: MouseEvent) => {\r\n            if (e.button === 0) {\r\n                const rect = el.getBoundingClientRect();\r\n                this.leftMousePressed = true;\r\n                this.mouseDragStart = new Vector(e.clientX - rect.left, e.clientY - rect.top);\r\n            }\r\n        });\r\n\r\n        el.addEventListener(\"mousemove\", (e: MouseEvent) => {\r\n            const rect = el.getBoundingClientRect();\r\n            this.mousePosition = new Vector(e.clientX - rect.left, e.clientY - rect.top);\r\n        })\r\n\r\n        el.addEventListener(\"mouseup\", (e: MouseEvent) => {\r\n            if ( e.button === 0) {\r\n                this.leftMousePressed = false;\r\n                this.previousLeftMousePressed = true;\r\n                this.mouseDragStart = null;\r\n            }\r\n        });\r\n\r\n        el.addEventListener(\"touchstart\", (e: TouchEvent) => {\r\n            this.leftMousePressed = true;\r\n            const rect = el.getBoundingClientRect();\r\n            const relX = e.changedTouches.item(0).clientX - rect.left;\r\n            const relY = e.changedTouches.item(0).clientY - rect.top;\r\n            this.mouseDragStart = new Vector(relX, relY);\r\n        });\r\n\r\n        el.addEventListener(\"touchmove\", (e: TouchEvent) => {\r\n            const rect = el.getBoundingClientRect();\r\n            const relX = e.changedTouches.item(0).clientX - rect.left;\r\n            const relY = e.changedTouches.item(0).clientY - rect.top;\r\n            this.mousePosition = new Vector(relX, relY);\r\n        });\r\n\r\n        el.addEventListener(\"touchend\", (e: TouchEvent) => {\r\n            this.leftMousePressed = false;\r\n            this.previousLeftMousePressed = true;\r\n            this.mouseDragStart = null;\r\n        });\r\n    }\r\n\r\n    public anyDirectional(): boolean {\r\n        if (this.upPressed || this.downPressed || this.leftPressed || this.rightPressed)\r\n            return true;\r\n\r\n        return false;\r\n    }\r\n\r\n    public clearQueue() {\r\n        this.keyQueue = [];\r\n    }\r\n}\r\n","import { Game } from \"../../game/game\";\r\nimport { Color } from \"../../base/color\";\r\nimport { Sprite } from \"../../game/world/sprite\";\r\nimport { ViewSprite } from \"./view-sprite\";\r\nimport { Door } from \"../../game/world/door\";\r\nimport { GameObject } from \"../../game/world/game-object\";\r\nimport { RayCast } from \"../../game/raycast\";\r\nimport { ResourceResolver } from \"../resource-resolver\";\r\nimport { Player } from \"../../game/player\";\r\n\r\n\r\nexport class Renderer {\r\n    screenWidth: number;\r\n\tscreenHeight: number;\r\n\tcanvas: HTMLCanvasElement;\r\n\r\n    resourceResolver: ResourceResolver;\r\n\tdrawContext: CanvasRenderingContext2D;\r\n    parentElement: HTMLElement;\r\n    mapVisible: boolean;\r\n\r\n    texWidth = 64;\r\n    texHeight = 64;\r\n\r\n    constructor(width: number, height: number, resResolver: ResourceResolver, canvasElement: HTMLCanvasElement, parent: HTMLElement) {\r\n        this.screenWidth = width;\r\n\t\tthis.screenHeight = height;\r\n\r\n        this.resourceResolver = resResolver;\r\n\t\tthis.canvas = canvasElement;\r\n\t\tthis.canvas.width = this.screenWidth;\r\n\t\tthis.canvas.height = this.screenHeight;\r\n\r\n        let context = this.canvas.getContext('2d');\r\n\t\tif ( context == null) {\r\n\t\t\tthrow new Error(\"Unable to get 2D rendering context from Canvas\");\r\n        }\r\n\r\n\t\tthis.drawContext = context;\r\n        this.drawContext.imageSmoothingEnabled = false;\r\n        this.parentElement = parent;\r\n    }\r\n\r\n    public toggleMap() {\r\n        this.mapVisible = !this.mapVisible;\r\n    }\r\n\r\n    public render(game: Game, delta: number) {\r\n        this.drawContext.fillStyle = \"#000\";\r\n        this.drawContext.fillRect(0,0,this.screenWidth, this.screenHeight);\r\n    \r\n        const textures = this.resourceResolver.getTextures(game.world);\r\n        const sprites = this.resourceResolver.getSprites(game.world);\r\n        \r\n        if ( textures.naturalWidth === 0 || textures.naturalHeight === 0 || \r\n            sprites.naturalWidth === 0  || sprites.naturalHeight === 0) {\r\n            this.drawContext.fillStyle = \"#fff\";\r\n            this.drawContext.font = \"30px Arial\";\r\n            this.drawContext.textAlign = \"center\";\r\n            this.drawContext.fillText(\"Loading textures...\", this.screenWidth/2, this.screenHeight/2);\r\n            return;\r\n        }\r\n\r\n        this.renderCeilingFloor(game);\r\n        this.renderWalls(game, textures, sprites);\r\n\r\n        if ( this.mapVisible ) {\r\n            this.renderMap(game);\r\n        }\r\n\r\n        this.renderInterface(game.player, sprites, delta);\r\n    }\r\n\r\n    private renderInterface(player: Player, sprites: HTMLImageElement, delta: number) {\r\n        let left = 16;\r\n        let bottom = 16;\r\n\r\n        player.items.forEach(i => {\r\n            // Don't draw items we have none of, or who are in the special 'score' category\r\n            if ( i.amount < 1 || i.name === 'score' ) {\r\n                return;\r\n            }\r\n\r\n            const width = 48;\r\n            const y = this.screenHeight - (bottom+width);\r\n            for (let n = 0; n < i.amount; n++) {\r\n                this.drawContext.drawImage(sprites, i.sprite*this.texWidth, 0, this.texWidth, this.texHeight, left+(n*width/2), y, width, width);\r\n            }\r\n            bottom+=(width/2 + 8);\r\n        });\r\n    }\r\n\r\n    private renderCeilingFloor(game: Game) {\r\n        // Temporary implementation\r\n        var ceilColor = this.getBlockColor(game.world.ceiling);\r\n        this.drawContext.fillStyle = \"hsl(\" + ceilColor.hue + \",\" + ceilColor.saturation + \"%,\" + ceilColor.lightness/2 + \"%)\";\r\n        this.drawContext.fillRect(0, 0, this.screenWidth, this.screenHeight/2);\r\n\r\n        var floorColor = this.getBlockColor(game.world.floor);\r\n        this.drawContext.fillStyle = \"hsl(\" + floorColor.hue + \",\" + floorColor.saturation + \"%,\" + floorColor.lightness/4 + \"%)\";\r\n        this.drawContext.fillRect(0, this.screenHeight/2, this.screenWidth, this.screenHeight/2);\r\n    }\r\n\r\n    private renderWalls(game: Game, textures: HTMLImageElement, spriteTextures: HTMLImageElement) {\r\n        const pitch = 0;\r\n        const zBuffer: Array<number> = [];\r\n        zBuffer.fill(0, 0, this.screenWidth);\r\n        const sprites: Array<ViewSprite> = [];\r\n\r\n        for(var x = 0; x < this.screenWidth; x++) {\r\n            var cameraX = 2 * x / this.screenWidth - 1; // X coordinate in camera space\r\n            var ray = RayCast.ray(game.player.position, game.player.direction, game.player.plane, cameraX, game.world);\r\n\r\n            if ( ray.sprites ) {\r\n                ray.sprites.forEach(sprite => {\r\n                    if ( sprites.findIndex(s => s.x.toFixed(3) === sprite.x.toFixed(3) && \r\n                        s.y.toFixed(3) === sprite.y.toFixed(3) && s.sprite === sprite.sprite) < 0) {\r\n                        sprites.push(sprite);\r\n                    }\r\n                })\r\n            }\r\n            \r\n            // Calculate height of line to draw on screen\r\n            var lineHeight = Math.floor(this.screenHeight / ray.perpWallDist);\r\n\r\n            // Calculate lowest and highest pixel to fill in current stripe\r\n            const drawStart = -lineHeight / 2 + this.screenHeight / 2 + pitch;\r\n            const drawEnd = lineHeight / 2 + this.screenHeight / 2 + pitch;\r\n\r\n            //x coordinate on the texture\r\n            var texX = ray.wallX * this.texWidth;\r\n            if(ray.side == 0 && ray.direction.x > 0) texX = this.texWidth - texX;\r\n            if(ray.side == 1 && ray.direction.y < 0) texX = this.texWidth - texX;\r\n            \r\n            if ( ray.worldObject instanceof Door && !ray.worldObject.block && !ray.inside ) { \r\n                if((ray.side == 0 && ray.direction.x > 0 )|| (ray.side == 1 && ray.direction.y < 0)) {\r\n                    texX += Math.floor(ray.worldObject.openAmount * this.texWidth);\r\n                } else {\r\n                    texX -= Math.floor(ray.worldObject.openAmount * this.texWidth);\r\n                }\r\n                \r\n            }\r\n\r\n            const textureStartX = Math.floor(this.texWidth+(ray.texture*this.texWidth)-texX);\r\n            this.drawContext.drawImage(textures, textureStartX, 0, 1, this.texHeight, x, drawStart, 1, drawEnd - drawStart);\r\n            if ( ray.side === 1 ) { \r\n                this.drawContext.strokeStyle = 'rgba(0,0,0,0.6)';\r\n                this.drawContext.beginPath();\r\n                this.drawContext.moveTo(x, drawStart);\r\n                this.drawContext.lineTo(x, drawEnd);\r\n                this.drawContext.stroke();\r\n            }\r\n\r\n            zBuffer[x] = ray.perpWallDist;\r\n        }\r\n\r\n        // Sort from farthest to closest\r\n        sprites.sort((a: ViewSprite, b: ViewSprite): number => {\r\n            if ( a.y === b.y) {\r\n                return Math.abs(a.x) > Math.abs(b.x) ? -1 : 1;\r\n            } else {\r\n                return Math.abs(a.y) > Math.abs(b.y) ? -1 : 1;\r\n            }\r\n        });\r\n        \r\n        \r\n        sprites.forEach(s => {\r\n            this.renderSpriteBillboard(s, game, zBuffer, pitch, spriteTextures);\r\n        });\r\n    }\r\n\r\n    private renderSpriteBillboard(sprite: ViewSprite, game: Game, zBuffer: Array<number>, pitch: number, texture: HTMLImageElement) {\r\n        const invDet = 1.0 / (game.player.plane.x * game.player.direction.y - game.player.direction.x * game.player.plane.y); //required for correct matrix multiplication\r\n\r\n        const transformX = invDet * (game.player.direction.y * sprite.x - game.player.direction.x * sprite.y);\r\n        const transformY = invDet * (-game.player.plane.y * sprite.x + game.player.plane.x * sprite.y); //this is actually the depth inside the screen, that what Z is in 3D\r\n\r\n        const spriteScreenX = Math.floor((this.screenWidth / 2) * (1 + transformX / transformY));\r\n\r\n        //calculate height of the sprite on screen\r\n        const spriteHeight = Math.abs(Math.floor(this.screenHeight / (transformY))); //using 'transformY' instead of the real distance prevents fisheye\r\n\r\n        //calculate width of the sprite\r\n        const spriteWidth = Math.abs(Math.floor(this.screenHeight / (transformY))) * sprite.scale;\r\n        var drawStartX = Math.floor(-spriteWidth / 2 + spriteScreenX);\r\n        if(drawStartX < 0) drawStartX = 0;\r\n        var drawEndX = spriteWidth / 2 + spriteScreenX;\r\n        if(drawEndX >= this.screenWidth) drawEndX = this.screenWidth - 1;\r\n\r\n        const startY = -((spriteHeight* sprite.scale)/2) + ((spriteHeight/2) - (spriteHeight * sprite.scale)/2) + (this.screenHeight / 2) + pitch;\r\n\r\n        //loop through every vertical stripe of the sprite on screen\r\n        for(var stripe = drawStartX; stripe < drawEndX; stripe++)\r\n        {\r\n            const texX = Math.floor((stripe - (-spriteWidth / 2 + spriteScreenX)) * this.texWidth / spriteWidth);\r\n            //the conditions in the if are:\r\n            //1) it's in front of camera plane so you don't see things behind you\r\n            //2) it's on the screen (left)\r\n            //3) it's on the screen (right)\r\n            //4) ZBuffer, with perpendicular distance\r\n            if(transformY > 0 && stripe > 0 && stripe < this.screenWidth && transformY < zBuffer[stripe]) {\r\n                // Ensure that we don't pick a pixel that's outside the tile, which may happen due to rounding with scaled sprites\r\n                let spriteStartX = Math.min((sprite.sprite * this.texWidth) + texX,(sprite.sprite * this.texWidth) + this.texWidth);\r\n                spriteStartX = Math.max(spriteStartX, (sprite.sprite * this.texWidth));\r\n\r\n                this.drawContext.drawImage(texture, spriteStartX, 0, 1, this.texHeight, stripe, startY, 1, spriteHeight*sprite.scale);\r\n                zBuffer[stripe] = transformY;\r\n            }\r\n        }\r\n    }\r\n\r\n    private renderMap(game: Game) {\r\n        const blockSize = 8;\r\n\r\n        for (var y = 0; y < game.world.objects.length; y++) {\r\n            for (var x = 0; x < game.world.objects[y].length; x++) {\r\n                const obj = game.world.objects[y][x];\r\n                if ( obj == null) continue;\r\n\r\n                var color = this.getBlockColor(obj.texture+1);\r\n                this.drawContext.fillStyle = \"hsl(\" + color.hue + \",\" + color.saturation + \"%,\" + color.lightness + \"%)\";\r\n                if ( obj instanceof Sprite ) {\r\n                    this.drawContext.strokeStyle = '#f77';\r\n                    this.drawCircle((x+0.5)*blockSize, (y+0.5)*blockSize, blockSize/2);\r\n                } else if ( obj instanceof Door && !obj.block) {\r\n                    var neighbour: GameObject;\r\n                    if ( x > 0) {\r\n                        neighbour = game.world.objects[y][x-1];\r\n                    } else {\r\n                        neighbour = game.world.objects[y][x+1];\r\n                    }\r\n                    if ( neighbour == null ) { this.drawContext.fillRect((x+0.25)*blockSize, y*blockSize, blockSize/2, blockSize); }\r\n                    else { this.drawContext.fillRect(x*blockSize, (y+0.25)*blockSize, blockSize, blockSize/2); }\r\n                } else {\r\n                    this.drawContext.fillRect(x*blockSize, y*blockSize, blockSize, blockSize);\r\n                }\r\n                \r\n                if ( game.currentTileX === x && game.currentTileY === y) {\r\n                    this.drawContext.strokeStyle = '#f0f';\r\n                    this.drawContext.strokeRect(x*blockSize, y*blockSize, blockSize, blockSize);\r\n                }\r\n            }\r\n        }\r\n\r\n        const playerX = game.player.position.x*blockSize;\r\n        const playerY = game.player.position.y*blockSize;\r\n        this.drawContext.strokeStyle = \"#fff\";\r\n        this.drawCircle(playerX, playerY, blockSize/2);\r\n        this.drawContext.beginPath();\r\n        this.drawContext.moveTo(playerX, playerY);\r\n        this.drawContext.lineTo(playerX + game.player.direction.x*blockSize, playerY + game.player.direction.y*blockSize);\r\n        this.drawContext.stroke();\r\n    }\r\n\r\n    private drawCircle(x: number, y: number, r: number) {\r\n        this.drawContext.beginPath();\r\n        this.drawContext.arc(x, y, r, 0, 2 * Math.PI);\r\n        this.drawContext.stroke(); \r\n    }\r\n\r\n    private getBlockColor(blockId: number): Color {\r\n        var hue = 0;\r\n        var saturation = 100;\r\n        var lightness = 50\r\n\r\n        switch(blockId) {\r\n            case 0: // Empty\r\n                saturation = 0;\r\n                lightness = 0;\r\n                break;\r\n            \r\n            default:\r\n                hue = blockId*40;\r\n                break; \r\n        }\r\n\r\n        return new Color(hue, saturation, lightness);\r\n    }\r\n}\r\n","export class ViewSprite {\r\n    public x: number;\r\n    public y: number;\r\n    public sprite: number;\r\n    public scale: number;\r\n\r\n    constructor(x: number, y: number, sprite: number, scale: number = 1) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.sprite = sprite;\r\n        this.scale = scale;\r\n    }\r\n\r\n    distanceTo(x: number, y: number) : number {\r\n        return ((x - this.x) * (x - this.x) + (y - this.y) * (y - this.y));\r\n    }\r\n}","import { World } from \"../game/world/world\";\r\n\r\nexport class ResourceResolver {\r\n    public parentElement: HTMLElement;\r\n    public images: Map<string, HTMLImageElement>;\r\n\r\n    constructor(parent: HTMLElement) {\r\n        this.parentElement = parent;\r\n        this.images = new Map<string, HTMLImageElement>();\r\n    }\r\n\r\n    getTextures(world: World): HTMLImageElement {\r\n        let textureImage = this.images.get(world.textures.href);\r\n        if ( textureImage != null ) {\r\n            return textureImage;\r\n        }\r\n\r\n        return this.addResource(world.textures.href);\r\n    }\r\n\r\n    getSprites(world: World): HTMLImageElement {\r\n        let spriteImage = this.images.get(world.sprites.href);\r\n        if ( spriteImage != null ) {\r\n            return spriteImage;\r\n        }\r\n\r\n        return this.addResource(world.sprites.href);\r\n    }\r\n\r\n    private addResource(url: string): HTMLImageElement {\r\n        const img = document.createElement('img');\r\n        img.src = url;\r\n        img.classList.add('hidden');\r\n        this.parentElement.appendChild(img);\r\n        this.images.set(url, img);\r\n        return img;\r\n    }\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { Game } from \"./ts/game/game\";\r\nimport { ResourceResolver } from \"./ts/presentation/resource-resolver\";\r\nimport { Input } from \"./ts/presentation/input\";\r\nimport { Renderer } from \"./ts/presentation/rendering/renderer\";\r\nimport { GuiManager } from \"./ts/presentation/gui-manager\";\r\n\r\nconst input = new Input();\r\ninput.attachEventListeners(document.getElementsByTagName('body')[0]);\r\n\r\nconst width = 1024;\r\nconst height = 768;\r\nconst canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\r\nconst depth = document.getElementById(\"depth\") as HTMLCanvasElement;\r\nconst parent = document.getElementById(\"client-parent\") as HTMLElement;\r\nparent.style.maxWidth = `${width}px`;\r\n\r\nconst resources = new ResourceResolver(parent);\r\nconst renderer = new Renderer(width, height, resources, canvas, depth);\r\nconst guiManager = new GuiManager(resources, parent);\r\nconst game = new Game(renderer, input, guiManager);\r\n\r\nvar url = new URL(\"./assets/room.json\", document.baseURI).href; // Local room is fallback\r\n\r\nconst params = new URLSearchParams(window.location.search);\r\nif ( params.get('url') != null) {\r\n    url = params.get('url');\r\n} \r\n\r\ngame.loadRoom(url);"],"names":["Color","hue","saturation","lightness","this","x","y","add","vector","Vector","multiply","scalar","subtract","rotateBy","degrees","Math","PI","cos","sin","round","magnitude","sqrt","setLength","length","mag","normalize","mgn","dot","cross","rotationDiff","atan2","game","gui","guiManager","handle","event","GameEventHandler","GameEvent","itemName","item","handler","sprite","world","items","get","texture","addDialog","ItemConsumedEvent","ItemRequiredEvent","renderer","input","currentTileX","currentTileY","currentTime","previousTime","player","Player","events","Array","loadRoom","urlString","url","URL","console","log","href","fetch","method","mode","then","response","ok","Error","json","room","Room","validate","World","from","tick","performance","now","delta","gameStep","step","render","forEach","e","window","requestAnimationFrame","bind","addEvent","push","keyQueue","find","k","toggleMap","clearQueue","usePressed","leftMouseUp","ray","RayCast","position","direction","plane","hit","perpWallDist","worldObject","Door","interact","anyDirectional","mouseDragStart","movement","getMovementFromInput","newPlayerPos","objects","currentTile","nextTile","floor","rotationOffset","collidable","Portal","targetPortal","targetDirection","targetPosition","nudge","Pickup","onPickup","leftPressed","rightPressed","xVel","yVel","upPressed","movementSpeed","downPressed","mousePosition","forward","min","max","Game","Item","name","amount","points","i","RayCastResult","originPos","originDir","originPlane","cameraX","stopOnSprite","startLength","maxLength","stepX","stepY","sideDistX","sideDistY","rayDirX","rayDirY","mapX","mapY","deltaDistX","abs","deltaDistY","side","texNum","wallX","wallXOffset","wallYOffset","inside","sprites","Sprite","viewSprite","ViewSprite","scale","findIndex","v","block","openAmount","perpendicularDistance","newPos","newDir","newPlane","castResult","s","spritePos","result","map","pos","wallOffset","rayDir","textures","tiles","tilesWidth","debug","key","unlockTexture","closed","openTime","unlock","keyIndex","GameObject","existing","connect","portal","distanceBetween","otherX","otherY","ceiling","dynamicObjects","Map","o","cacheDynamicObjects","splice","obj","pathParts","pathname","split","basePath","join","origin","portals","row","tile","type","dir","target","set","pickup","message","element","alive","addDelta","Dialog","resourceResolver","parent","lastScore","texWidth","texHeight","parentElement","scoreElement","document","createElement","classList","appendChild","dialog","oldElement","removeChild","text","innerText","createSpriteCanvas","score","padStart","canvas","width","height","ctx","getContext","sheet","getSprites","drawImage","GuiManager","leftMousePressed","previousLeftMousePressed","attachEventListeners","el","addEventListener","preventDefault","button","rect","getBoundingClientRect","clientX","left","clientY","top","relX","changedTouches","relY","Input","resResolver","canvasElement","screenWidth","screenHeight","context","drawContext","imageSmoothingEnabled","mapVisible","fillStyle","fillRect","getTextures","naturalWidth","naturalHeight","font","textAlign","fillText","renderCeilingFloor","renderWalls","renderMap","renderInterface","bottom","n","ceilColor","getBlockColor","floorColor","spriteTextures","zBuffer","fill","toFixed","lineHeight","drawStart","drawEnd","texX","textureStartX","strokeStyle","beginPath","moveTo","lineTo","stroke","sort","a","b","renderSpriteBillboard","pitch","invDet","transformX","transformY","spriteScreenX","spriteHeight","spriteWidth","drawStartX","drawEndX","startY","stripe","spriteStartX","color","drawCircle","blockSize","strokeRect","playerX","playerY","r","arc","blockId","Renderer","distanceTo","images","textureImage","addResource","spriteImage","img","src","ResourceResolver","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","call","getElementsByTagName","getElementById","depth","style","maxWidth","resources","baseURI","params","URLSearchParams","location","search"],"sourceRoot":""}