{"version":3,"file":"main.bf52fe55506867471371.js","mappings":"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","sources":["webpack://weblabyrinth/./src/client/color.ts","webpack://weblabyrinth/./src/client/game.ts","webpack://weblabyrinth/./src/client/input.ts","webpack://weblabyrinth/./src/client/player.ts","webpack://weblabyrinth/./src/client/renderer.ts","webpack://weblabyrinth/./src/client/vector.ts","webpack://weblabyrinth/webpack/bootstrap","webpack://weblabyrinth/./src/index.ts"],"sourcesContent":["export class Color\r\n{\r\n    hue: number;\r\n    saturation: number;\r\n    lightness: number;\r\n    \r\n    constructor(hue: number, saturation: number, lightness: number) {\r\n        this.hue = hue;\r\n        this.saturation = saturation;\r\n        this.lightness = lightness;\r\n    }\r\n}","import { Input } from './input';\r\nimport { Player } from './player';\r\nimport { Renderer } from './renderer';\r\n\r\nexport class Game {\r\n    public worldMap = [\r\n\t\t[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2],\r\n\t\t[4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,3,0,0,0,2],\r\n\t\t[4,0,0,0,0,0,0,2,2,2,2,2,2,0,0,3,0,3,3,3,0,0,0,2],\r\n\t\t[4,0,3,3,0,0,0,2,0,0,0,0,2,0,0,0,0,0,0,3,0,0,0,2],\r\n\t\t[4,0,3,3,0,0,2,2,0,2,2,0,2,0,0,3,3,3,0,3,0,0,0,2],\r\n\t\t[4,0,3,3,0,0,2,0,0,0,2,0,2,0,0,3,0,0,0,3,0,0,0,2],\r\n\t\t[4,0,3,3,0,0,2,0,0,0,0,0,2,0,0,3,0,3,3,3,0,0,0,2],\r\n\t\t[4,0,0,0,0,0,2,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,2],\r\n\t\t[4,0,0,0,0,0,2,2,0,2,2,0,0,0,0,3,0,3,0,3,0,0,0,2],\r\n\t\t[4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],\r\n\t\t[4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],\r\n\t\t[4,0,1,0,0,1,0,0,0,0,0,5,5,5,5,5,0,0,0,0,0,0,0,2],\r\n\t\t[4,0,0,0,0,1,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,2],\r\n\t\t[4,0,0,0,0,1,0,0,0,0,0,5,5,0,0,5,0,0,0,0,0,0,0,2],\r\n\t\t[4,0,1,1,1,1,0,0,0,0,0,0,5,0,0,5,0,0,0,0,0,0,0,2],\r\n\t\t[4,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,0,0,1,0,0,1,1,2],\r\n\t\t[4,4,4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,1,0,0,0,0,2],\r\n\t\t[4,4,0,4,0,0,0,0,4,0,0,0,0,0,0,0,0,0,1,0,0,1,1,2],\r\n\t\t[4,4,0,0,0,0,5,0,4,4,0,4,4,4,0,0,0,0,1,0,0,0,0,2],\r\n\t\t[4,4,0,4,0,0,0,0,4,0,0,0,0,0,0,0,0,0,1,0,0,1,1,2],\r\n\t\t[4,4,0,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,1,0,0,0,0,2],\r\n\t\t[4,4,0,0,0,0,0,0,0,0,0,4,4,4,0,0,0,0,1,0,0,0,0,2],\r\n\t\t[4,4,4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,1,0,0,0,0,2],\r\n\t\t[4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]];\r\n\r\n\tpublic ceiling = 5;\r\n\tpublic floor = 2;\r\n\r\n\tplayer: Player;\r\n\tinput: Input;\r\n\trenderer: Renderer;\r\n\t\r\n\tcurrentTileX = 0;\r\n\tcurrentTileY = 0;\r\n\r\n\tcurrentTime = 0;\r\n\tpreviousTime = 0;\r\n\r\n\tconstructor(renderer: Renderer, input: Input) {\r\n\t\tthis.renderer = renderer;\r\n\t\tthis.input = input;\r\n\t\tthis.player = new Player(17, 19);\r\n\t}\r\n\r\n\t/**\r\n\t * Progresses the game by 1 step, and schedules the next step\r\n\t */\r\n\tpublic tick() {\r\n\t\tthis.gameStep();\r\n\t\tthis.renderer.render(this);\r\n\r\n\t\twindow.requestAnimationFrame(this.tick.bind(this));\r\n\t}\r\n\r\n\tprivate gameStep() {\r\n\t\tif ( this.input.keyQueue.length > 0) {\r\n\t\t\tconsole.log(this.input.keyQueue);\r\n\t\t\tif ( this.input.keyQueue.find((k) => k === 'm') != null) {\r\n\t\t\t\tthis.renderer.toggleMap();\r\n\t\t\t}\r\n\r\n\t\t\tthis.input.clearQueue();\r\n\t\t}\r\n\r\n\t\tif ( !this.input.anyDirectional() ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tif ( this.input.leftPressed) {\r\n\t\t\tthis.player.rotateBy(1.5);\r\n\t\t} else if ( this.input.rightPressed) {\r\n\t\t\tthis.player.rotateBy(-1.5);\r\n\t\t}\r\n\r\n\t\tlet xVel = 0;\r\n\t\tlet yVel = 0;\r\n\t\tif ( this.input.upPressed ) {\r\n\t\t\tyVel += this.player.direction.y * this.player.movementSpeed;\r\n\t\t\txVel += this.player.direction.x * this.player.movementSpeed;\r\n\t\t} else if (this.input.downPressed) {\r\n\t\t\tyVel -= this.player.direction.y * this.player.movementSpeed;\r\n\t\t\txVel -= this.player.direction.x * this.player.movementSpeed;\r\n\t\t} else {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst newPlayerX = this.player.posX + xVel;\r\n\t\tconst newPlayerY = this.player.posY + yVel;\r\n\r\n\t\t// Out of bounds\r\n\t\tif (newPlayerY > this.worldMap.length || newPlayerY < 0 || newPlayerX > this.worldMap[0].length || newPlayerX < 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.currentTileX = Math.floor(newPlayerX);\r\n\t\tthis.currentTileY = Math.floor(newPlayerY);\r\n\r\n\t\tconst currentTile = this.worldMap[this.currentTileY][this.currentTileX];\r\n\t\tif (currentTile !== 0 ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.player.posX = newPlayerX;\r\n\t\tthis.player.posY = newPlayerY;\r\n\t}\r\n};","export class Input {\r\n    public upPressed = false;\r\n    public downPressed = false;\r\n    public leftPressed = false;\r\n    public rightPressed = false;\r\n    public keyQueue = [];\r\n    \r\n    public attachEventListeners(el: HTMLElement) {\r\n        el.addEventListener(\"keydown\", (e: KeyboardEvent) => {\r\n            if (e.key === \"ArrowLeft\") { this.leftPressed = true; };\r\n            if (e.key === \"ArrowRight\") { this.rightPressed = true; };\r\n            if (e.key === \"ArrowUp\") { this.upPressed = true; };\r\n            if (e.key === \"ArrowDown\") { this.downPressed = true; };\r\n        });\r\n\r\n        el.addEventListener(\"keyup\", (e: KeyboardEvent) => {\r\n            if (e.key === \"ArrowLeft\") { this.leftPressed = false; };\r\n            if (e.key === \"ArrowRight\") { this.rightPressed = false; };\r\n            if (e.key === \"ArrowUp\") { this.upPressed = false; };\r\n            if (e.key === \"ArrowDown\") { this.downPressed = false; };\r\n            if (e.key.length === 1 ) { this.keyQueue.push(e.key); }\r\n        });\r\n    }\r\n\r\n    public anyDirectional(): boolean {\r\n        if (this.upPressed || this.downPressed || this.leftPressed || this.rightPressed)\r\n            return true;\r\n\r\n        return false;\r\n    }\r\n\r\n    public clearQueue() {\r\n        this.keyQueue = [];\r\n    }\r\n}","import { Vector } from './vector';\r\n\r\nexport class Player {\r\n    posX: number;\r\n    posY: number;\r\n    movementSpeed: number = 0.05;\r\n\r\n    direction: Vector;\r\n    plane: Vector;\r\n    \r\n    constructor(x: number, y: number) {\r\n        this.posX = x;\r\n        this.posY = y;\r\n        this.direction = new Vector(0, -1);\r\n        this.plane = new Vector(0.66, 0);\r\n    }\r\n\r\n    rotateBy(degrees: number) {\r\n        this.direction.rotateBy(degrees);\r\n        this.plane.rotateBy(degrees);\r\n    }\r\n}","import { Game } from \"../client/game\";\r\nimport { Color } from \"./color\";\r\n\r\nexport class Renderer {\r\n    screenWidth: number;\r\n\tscreenHeight: number;\r\n\tcanvas: HTMLCanvasElement;\r\n\tdrawContext: CanvasRenderingContext2D;\r\n    mapVisible: boolean;\r\n    textures: HTMLImageElement;\r\n\r\n    texWidth = 64;\r\n    texHeight = 64;\r\n\r\n    constructor(width: number, height: number, canvasElement: HTMLCanvasElement, textures: HTMLImageElement) {\r\n        this.screenWidth = width;\r\n\t\tthis.screenHeight = height;\r\n\r\n        this.textures = textures;\r\n\t\tthis.canvas = canvasElement;\r\n\t\tthis.canvas.width = this.screenWidth;\r\n\t\tthis.canvas.height = this.screenHeight;\r\n\r\n        let context = this.canvas.getContext('2d');\r\n\t\tif ( context == null) {\r\n\t\t\tthrow new Error(\"Unable to get 2D rendering context from Canvas\");\r\n\t\t}\r\n\r\n\t\tthis.drawContext = context;\r\n        this.drawContext.imageSmoothingEnabled = false;\r\n    }\r\n\r\n    public toggleMap() {\r\n        this.mapVisible = !this.mapVisible;\r\n    }\r\n\r\n    public render(game: Game) {\r\n        this.drawContext.fillStyle = \"#000\";\r\n        this.drawContext.fillRect(0,0,this.screenWidth, this.screenHeight);\r\n    \r\n        this.renderCeilingFloor(game);\r\n        this.renderWalls(game);\r\n\r\n        if ( this.mapVisible ) {\r\n            this.renderMap(game);\r\n        }\r\n    }\r\n\r\n    private renderCeilingFloor(game: Game) {\r\n        // Temporary implementation\r\n        var ceilColor = this.getBlockColor(game.ceiling);\r\n        this.drawContext.fillStyle = \"hsl(\" + ceilColor.hue + \",\" + ceilColor.saturation + \"%,\" + ceilColor.lightness/2 + \"%)\";\r\n        this.drawContext.fillRect(0, 0, this.screenWidth, this.screenHeight/2);\r\n\r\n        var floorColor = this.getBlockColor(game.floor);\r\n        this.drawContext.fillStyle = \"hsl(\" + floorColor.hue + \",\" + floorColor.saturation + \"%,\" + floorColor.lightness/4 + \"%)\";\r\n        this.drawContext.fillRect(0, this.screenHeight/2, this.screenWidth, this.screenHeight/2);\r\n    }\r\n\r\n    private renderWalls(game: Game) {\r\n        for(var x = 0; x < this.screenWidth; x++) {\r\n            var cameraX = 2 * x / this.screenWidth - 1; // X coordinate in camera space\r\n            var rayDirX = game.player.direction.x + game.player.plane.x * cameraX;\r\n            var rayDirY = game.player.direction.y + game.player.plane.y * cameraX;\r\n    \r\n            // Which box of the map we're in\r\n            var mapX = Math.floor(game.player.posX);\r\n            var mapY = Math.floor(game.player.posY);\r\n    \r\n            // Length of ray from one X or Y-side to next X or Y-side\r\n            var deltaDistX = Math.abs(1/rayDirX);\r\n            var deltaDistY = Math.abs(1/rayDirY);\r\n\r\n            // What direction to step in X or Y-direction (either +1 or -1)\r\n            var stepX;\r\n            var stepY;\r\n    \r\n            // Length of array from current position to next X or Y-side\r\n            var sideDistX;\r\n            var sideDistY;\r\n\r\n            // Calculate step and initial sideDist\r\n            if (rayDirX < 0)\r\n            {\r\n                stepX = -1;\r\n                sideDistX = (game.player.posX - mapX) * deltaDistX;\r\n            }\r\n            else\r\n            {\r\n                stepX = 1;\r\n                sideDistX = (mapX + 1.0 - game.player.posX) * deltaDistX;\r\n            }\r\n            if (rayDirY < 0)\r\n            {\r\n                stepY = -1;\r\n                sideDistY = (game.player.posY - mapY) * deltaDistY;\r\n            }\r\n            else\r\n            {\r\n                stepY = 1;\r\n                sideDistY = (mapY + 1.0 - game.player.posY) * deltaDistY;\r\n            }\r\n\r\n            var hit = 0;\r\n            var side;\r\n    \r\n            // Perform DDA\r\n            while (hit === 0)\r\n            {\r\n                // Jump to next map square, OR in X-direction, OR in Y-direction\r\n                if (sideDistX < sideDistY)\r\n                {\r\n                    sideDistX += deltaDistX;\r\n                    mapX += stepX;\r\n                    side = 0;\r\n                }\r\n                else\r\n                {\r\n                    sideDistY += deltaDistY;\r\n                    mapY += stepY;\r\n                    side = 1;\r\n                }\r\n                // Check if ray has hit a wall\r\n                if (game.worldMap[mapY][mapX] > 0) hit = 1;\r\n            }\r\n    \r\n            var perpWallDist;\r\n\r\n            // Calculate distance projected on camera direction (Euclidean distance will give fisheye effect!)\r\n            if (side === 0) perpWallDist = (mapX - game.player.posX + (1 - stepX) / 2) / rayDirX;\r\n            else           perpWallDist = (mapY - game.player.posY + (1 - stepY) / 2) / rayDirY;\r\n    \r\n            // Calculate height of line to draw on screen\r\n            var lineHeight = Math.floor(this.screenHeight / perpWallDist);\r\n    \r\n            const pitch = 0;\r\n\r\n            // Calculate lowest and highest pixel to fill in current stripe\r\n            const drawStart = -lineHeight / 2 + this.screenHeight / 2 + pitch;\r\n            const drawEnd = lineHeight / 2 + this.screenHeight / 2 + pitch;\r\n\r\n            var texNum = game.worldMap[mapY][mapX] - 1;\r\n\r\n            //calculate value of wallX\r\n            var wallX; //where exactly the wall was hit\r\n            if (side == 0) wallX = game.player.posY + perpWallDist * rayDirY;\r\n            else           wallX = game.player.posX + perpWallDist * rayDirX;\r\n            wallX -= Math.floor(wallX);\r\n\r\n            //x coordinate on the texture\r\n            var texX = wallX * this.texWidth;\r\n            if(side == 0 && rayDirX > 0) texX = this.texWidth - texX;\r\n            if(side == 1 && rayDirY < 0) texX = this.texWidth - texX;\r\n\r\n            const textureStartX = Math.floor(this.texWidth+(texNum*this.texWidth)-texX);\r\n            this.drawContext.drawImage(this.textures, textureStartX, 0, 1, this.texHeight, x, drawStart, 1, drawEnd - drawStart);\r\n            if ( side === 1 ) { \r\n                this.drawContext.strokeStyle = 'rgba(0,0,0,0.6)';\r\n                this.drawContext.beginPath();\r\n                this.drawContext.moveTo(x, drawStart);\r\n                this.drawContext.lineTo(x, drawEnd);\r\n                this.drawContext.stroke();\r\n            }\r\n        }\r\n    }\r\n\r\n    private renderMap(game: Game) {\r\n        const blockSize = 10;\r\n        this.drawContext.strokeStyle = '#f0f';\r\n\r\n        for (var y = 0; y < game.worldMap.length; y++) {\r\n            for (var x = 0; x < game.worldMap[y].length; x++) {\r\n                var color = this.getBlockColor(game.worldMap[y][x]);\r\n                this.drawContext.fillStyle = \"hsl(\" + color.hue + \",\" + color.saturation + \"%,\" + color.lightness + \"%)\";\r\n                this.drawContext.fillRect(x*blockSize, y*blockSize, blockSize, blockSize);\r\n                if ( game.currentTileX === x && game.currentTileY === y) {\r\n                    this.drawContext.strokeRect(x*blockSize, y*blockSize, blockSize, blockSize);\r\n                }\r\n            }\r\n        }\r\n\r\n        const playerX = game.player.posX*blockSize;\r\n        const playerY = game.player.posY*blockSize;\r\n        this.drawContext.strokeStyle = \"#fff\";\r\n        this.drawContext.beginPath();\r\n        this.drawContext.arc(playerX, playerY, blockSize/2, 0, 2 * Math.PI);\r\n        this.drawContext.stroke(); \r\n        this.drawContext.beginPath();\r\n        this.drawContext.moveTo(playerX, playerY);\r\n        this.drawContext.lineTo(playerX + game.player.direction.x*blockSize, playerY + game.player.direction.y*blockSize);\r\n        this.drawContext.stroke();\r\n    }\r\n\r\n    private getBlockColor(blockId: number): Color {\r\n        var hue = 0;\r\n        var saturation = 100;\r\n        var lightness = 50\r\n\r\n        switch(blockId) {\r\n            case 0: // Empty\r\n                saturation = 0;\r\n                lightness = 0;\r\n                break;\r\n            \r\n            default:\r\n                hue = blockId*40;\r\n                break; \r\n        }\r\n\r\n        return new Color(hue, saturation, lightness);\r\n    }\r\n}\r\n","export class Vector {\r\n    public x: number;\r\n    public y: number;\r\n\r\n    constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    rotateBy(degrees: number) {\r\n        degrees = -degrees * (Math.PI / 180);\r\n        const cos = Math.cos(degrees);\r\n        const sin = Math.sin(degrees);\r\n        const newX = Math.round(10000 * (this.x * cos - this.y * sin)) / 10000;\r\n        const newY = Math.round(10000 * (this.x * sin + this.y * cos)) / 10000;\r\n        this.x = newX;\r\n        this.y = newY;\r\n    }\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { Game } from \"./client/game\";\r\nimport { Input } from \"./client/input\";\r\nimport { Renderer } from \"./client/renderer\";\r\n\r\nconst input = new Input();\r\ninput.attachEventListeners(document.getElementsByTagName('body')[0]);\r\n\r\nconst canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\r\nconst textures = document.getElementById(\"textures\") as HTMLImageElement;\r\nvar renderer = new Renderer(1024, 768, canvas, textures);\r\nvar game = new Game(renderer, input);\r\ngame.tick();"],"names":["Color","hue","saturation","lightness","this","renderer","input","worldMap","ceiling","floor","currentTileX","currentTileY","currentTime","previousTime","player","Player","tick","gameStep","render","window","requestAnimationFrame","bind","keyQueue","length","console","log","find","k","toggleMap","clearQueue","anyDirectional","leftPressed","rotateBy","rightPressed","xVel","yVel","upPressed","direction","y","movementSpeed","x","downPressed","newPlayerX","posX","newPlayerY","posY","Math","Game","attachEventListeners","el","addEventListener","e","key","push","Input","Vector","plane","degrees","width","height","canvasElement","textures","texWidth","texHeight","screenWidth","screenHeight","canvas","context","getContext","Error","drawContext","imageSmoothingEnabled","mapVisible","game","fillStyle","fillRect","renderCeilingFloor","renderWalls","renderMap","ceilColor","getBlockColor","floorColor","stepX","stepY","sideDistX","sideDistY","cameraX","rayDirX","rayDirY","mapX","mapY","deltaDistX","abs","deltaDistY","side","perpWallDist","hit","wallX","lineHeight","drawStart","drawEnd","texNum","texX","textureStartX","drawImage","strokeStyle","beginPath","moveTo","lineTo","stroke","blockSize","color","strokeRect","playerX","playerY","arc","PI","blockId","Renderer","cos","sin","newX","round","newY","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","document","getElementsByTagName","getElementById"],"sourceRoot":""}