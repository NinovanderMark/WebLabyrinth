{"version":3,"file":"main.02f036ecc4829c107df1.js","mappings":"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","sources":["webpack://weblabyrinth/./src/client/color.ts","webpack://weblabyrinth/./src/client/game.ts","webpack://weblabyrinth/./src/client/input.ts","webpack://weblabyrinth/./src/client/player.ts","webpack://weblabyrinth/./src/client/renderer.ts","webpack://weblabyrinth/./src/client/vector.ts","webpack://weblabyrinth/webpack/bootstrap","webpack://weblabyrinth/./src/index.ts"],"sourcesContent":["export class Color\r\n{\r\n    hue: number;\r\n    saturation: number;\r\n    lightness: number;\r\n    \r\n    constructor(hue: number, saturation: number, lightness: number) {\r\n        this.hue = hue;\r\n        this.saturation = saturation;\r\n        this.lightness = lightness;\r\n    }\r\n}","import { Input } from './input';\r\nimport { Player } from './player';\r\nimport { Renderer } from './renderer';\r\n\r\nexport class Game {\r\n    public worldMap = [\r\n\t\t[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\r\n\t\t[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\r\n\t\t[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\r\n\t\t[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\r\n\t\t[1,0,0,0,0,0,2,2,2,2,2,0,0,0,0,3,0,3,0,3,0,0,0,1],\r\n\t\t[1,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,1],\r\n\t\t[1,0,0,0,0,0,2,0,0,0,2,0,0,0,0,3,0,0,0,3,0,0,0,1],\r\n\t\t[1,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,1],\r\n\t\t[1,0,0,0,0,0,2,2,0,2,2,0,0,0,0,3,0,3,0,3,0,0,0,1],\r\n\t\t[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\r\n\t\t[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\r\n\t\t[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\r\n\t\t[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\r\n\t\t[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\r\n\t\t[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\r\n\t\t[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\r\n\t\t[1,4,4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\r\n\t\t[1,4,0,4,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\r\n\t\t[1,4,0,0,0,0,5,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\r\n\t\t[1,4,0,4,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\r\n\t\t[1,4,0,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\r\n\t\t[1,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\r\n\t\t[1,4,4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\r\n\t\t[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]];\r\n\r\n\tplayer: Player;\r\n\tinput: Input;\r\n\trenderer: Renderer;\r\n\t\r\n\tcurrentTileX = 0;\r\n\tcurrentTileY = 0;\r\n\r\n\tcurrentTime = 0;\r\n\tpreviousTime = 0;\r\n\r\n\tconstructor(renderer: Renderer, input: Input) {\r\n\t\tthis.renderer = renderer;\r\n\t\tthis.input = input;\r\n\t\tthis.player = new Player(18, 19);\r\n\t}\r\n\r\n\t/**\r\n\t * Progresses the game by 1 step, and schedules the next step\r\n\t */\r\n\tpublic tick() {\r\n\t\tthis.gameStep();\r\n\t\tthis.renderer.render(this);\r\n\r\n\t\twindow.requestAnimationFrame(this.tick.bind(this));\r\n\t}\r\n\r\n\tprivate gameStep() {\r\n\t\tif ( this.input.keyQueue.length > 0) {\r\n\t\t\tconsole.log(this.input.keyQueue);\r\n\t\t\tif ( this.input.keyQueue.find((k) => k === 'm') != null) {\r\n\t\t\t\tthis.renderer.toggleMap();\r\n\t\t\t}\r\n\r\n\t\t\tthis.input.clearQueue();\r\n\t\t}\r\n\r\n\t\tif ( !this.input.anyDirectional() ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tif ( this.input.leftPressed) {\r\n\t\t\tthis.player.rotateBy(1);\r\n\t\t} else if ( this.input.rightPressed) {\r\n\t\t\tthis.player.rotateBy(-1);\r\n\t\t}\r\n\r\n\t\tlet xVel = 0;\r\n\t\tlet yVel = 0;\r\n\t\tif ( this.input.upPressed ) {\r\n\t\t\tyVel += this.player.direction.y * this.player.movementSpeed;\r\n\t\t\txVel += this.player.direction.x * this.player.movementSpeed;\r\n\t\t} else if (this.input.downPressed) {\r\n\t\t\tyVel -= this.player.direction.y * this.player.movementSpeed;\r\n\t\t\txVel -= this.player.direction.x * this.player.movementSpeed;\r\n\t\t} else {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst newPlayerX = this.player.posX + xVel;\r\n\t\tconst newPlayerY = this.player.posY + yVel;\r\n\r\n\t\t// Out of bounds\r\n\t\tif (newPlayerY > this.worldMap.length || newPlayerY < 0 || newPlayerX > this.worldMap[0].length || newPlayerX < 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.currentTileX = Math.floor(newPlayerX);\r\n\t\tthis.currentTileY = Math.floor(newPlayerY);\r\n\r\n\t\tconst currentTile = this.worldMap[this.currentTileY][this.currentTileX];\r\n\t\tif (currentTile !== 0 ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.player.posX = newPlayerX;\r\n\t\tthis.player.posY = newPlayerY;\r\n\t}\r\n};","export class Input {\r\n    public upPressed = false;\r\n    public downPressed = false;\r\n    public leftPressed = false;\r\n    public rightPressed = false;\r\n    public keyQueue = [];\r\n    \r\n    public attachEventListeners(el: HTMLElement) {\r\n        el.addEventListener(\"keydown\", (e: KeyboardEvent) => {\r\n            if (e.key === \"ArrowLeft\") { this.leftPressed = true; };\r\n            if (e.key === \"ArrowRight\") { this.rightPressed = true; };\r\n            if (e.key === \"ArrowUp\") { this.upPressed = true; };\r\n            if (e.key === \"ArrowDown\") { this.downPressed = true; };\r\n        });\r\n\r\n        el.addEventListener(\"keyup\", (e: KeyboardEvent) => {\r\n            if (e.key === \"ArrowLeft\") { this.leftPressed = false; };\r\n            if (e.key === \"ArrowRight\") { this.rightPressed = false; };\r\n            if (e.key === \"ArrowUp\") { this.upPressed = false; };\r\n            if (e.key === \"ArrowDown\") { this.downPressed = false; };\r\n            if (e.key.length === 1 ) { this.keyQueue.push(e.key); }\r\n        });\r\n    }\r\n\r\n    public anyDirectional(): boolean {\r\n        if (this.upPressed || this.downPressed || this.leftPressed || this.rightPressed)\r\n            return true;\r\n\r\n        return false;\r\n    }\r\n\r\n    public clearQueue() {\r\n        this.keyQueue = [];\r\n    }\r\n}","import { Vector } from './vector';\r\n\r\nexport class Player {\r\n    posX: number;\r\n    posY: number;\r\n    movementSpeed: number = 0.05;\r\n\r\n    direction: Vector;\r\n    plane: Vector;\r\n    \r\n    constructor(x: number, y: number) {\r\n        this.posX = x;\r\n        this.posY = y;\r\n        this.direction = new Vector(0, -1);\r\n        this.plane = new Vector(0.66, 0);\r\n    }\r\n\r\n    rotateBy(degrees: number) {\r\n        this.direction.rotateBy(degrees);\r\n        this.plane.rotateBy(degrees);\r\n    }\r\n}","import { Game } from \"../client/game\";\r\nimport { Color } from \"./color\";\r\n\r\nexport class Renderer {\r\n    screenWidth: number;\r\n\tscreenHeight: number;\r\n\tcanvas: HTMLCanvasElement;\r\n\tdrawContext: CanvasRenderingContext2D;\r\n    mapVisible: boolean;\r\n    textures: HTMLImageElement;\r\n\r\n    texWidth = 64;\r\n    texHeight = 64;\r\n\r\n    constructor(width: number, height: number, canvasElement: HTMLCanvasElement, textures: HTMLImageElement) {\r\n        this.screenWidth = width;\r\n\t\tthis.screenHeight = height;\r\n\r\n        this.textures = textures;\r\n\t\tthis.canvas = canvasElement;\r\n\t\tthis.canvas.width = this.screenWidth;\r\n\t\tthis.canvas.height = this.screenHeight;\r\n\r\n        let context = this.canvas.getContext('2d');\r\n\t\tif ( context == null) {\r\n\t\t\tthrow new Error(\"Unable to get 2D rendering context from Canvas\");\r\n\t\t}\r\n\r\n\t\tthis.drawContext = context;\r\n        this.drawContext.imageSmoothingEnabled = false;\r\n    }\r\n\r\n    public toggleMap() {\r\n        this.mapVisible = !this.mapVisible;\r\n    }\r\n\r\n    public render(game: Game) {\r\n        this.renderGame(game);\r\n\r\n        if ( this.mapVisible ) {\r\n            this.renderMap(game);\r\n        }\r\n    }\r\n\r\n    private renderGame(game: Game) {\r\n        this.drawContext.fillStyle = \"#000\";\r\n        this.drawContext.fillRect(0,0,this.screenWidth, this.screenHeight);\r\n    \r\n        for(var x = 0; x < this.screenWidth; x++) {\r\n            var cameraX = 2 * x / this.screenWidth - 1; // X coordinate in camera space\r\n            var rayDirX = game.player.direction.x + game.player.plane.x * cameraX;\r\n            var rayDirY = game.player.direction.y + game.player.plane.y * cameraX;\r\n    \r\n            // Which box of the map we're in\r\n            var mapX = Math.floor(game.player.posX);\r\n            var mapY = Math.floor(game.player.posY);\r\n    \r\n            // Length of array from current position to next X or Y-side\r\n            var sideDistX;\r\n            var sideDistY;\r\n    \r\n            // Length of ray from one X or Y-side to next X or Y-side\r\n            var deltaDistX = Math.abs(1/rayDirX);\r\n            var deltaDistY = Math.abs(1/rayDirY);\r\n            var perpWallDist;\r\n    \r\n            // What direction to step in X or Y-direction (either +1 or -1)\r\n            var stepX;\r\n            var stepY;\r\n    \r\n            var hit = 0;\r\n            var side;\r\n    \r\n            // Calculate step and initial sideDist\r\n            if (rayDirX < 0)\r\n            {\r\n                stepX = -1;\r\n                sideDistX = (game.player.posX - mapX) * deltaDistX;\r\n            }\r\n            else\r\n            {\r\n                stepX = 1;\r\n                sideDistX = (mapX + 1.0 - game.player.posX) * deltaDistX;\r\n            }\r\n            if (rayDirY < 0)\r\n            {\r\n                stepY = -1;\r\n                sideDistY = (game.player.posY - mapY) * deltaDistY;\r\n            }\r\n            else\r\n            {\r\n                stepY = 1;\r\n                sideDistY = (mapY + 1.0 - game.player.posY) * deltaDistY;\r\n            }\r\n    \r\n            // Perform DDA\r\n            while (hit === 0)\r\n            {\r\n                // Jump to next map square, OR in X-direction, OR in Y-direction\r\n                if (sideDistX < sideDistY)\r\n                {\r\n                    sideDistX += deltaDistX;\r\n                    mapX += stepX;\r\n                    side = 0;\r\n                }\r\n                else\r\n                {\r\n                    sideDistY += deltaDistY;\r\n                    mapY += stepY;\r\n                    side = 1;\r\n                }\r\n                // Check if ray has hit a wall\r\n                if (game.worldMap[mapY][mapX] > 0) hit = 1;\r\n            }\r\n    \r\n            // Calculate distance projected on camera direction (Euclidean distance will give fisheye effect!)\r\n            if (side === 0) perpWallDist = (mapX - game.player.posX + (1 - stepX) / 2) / rayDirX;\r\n            else           perpWallDist = (mapY - game.player.posY + (1 - stepY) / 2) / rayDirY;\r\n    \r\n            // Calculate height of line to draw on screen\r\n            var lineHeight = Math.floor(this.screenHeight / perpWallDist);\r\n    \r\n            const pitch = 0;\r\n\r\n            // Calculate lowest and highest pixel to fill in current stripe\r\n            const drawStart = -lineHeight / 2 + this.screenHeight / 2 + pitch;\r\n            const drawEnd = lineHeight / 2 + this.screenHeight / 2 + pitch;\r\n\r\n            var texNum = game.worldMap[mapY][mapX] - 1;\r\n\r\n            //calculate value of wallX\r\n            var wallX; //where exactly the wall was hit\r\n            if (side == 0) wallX = game.player.posY + perpWallDist * rayDirY;\r\n            else           wallX = game.player.posX + perpWallDist * rayDirX;\r\n            wallX -= Math.floor(wallX);\r\n\r\n            //x coordinate on the texture\r\n            var texX = wallX * this.texWidth;\r\n            if(side == 0 && rayDirX > 0) texX = this.texWidth - texX;\r\n            if(side == 1 && rayDirY < 0) texX = this.texWidth - texX;\r\n\r\n            const textureStartX = Math.floor(texX+(texNum*this.texWidth))\r\n            this.drawContext.drawImage(this.textures, textureStartX, 0, 1, this.texHeight, x, drawStart, 1, drawEnd - drawStart);\r\n            // if ( side === 1 ) { color.lightness = color.lightness / 2; }\r\n            // this.drawContext.strokeStyle = \"hsl(\" + color.hue + \",\" + color.saturation + \"%,\" + color.lightness + \"%)\";\r\n    \r\n            // this.drawContext.beginPath();\r\n            // this.drawContext.moveTo(x, drawStart);\r\n            // this.drawContext.lineTo(x, drawEnd);\r\n            // this.drawContext.stroke();\r\n        }\r\n    }\r\n\r\n    private renderMap(game: Game) {\r\n        const blockSize = 10;\r\n        this.drawContext.strokeStyle = '#f0f';\r\n\r\n        for (var y = 0; y < game.worldMap.length; y++) {\r\n            for (var x = 0; x < game.worldMap[y].length; x++) {\r\n                var color = this.getBlockColor(game.worldMap[y][x]);\r\n                this.drawContext.fillStyle = \"hsl(\" + color.hue + \",\" + color.saturation + \"%,\" + color.lightness + \"%)\";\r\n                this.drawContext.fillRect(x*blockSize, y*blockSize, blockSize, blockSize);\r\n                if ( game.currentTileX === x && game.currentTileY === y) {\r\n                    this.drawContext.strokeRect(x*blockSize, y*blockSize, blockSize, blockSize);\r\n                }\r\n            }\r\n        }\r\n\r\n        const playerX = game.player.posX*blockSize;\r\n        const playerY = game.player.posY*blockSize;\r\n        this.drawContext.strokeStyle = \"#fff\";\r\n        this.drawContext.beginPath();\r\n        this.drawContext.arc(playerX, playerY, blockSize/2, 0, 2 * Math.PI);\r\n        this.drawContext.stroke(); \r\n        this.drawContext.beginPath();\r\n        this.drawContext.moveTo(playerX, playerY);\r\n        this.drawContext.lineTo(playerX + game.player.direction.x*blockSize, playerY + game.player.direction.y*blockSize);\r\n        this.drawContext.stroke();\r\n    }\r\n\r\n    private getBlockColor(blockId: number): Color {\r\n        var hue = 0;\r\n        var saturation = 100;\r\n        var lightness = 50\r\n\r\n        switch(blockId) {\r\n            case 0: // Empty\r\n                saturation = 0;\r\n                lightness = 0;\r\n                break;\r\n            case 1: // Red\r\n                hue = 0;\r\n                break; \r\n            case 2: // Green\r\n                hue = 120;\r\n                break; \r\n            case 3: // Blue\r\n                hue = 240;\r\n                break; \r\n            case 4: // White\r\n                saturation = 0;\r\n                lightness = 100;\r\n                break; \r\n            default: // Yellow\r\n                hue = 60;\r\n                break; \r\n        }\r\n\r\n        return new Color(hue, saturation, lightness);\r\n    }\r\n}\r\n","export class Vector {\r\n    public x: number;\r\n    public y: number;\r\n\r\n    constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    rotateBy(degrees: number) {\r\n        degrees = -degrees * (Math.PI / 180);\r\n        const cos = Math.cos(degrees);\r\n        const sin = Math.sin(degrees);\r\n        const newX = Math.round(10000 * (this.x * cos - this.y * sin)) / 10000;\r\n        const newY = Math.round(10000 * (this.x * sin + this.y * cos)) / 10000;\r\n        this.x = newX;\r\n        this.y = newY;\r\n    }\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { Game } from \"./client/game\";\r\nimport { Input } from \"./client/input\";\r\nimport { Renderer } from \"./client/renderer\";\r\n\r\nconst input = new Input();\r\ninput.attachEventListeners(document.getElementsByTagName('body')[0]);\r\n\r\nconst canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\r\nconst textures = document.getElementById(\"textures\") as HTMLImageElement;\r\nvar renderer = new Renderer(1024, 768, canvas, textures);\r\nvar game = new Game(renderer, input);\r\ngame.tick();"],"names":["Color","hue","saturation","lightness","this","renderer","input","worldMap","currentTileX","currentTileY","currentTime","previousTime","player","Player","tick","gameStep","render","window","requestAnimationFrame","bind","keyQueue","length","console","log","find","k","toggleMap","clearQueue","anyDirectional","leftPressed","rotateBy","rightPressed","xVel","yVel","upPressed","direction","y","movementSpeed","x","downPressed","newPlayerX","posX","newPlayerY","posY","Math","floor","Game","attachEventListeners","el","addEventListener","e","key","push","Input","Vector","plane","degrees","width","height","canvasElement","textures","texWidth","texHeight","screenWidth","screenHeight","canvas","context","getContext","Error","drawContext","imageSmoothingEnabled","mapVisible","game","renderGame","renderMap","fillStyle","fillRect","sideDistX","sideDistY","perpWallDist","stepX","stepY","side","cameraX","rayDirX","rayDirY","mapX","mapY","deltaDistX","abs","deltaDistY","hit","wallX","lineHeight","drawStart","drawEnd","texNum","texX","textureStartX","drawImage","blockSize","strokeStyle","color","getBlockColor","strokeRect","playerX","playerY","beginPath","arc","PI","stroke","moveTo","lineTo","blockId","Renderer","cos","sin","newX","round","newY","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","document","getElementsByTagName","getElementById"],"sourceRoot":""}