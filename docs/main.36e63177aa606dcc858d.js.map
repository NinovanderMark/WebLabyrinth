{"version":3,"file":"main.36e63177aa606dcc858d.js","mappings":"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","sources":["webpack://weblabyrinth/./src/client/color.ts","webpack://weblabyrinth/./src/client/game.ts","webpack://weblabyrinth/./src/client/input.ts","webpack://weblabyrinth/./src/client/player.ts","webpack://weblabyrinth/./src/client/renderer.ts","webpack://weblabyrinth/./src/client/static-object.ts","webpack://weblabyrinth/./src/client/vector.ts","webpack://weblabyrinth/webpack/bootstrap","webpack://weblabyrinth/./src/index.ts"],"sourcesContent":["export class Color\r\n{\r\n    hue: number;\r\n    saturation: number;\r\n    lightness: number;\r\n    \r\n    constructor(hue: number, saturation: number, lightness: number) {\r\n        this.hue = hue;\r\n        this.saturation = saturation;\r\n        this.lightness = lightness;\r\n    }\r\n}","import { Input } from './input';\r\nimport { Player } from './player';\r\nimport { Renderer } from './renderer';\r\nimport { StaticObject } from './static-object';\r\n\r\nexport class Game {\r\n    public walls = [\r\n\t\t[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2],\r\n\t\t[4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,3,0,0,0,2],\r\n\t\t[4,0,0,0,0,0,0,2,2,2,2,2,2,0,0,3,0,3,3,3,0,0,0,2],\r\n\t\t[4,0,3,3,0,0,0,2,0,0,0,0,2,0,0,0,0,0,0,3,0,0,0,2],\r\n\t\t[4,0,3,3,0,0,2,2,0,2,2,0,2,0,0,3,3,3,0,3,0,0,0,2],\r\n\t\t[4,0,3,3,0,0,2,0,0,0,2,0,2,0,0,3,0,0,0,3,0,0,0,2],\r\n\t\t[4,0,3,3,0,0,2,0,0,0,0,0,2,0,0,3,0,3,3,3,0,0,0,2],\r\n\t\t[4,0,0,0,0,0,2,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,2],\r\n\t\t[4,0,0,0,0,0,2,2,0,2,2,0,0,0,0,3,0,3,0,3,0,0,0,2],\r\n\t\t[4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],\r\n\t\t[4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],\r\n\t\t[4,0,1,0,0,1,0,0,0,0,0,5,5,5,5,5,0,0,0,0,0,0,0,2],\r\n\t\t[4,0,0,0,0,1,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,2],\r\n\t\t[4,0,0,0,0,1,0,0,0,0,0,5,5,0,0,5,0,0,0,0,0,0,0,2],\r\n\t\t[4,0,1,1,1,1,0,0,0,0,0,0,5,0,0,5,0,0,0,0,0,0,0,2],\r\n\t\t[4,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,0,0,1,0,0,1,1,2],\r\n\t\t[4,4,4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,1,0,0,0,0,2],\r\n\t\t[4,4,0,4,0,0,0,0,4,0,0,0,0,0,0,0,0,0,1,0,0,1,1,2],\r\n\t\t[4,4,0,0,0,0,5,0,4,4,0,4,4,4,0,0,0,0,1,0,0,0,0,2],\r\n\t\t[4,4,0,4,0,0,0,0,4,0,0,0,0,0,0,0,0,0,1,0,0,1,1,2],\r\n\t\t[4,4,0,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,1,0,0,0,0,2],\r\n\t\t[4,4,0,0,0,0,0,0,0,0,0,4,4,4,0,0,0,0,1,0,0,0,0,2],\r\n\t\t[4,4,4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,1,0,0,0,0,2],\r\n\t\t[4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]];\r\n\r\n\tpublic staticObjects = [\r\n\t\tnew StaticObject(16.5, 8.5, 0),\r\n\t\tnew StaticObject(18.5, 8.5, 0),\r\n\t\tnew StaticObject(11.5, 8.5, 1),\r\n\t\tnew StaticObject(19.5, 15.5, 1),\r\n\t\tnew StaticObject(19.5, 22.5, 1),\r\n\t];\r\n\r\n\tpublic ceiling = 5;\r\n\tpublic floor = 2;\r\n\r\n\tplayer: Player;\r\n\tinput: Input;\r\n\trenderer: Renderer;\r\n\t\r\n\tcurrentTileX = 0;\r\n\tcurrentTileY = 0;\r\n\r\n\tcurrentTime = 0;\r\n\tpreviousTime = 0;\r\n\r\n\tconstructor(renderer: Renderer, input: Input) {\r\n\t\tthis.renderer = renderer;\r\n\t\tthis.input = input;\r\n\t\tthis.player = new Player(17, 19);\r\n\t}\r\n\r\n\t/**\r\n\t * Progresses the game by 1 step, and schedules the next step\r\n\t */\r\n\tpublic tick() {\r\n\t\tthis.gameStep();\r\n\t\tthis.renderer.render(this);\r\n\r\n\t\twindow.requestAnimationFrame(this.tick.bind(this));\r\n\t}\r\n\r\n\tprivate gameStep() {\r\n\t\tif ( this.input.keyQueue.length > 0) {\r\n\t\t\tconsole.log(this.input.keyQueue);\r\n\t\t\tif ( this.input.keyQueue.find((k) => k === 'm') != null) {\r\n\t\t\t\tthis.renderer.toggleMap();\r\n\t\t\t}\r\n\r\n\t\t\tthis.input.clearQueue();\r\n\t\t}\r\n\r\n\t\tif ( !this.input.anyDirectional() ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tif ( this.input.leftPressed) {\r\n\t\t\tthis.player.rotateBy(1.5);\r\n\t\t} else if ( this.input.rightPressed) {\r\n\t\t\tthis.player.rotateBy(-1.5);\r\n\t\t}\r\n\r\n\t\tlet xVel = 0;\r\n\t\tlet yVel = 0;\r\n\t\tif ( this.input.upPressed ) {\r\n\t\t\tyVel += this.player.direction.y * this.player.movementSpeed;\r\n\t\t\txVel += this.player.direction.x * this.player.movementSpeed;\r\n\t\t} else if (this.input.downPressed) {\r\n\t\t\tyVel -= this.player.direction.y * this.player.movementSpeed;\r\n\t\t\txVel -= this.player.direction.x * this.player.movementSpeed;\r\n\t\t} else {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst newPlayerX = this.player.posX + xVel;\r\n\t\tconst newPlayerY = this.player.posY + yVel;\r\n\r\n\t\t// Out of bounds\r\n\t\tif (newPlayerY > this.walls.length || newPlayerY < 0 || newPlayerX > this.walls[0].length || newPlayerX < 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.currentTileX = Math.floor(newPlayerX);\r\n\t\tthis.currentTileY = Math.floor(newPlayerY);\r\n\r\n\t\tconst currentTile = this.walls[this.currentTileY][this.currentTileX];\r\n\t\tif (currentTile !== 0 ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tfor (let s = 0; s < this.staticObjects.length; s++) {\r\n\t\t\tif ( this.staticObjects[s].distanceTo(newPlayerX, newPlayerY) <= 0.5) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.player.posX = newPlayerX;\r\n\t\tthis.player.posY = newPlayerY;\r\n\t}\r\n};","export class Input {\r\n    public upPressed = false;\r\n    public downPressed = false;\r\n    public leftPressed = false;\r\n    public rightPressed = false;\r\n    public keyQueue = [];\r\n    \r\n    public attachEventListeners(el: HTMLElement) {\r\n        el.addEventListener(\"keydown\", (e: KeyboardEvent) => {\r\n            if (e.key === \"ArrowLeft\") { this.leftPressed = true; };\r\n            if (e.key === \"ArrowRight\") { this.rightPressed = true; };\r\n            if (e.key === \"ArrowUp\") { this.upPressed = true; };\r\n            if (e.key === \"ArrowDown\") { this.downPressed = true; };\r\n        });\r\n\r\n        el.addEventListener(\"keyup\", (e: KeyboardEvent) => {\r\n            if (e.key === \"ArrowLeft\") { this.leftPressed = false; };\r\n            if (e.key === \"ArrowRight\") { this.rightPressed = false; };\r\n            if (e.key === \"ArrowUp\") { this.upPressed = false; };\r\n            if (e.key === \"ArrowDown\") { this.downPressed = false; };\r\n            if (e.key.length === 1 ) { this.keyQueue.push(e.key); }\r\n        });\r\n    }\r\n\r\n    public anyDirectional(): boolean {\r\n        if (this.upPressed || this.downPressed || this.leftPressed || this.rightPressed)\r\n            return true;\r\n\r\n        return false;\r\n    }\r\n\r\n    public clearQueue() {\r\n        this.keyQueue = [];\r\n    }\r\n}","import { Vector } from './vector';\r\n\r\nexport class Player {\r\n    posX: number;\r\n    posY: number;\r\n    movementSpeed: number = 0.05;\r\n\r\n    direction: Vector;\r\n    plane: Vector;\r\n    \r\n    constructor(x: number, y: number) {\r\n        this.posX = x;\r\n        this.posY = y;\r\n        this.direction = new Vector(0, -1);\r\n        this.plane = new Vector(0.66, 0);\r\n    }\r\n\r\n    rotateBy(degrees: number) {\r\n        this.direction.rotateBy(degrees);\r\n        this.plane.rotateBy(degrees);\r\n    }\r\n}","import { Game } from \"../client/game\";\r\nimport { Color } from \"./color\";\r\nimport { StaticObject } from \"./static-object\";\r\n\r\nexport class Renderer {\r\n    screenWidth: number;\r\n\tscreenHeight: number;\r\n\tcanvas: HTMLCanvasElement;\r\n\r\n\tdrawContext: CanvasRenderingContext2D;\r\n    depthContext: CanvasRenderingContext2D;\r\n    mapVisible: boolean;\r\n    textures: HTMLImageElement;\r\n    sprites: HTMLImageElement;\r\n\r\n    texWidth = 64;\r\n    texHeight = 64;\r\n\r\n    constructor(width: number, height: number, canvasElement: HTMLCanvasElement, textures: HTMLImageElement, sprites: HTMLImageElement,\r\n        depthBuffer?: HTMLCanvasElement) {\r\n        this.screenWidth = width;\r\n\t\tthis.screenHeight = height;\r\n\r\n        this.textures = textures;\r\n        this.sprites = sprites;\r\n\t\tthis.canvas = canvasElement;\r\n\t\tthis.canvas.width = this.screenWidth;\r\n\t\tthis.canvas.height = this.screenHeight;\r\n\r\n        let context = this.canvas.getContext('2d');\r\n\t\tif ( context == null) {\r\n\t\t\tthrow new Error(\"Unable to get 2D rendering context from Canvas\");\r\n        }\r\n\r\n\t\tthis.drawContext = context;\r\n        this.drawContext.imageSmoothingEnabled = false;\r\n\r\n        if ( depthBuffer != null) {\r\n            this.depthContext = depthBuffer.getContext('2d');\r\n        }\r\n    }\r\n\r\n    public toggleMap() {\r\n        this.mapVisible = !this.mapVisible;\r\n    }\r\n\r\n    public render(game: Game) {\r\n        this.drawContext.fillStyle = \"#000\";\r\n        this.drawContext.fillRect(0,0,this.screenWidth, this.screenHeight);\r\n    \r\n        this.renderCeilingFloor(game);\r\n        this.renderWalls(game);\r\n\r\n        if ( this.mapVisible ) {\r\n            this.renderMap(game);\r\n        }\r\n    }\r\n\r\n    private renderCeilingFloor(game: Game) {\r\n        // Temporary implementation\r\n        var ceilColor = this.getBlockColor(game.ceiling);\r\n        this.drawContext.fillStyle = \"hsl(\" + ceilColor.hue + \",\" + ceilColor.saturation + \"%,\" + ceilColor.lightness/2 + \"%)\";\r\n        this.drawContext.fillRect(0, 0, this.screenWidth, this.screenHeight/2);\r\n\r\n        var floorColor = this.getBlockColor(game.floor);\r\n        this.drawContext.fillStyle = \"hsl(\" + floorColor.hue + \",\" + floorColor.saturation + \"%,\" + floorColor.lightness/4 + \"%)\";\r\n        this.drawContext.fillRect(0, this.screenHeight/2, this.screenWidth, this.screenHeight/2);\r\n    }\r\n\r\n    private renderWalls(game: Game) {\r\n        const pitch = 0;\r\n        var zBuffer: Array<number> = [];\r\n        zBuffer.fill(0, 0, this.screenWidth);\r\n\r\n        for(var x = 0; x < this.screenWidth; x++) {\r\n            var cameraX = 2 * x / this.screenWidth - 1; // X coordinate in camera space\r\n            var rayDirX = game.player.direction.x + game.player.plane.x * cameraX;\r\n            var rayDirY = game.player.direction.y + game.player.plane.y * cameraX;\r\n    \r\n            // Which box of the map we're in\r\n            var mapX = Math.floor(game.player.posX);\r\n            var mapY = Math.floor(game.player.posY);\r\n    \r\n            // Length of ray from one X or Y-side to next X or Y-side\r\n            var deltaDistX = Math.abs(1/rayDirX);\r\n            var deltaDistY = Math.abs(1/rayDirY);\r\n\r\n            // What direction to step in X or Y-direction (either +1 or -1)\r\n            var stepX;\r\n            var stepY;\r\n    \r\n            // Length of array from current position to next X or Y-side\r\n            var sideDistX;\r\n            var sideDistY;\r\n\r\n            // Calculate step and initial sideDist\r\n            if (rayDirX < 0)\r\n            {\r\n                stepX = -1;\r\n                sideDistX = (game.player.posX - mapX) * deltaDistX;\r\n            }\r\n            else\r\n            {\r\n                stepX = 1;\r\n                sideDistX = (mapX + 1.0 - game.player.posX) * deltaDistX;\r\n            }\r\n            if (rayDirY < 0)\r\n            {\r\n                stepY = -1;\r\n                sideDistY = (game.player.posY - mapY) * deltaDistY;\r\n            }\r\n            else\r\n            {\r\n                stepY = 1;\r\n                sideDistY = (mapY + 1.0 - game.player.posY) * deltaDistY;\r\n            }\r\n\r\n            var hit = 0;\r\n            var side;\r\n    \r\n            // Perform DDA\r\n            while (hit === 0)\r\n            {\r\n                // Jump to next map square, OR in X-direction, OR in Y-direction\r\n                if (sideDistX < sideDistY)\r\n                {\r\n                    sideDistX += deltaDistX;\r\n                    mapX += stepX;\r\n                    side = 0;\r\n                }\r\n                else\r\n                {\r\n                    sideDistY += deltaDistY;\r\n                    mapY += stepY;\r\n                    side = 1;\r\n                }\r\n                // Check if ray has hit a wall\r\n                if (game.walls[mapY][mapX] > 0) hit = 1;\r\n            }\r\n    \r\n            var perpWallDist;\r\n\r\n            // Calculate distance projected on camera direction (Euclidean distance will give fisheye effect!)\r\n            if (side === 0) perpWallDist = (mapX - game.player.posX + (1 - stepX) / 2) / rayDirX;\r\n            else           perpWallDist = (mapY - game.player.posY + (1 - stepY) / 2) / rayDirY;\r\n    \r\n            // Calculate height of line to draw on screen\r\n            var lineHeight = Math.floor(this.screenHeight / perpWallDist);\r\n\r\n            // Calculate lowest and highest pixel to fill in current stripe\r\n            const drawStart = -lineHeight / 2 + this.screenHeight / 2 + pitch;\r\n            const drawEnd = lineHeight / 2 + this.screenHeight / 2 + pitch;\r\n\r\n            var texNum = game.walls[mapY][mapX] - 1;\r\n\r\n            //calculate value of wallX\r\n            var wallX; //where exactly the wall was hit\r\n            if (side == 0) wallX = game.player.posY + perpWallDist * rayDirY;\r\n            else           wallX = game.player.posX + perpWallDist * rayDirX;\r\n            wallX -= Math.floor(wallX);\r\n\r\n            //x coordinate on the texture\r\n            var texX = wallX * this.texWidth;\r\n            if(side == 0 && rayDirX > 0) texX = this.texWidth - texX;\r\n            if(side == 1 && rayDirY < 0) texX = this.texWidth - texX;\r\n\r\n            const textureStartX = Math.floor(this.texWidth+(texNum*this.texWidth)-texX);\r\n            this.drawContext.drawImage(this.textures, textureStartX, 0, 1, this.texHeight, x, drawStart, 1, drawEnd - drawStart);\r\n            if ( side === 1 ) { \r\n                this.drawContext.strokeStyle = 'rgba(0,0,0,0.6)';\r\n                this.drawContext.beginPath();\r\n                this.drawContext.moveTo(x, drawStart);\r\n                this.drawContext.lineTo(x, drawEnd);\r\n                this.drawContext.stroke();\r\n            }\r\n\r\n            zBuffer[x] = perpWallDist;\r\n        }\r\n\r\n        var sortedSprites: Array<StaticObject> = [...game.staticObjects];\r\n        sortedSprites.sort((a: StaticObject, b: StaticObject): number => {\r\n            return b.distanceTo(game.player.posX, game.player.posY) - a.distanceTo(game.player.posX, game.player.posY);\r\n        });\r\n\r\n        //after sorting the sprites, do the projection and draw them\r\n        for(var i = 0; i < sortedSprites.length; i++)\r\n        {\r\n            //translate sprite position to relative to camera\r\n            const spriteX = sortedSprites[i].x - game.player.posX;\r\n            const spriteY = sortedSprites[i].y - game.player.posY;\r\n\r\n            const invDet = 1.0 / (game.player.plane.x * game.player.direction.y - game.player.direction.x * game.player.plane.y); //required for correct matrix multiplication\r\n\r\n            const transformX = invDet * (game.player.direction.y * spriteX - game.player.direction.x * spriteY);\r\n            const transformY = invDet * (-game.player.plane.y * spriteX + game.player.plane.x * spriteY); //this is actually the depth inside the screen, that what Z is in 3D\r\n\r\n            const spriteScreenX = Math.floor((this.screenWidth / 2) * (1 + transformX / transformY));\r\n\r\n            //calculate height of the sprite on screen\r\n            const spriteHeight = Math.abs(Math.floor(this.screenHeight / (transformY))); //using 'transformY' instead of the real distance prevents fisheye\r\n\r\n            //calculate width of the sprite\r\n            const spriteWidth = Math.abs(Math.floor(this.screenHeight / (transformY)));\r\n            var drawStartX = Math.floor(-spriteWidth / 2 + spriteScreenX);\r\n            if(drawStartX < 0) drawStartX = 0;\r\n            var drawEndX = spriteWidth / 2 + spriteScreenX;\r\n            if(drawEndX >= this.screenWidth) drawEndX = this.screenWidth - 1;\r\n\r\n            //loop through every vertical stripe of the sprite on screen\r\n            for(var stripe = drawStartX; stripe < drawEndX; stripe++)\r\n            {\r\n                const texX = Math.floor((stripe - (-spriteWidth / 2 + spriteScreenX)) * this.texWidth / spriteWidth);\r\n                //the conditions in the if are:\r\n                //1) it's in front of camera plane so you don't see things behind you\r\n                //2) it's on the screen (left)\r\n                //3) it's on the screen (right)\r\n                //4) ZBuffer, with perpendicular distance\r\n                if(transformY > 0 && stripe > 0 && stripe < this.screenWidth && transformY < zBuffer[stripe]) {\r\n                    const spriteStartX = (sortedSprites[i].sprite * this.texWidth) + texX;\r\n                    const startY = -(spriteHeight/2) + (this.screenHeight / 2) + pitch;\r\n                    this.drawContext.drawImage(this.sprites, spriteStartX, 0, 1, this.texHeight, stripe, startY, 1, spriteHeight);\r\n                    zBuffer[stripe] = transformY;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.depthContext == null) {\r\n            return;\r\n        }\r\n\r\n        var maxDepth = game.walls.length;\r\n        for (let x = 0; x < this.screenWidth; x++) {\r\n            const color = (zBuffer[x] / maxDepth) * 100;\r\n            this.depthContext.strokeStyle = `hsl(0, 0%, ${100-color}%)`\r\n            this.depthContext.beginPath();\r\n            this.depthContext.moveTo(x, 0);\r\n            this.depthContext.lineTo(x, this.screenHeight);\r\n            this.depthContext.stroke();\r\n        }\r\n    }\r\n\r\n    private renderMap(game: Game) {\r\n        const blockSize = 8;\r\n        this.drawContext.strokeStyle = '#f0f';\r\n\r\n        for (var y = 0; y < game.walls.length; y++) {\r\n            for (var x = 0; x < game.walls[y].length; x++) {\r\n                var color = this.getBlockColor(game.walls[y][x]);\r\n                this.drawContext.fillStyle = \"hsl(\" + color.hue + \",\" + color.saturation + \"%,\" + color.lightness + \"%)\";\r\n                this.drawContext.fillRect(x*blockSize, y*blockSize, blockSize, blockSize);\r\n                if ( game.currentTileX === x && game.currentTileY === y) {\r\n                    this.drawContext.strokeRect(x*blockSize, y*blockSize, blockSize, blockSize);\r\n                }\r\n            }\r\n        }\r\n        \r\n        this.drawContext.strokeStyle = '#f77';\r\n        game.staticObjects.forEach(o => {\r\n            this.drawCircle(o.x*blockSize, o.y*blockSize, blockSize/2);\r\n        })\r\n\r\n        const playerX = game.player.posX*blockSize;\r\n        const playerY = game.player.posY*blockSize;\r\n        this.drawContext.strokeStyle = \"#fff\";\r\n        this.drawCircle(playerX, playerY, blockSize/2);\r\n        this.drawContext.beginPath();\r\n        this.drawContext.moveTo(playerX, playerY);\r\n        this.drawContext.lineTo(playerX + game.player.direction.x*blockSize, playerY + game.player.direction.y*blockSize);\r\n        this.drawContext.stroke();\r\n    }\r\n\r\n    private drawCircle(x: number, y: number, r: number) {\r\n        this.drawContext.beginPath();\r\n        this.drawContext.arc(x, y, r, 0, 2 * Math.PI);\r\n        this.drawContext.stroke(); \r\n    }\r\n\r\n    private getBlockColor(blockId: number): Color {\r\n        var hue = 0;\r\n        var saturation = 100;\r\n        var lightness = 50\r\n\r\n        switch(blockId) {\r\n            case 0: // Empty\r\n                saturation = 0;\r\n                lightness = 0;\r\n                break;\r\n            \r\n            default:\r\n                hue = blockId*40;\r\n                break; \r\n        }\r\n\r\n        return new Color(hue, saturation, lightness);\r\n    }\r\n}\r\n","export class StaticObject {\r\n    x: number;\r\n    y: number;\r\n    sprite: number;\r\n\r\n    constructor(x: number, y: number, sprite: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.sprite = sprite;\r\n    }\r\n\r\n    distanceTo(x: number, y: number) : number {\r\n        return ((x - this.x) * (x - this.x) + (y - this.y) * (y - this.y));\r\n    }\r\n}","export class Vector {\r\n    public x: number;\r\n    public y: number;\r\n\r\n    constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    rotateBy(degrees: number) {\r\n        degrees = -degrees * (Math.PI / 180);\r\n        const cos = Math.cos(degrees);\r\n        const sin = Math.sin(degrees);\r\n        const newX = Math.round(10000 * (this.x * cos - this.y * sin)) / 10000;\r\n        const newY = Math.round(10000 * (this.x * sin + this.y * cos)) / 10000;\r\n        this.x = newX;\r\n        this.y = newY;\r\n    }\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { Game } from \"./client/game\";\r\nimport { Input } from \"./client/input\";\r\nimport { Renderer } from \"./client/renderer\";\r\n\r\nconst input = new Input();\r\ninput.attachEventListeners(document.getElementsByTagName('body')[0]);\r\n\r\nconst canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\r\nconst depth = document.getElementById(\"depth\") as HTMLCanvasElement;\r\nconst textures = document.getElementById(\"textures\") as HTMLImageElement;\r\nconst sprites = document.getElementById(\"sprites\") as HTMLImageElement;\r\nvar renderer = new Renderer(1024, 768, canvas, textures, sprites, depth);\r\nvar game = new Game(renderer, input);\r\ngame.tick();\r\n"],"names":["Color","hue","saturation","lightness","this","renderer","input","walls","staticObjects","StaticObject","ceiling","floor","currentTileX","currentTileY","currentTime","previousTime","player","Player","tick","gameStep","render","window","requestAnimationFrame","bind","keyQueue","length","console","log","find","k","toggleMap","clearQueue","anyDirectional","leftPressed","rotateBy","rightPressed","xVel","yVel","upPressed","direction","y","movementSpeed","x","downPressed","newPlayerX","posX","newPlayerY","posY","Math","s","distanceTo","Game","attachEventListeners","el","addEventListener","e","key","push","Input","Vector","plane","degrees","width","height","canvasElement","textures","sprites","depthBuffer","texWidth","texHeight","screenWidth","screenHeight","canvas","context","getContext","Error","drawContext","imageSmoothingEnabled","depthContext","mapVisible","game","fillStyle","fillRect","renderCeilingFloor","renderWalls","renderMap","ceilColor","getBlockColor","floorColor","zBuffer","fill","stepX","stepY","sideDistX","sideDistY","cameraX","rayDirX","rayDirY","mapX","mapY","deltaDistX","abs","deltaDistY","side","perpWallDist","hit","wallX","lineHeight","drawStart","drawEnd","texNum","texX","textureStartX","drawImage","strokeStyle","beginPath","moveTo","lineTo","stroke","sortedSprites","sort","a","b","i","spriteX","spriteY","invDet","transformX","transformY","spriteScreenX","spriteHeight","spriteWidth","drawStartX","drawEndX","stripe","spriteStartX","sprite","startY","maxDepth","color","strokeRect","forEach","o","drawCircle","blockSize","playerX","playerY","r","arc","PI","blockId","Renderer","cos","sin","newX","round","newY","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","call","document","getElementsByTagName","getElementById","depth"],"sourceRoot":""}