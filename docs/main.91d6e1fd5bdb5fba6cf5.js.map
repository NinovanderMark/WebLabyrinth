{"version":3,"file":"main.91d6e1fd5bdb5fba6cf5.js","mappings":"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","sources":["webpack://weblabyrinth/./src/ts/base/color.ts","webpack://weblabyrinth/./src/ts/base/vector.ts","webpack://weblabyrinth/./src/ts/game/events/game-event-handler.ts","webpack://weblabyrinth/./src/ts/game/events/game-event.ts","webpack://weblabyrinth/./src/ts/game/events/item-consumed-event.ts","webpack://weblabyrinth/./src/ts/game/events/item-required-event.ts","webpack://weblabyrinth/./src/ts/game/game.ts","webpack://weblabyrinth/./src/ts/game/item.ts","webpack://weblabyrinth/./src/ts/game/player.ts","webpack://weblabyrinth/./src/ts/game/raycast.ts","webpack://weblabyrinth/./src/ts/game/room/room.ts","webpack://weblabyrinth/./src/ts/game/world/door.ts","webpack://weblabyrinth/./src/ts/game/world/game-object.ts","webpack://weblabyrinth/./src/ts/game/world/pickup.ts","webpack://weblabyrinth/./src/ts/game/world/sprite.ts","webpack://weblabyrinth/./src/ts/game/world/world.ts","webpack://weblabyrinth/./src/ts/presentation/dialog.ts","webpack://weblabyrinth/./src/ts/presentation/gui-manager.ts","webpack://weblabyrinth/./src/ts/presentation/input.ts","webpack://weblabyrinth/./src/ts/presentation/rendering/renderer.ts","webpack://weblabyrinth/./src/ts/presentation/rendering/view-sprite.ts","webpack://weblabyrinth/./src/ts/presentation/resource-resolver.ts","webpack://weblabyrinth/webpack/bootstrap","webpack://weblabyrinth/./src/index.ts"],"sourcesContent":["export class Color\r\n{\r\n    hue: number;\r\n    saturation: number;\r\n    lightness: number;\r\n    \r\n    constructor(hue: number, saturation: number, lightness: number) {\r\n        this.hue = hue;\r\n        this.saturation = saturation;\r\n        this.lightness = lightness;\r\n    }\r\n}","export class Vector {\r\n    public x: number;\r\n    public y: number;\r\n\r\n    constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    add(vector: Vector): Vector {\r\n        return new Vector(this.x + vector.x, this.y + vector.y);\r\n    }\r\n\r\n    rotateBy(degrees: number) {\r\n        degrees = -degrees * (Math.PI / 180);\r\n        const cos = Math.cos(degrees);\r\n        const sin = Math.sin(degrees);\r\n        const newX = Math.round(10000 * (this.x * cos - this.y * sin)) / 10000;\r\n        const newY = Math.round(10000 * (this.x * sin + this.y * cos)) / 10000;\r\n        this.x = newX;\r\n        this.y = newY;\r\n    }\r\n}","import { GuiManager } from \"../../presentation/gui-manager\";\r\nimport { GameEvent } from \"./game-event\";\r\nimport { Game } from \"../game\";\r\n\r\nexport class GameEventHandler {\r\n    public game: Game;\r\n    public guiManager: GuiManager;\r\n\r\n    constructor(game: Game, gui: GuiManager) {\r\n        this.game = game;\r\n        this.guiManager = gui;\r\n    }\r\n\r\n    public handle(event: GameEvent) {\r\n        event.handle(this);\r\n    }\r\n}","import { GameEventHandler } from \"./game-event-handler\";\r\n\r\nexport abstract class GameEvent {\r\n    public abstract handle(handler: GameEventHandler);\r\n}","import { GameEvent } from \"./game-event\"\r\nimport { GameEventHandler } from \"./game-event-handler\";\r\n\r\nexport class ItemConsumedEvent extends GameEvent {\r\n    public item: string;\r\n\r\n    constructor(itemName: string) {\r\n        super();\r\n        this.item = itemName;\r\n    }\r\n    \r\n    public handle(handler: GameEventHandler) {\r\n        const sprite = handler.game.world.items.get(this.item).texture;\r\n        handler.guiManager.addDialog('Item consumed', sprite, handler.game.world);\r\n    }\r\n}","import { GameEvent } from \"./game-event\";\r\nimport { GameEventHandler } from \"./game-event-handler\";\r\n\r\nexport class ItemRequiredEvent extends GameEvent {\r\n    public item: string;\r\n\r\n    constructor(itemName: string) {\r\n        super();\r\n        this.item = itemName;\r\n    }\r\n\r\n    public handle(handler: GameEventHandler) {\r\n        const sprite = handler.game.world.items.get(this.item).texture;\r\n        handler.guiManager.addDialog('Missing required item', sprite, handler.game.world);\r\n    }\r\n}","import { Room } from \"./room/room\";\r\nimport { Input } from '../presentation/input';\r\nimport { Player } from './player';\r\nimport { Renderer } from '../presentation/rendering/renderer';\r\nimport { World } from './world/world';\r\nimport { Vector } from '../base/vector';\r\nimport { RayCast } from \"./raycast\";\r\nimport { Door } from './world/door';\r\nimport { Pickup } from \"./world/pickup\";\r\nimport { GameEventHandler } from \"./events/game-event-handler\";\r\nimport { GameEvent } from \"./events/game-event\";\r\nimport { GuiManager } from \"../presentation/gui-manager\";\r\n\r\nexport class Game {\r\n    public world: World;\r\n\r\n\tplayer: Player;\r\n\tinput: Input;\r\n\trenderer: Renderer;\r\n\tguiManager: GuiManager;\r\n\tevents: Array<GameEvent>;\r\n\thandler: GameEventHandler;\r\n\t\r\n\tcurrentTileX = 0;\r\n\tcurrentTileY = 0;\r\n\r\n\tcurrentTime = 0;\r\n\tpreviousTime = 0;\r\n\r\n\tconstructor(renderer: Renderer, input: Input, guiManager: GuiManager) {\r\n\t\tthis.renderer = renderer;\r\n\t\tthis.input = input;\r\n\t\tthis.guiManager = guiManager;\r\n\t\tthis.handler = new GameEventHandler(this, guiManager);\r\n\r\n\t\tthis.player = new Player(17, 19);\r\n\t\tthis.events = new Array<GameEvent>();\r\n\t}\r\n\r\n\tpublic loadRoom(urlString: string) {\r\n\t\tconst url = new URL(urlString);\r\n\t\tconsole.log('Loading new room from URL', url.href);\r\n\r\n\t\tfetch(url.href, {\r\n\t\t\tmethod: 'get',\r\n\t\t\tmode: 'cors'\r\n\t\t}).then((response) => {\r\n\t\t\tif ( response.ok ) {\r\n\t\t\t\tresponse.json().then(json => {\r\n\t\t\t\t\tconst room = json as Room;\r\n\t\t\t\t\tRoom.validate(room);\r\n\t\t\t\t\tthis.world = World.from(room, url);\r\n\t\t\t\t\tthis.tick();\r\n\t\t\t\t})\r\n\t\t\t} else {\r\n\t\t\t\tthrow new Error(`Unable to retrieve room at URL: ${urlString}`);\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Progresses the game by 1 step, and schedules the next step\r\n\t */\r\n\tpublic tick() {\r\n\t\tif (this.previousTime=== 0 ) {\r\n\t\t\tthis.previousTime = performance.now();\r\n\t\t} else {\r\n\t\t\tthis.previousTime = this.currentTime;\r\n\t\t}\r\n\r\n\t\tthis.currentTime = performance.now();\r\n\r\n\t\tconst delta = (this.currentTime - this.previousTime)/1000;\r\n\t\tthis.gameStep(delta);\r\n\t\tthis.world.step(delta);\r\n\t\tthis.renderer.render(this, delta);\r\n\t\tthis.guiManager.tick(this, delta);\r\n\r\n\t\tthis.events.forEach(e => this.handler.handle(e));\r\n\t\tthis.events = [];\r\n\r\n\t\twindow.requestAnimationFrame(this.tick.bind(this));\r\n\t}\r\n\r\n\tpublic addEvent(event: GameEvent) {\r\n\t\tthis.events.push(event);\r\n\t}\r\n\r\n\tprivate gameStep(delta: number) {\r\n\t\tif ( this.input.keyQueue.length > 0) {\r\n\t\t\tif ( this.input.keyQueue.find((k) => k === 'm') != null) {\r\n\t\t\t\tthis.renderer.toggleMap();\r\n\t\t\t}\r\n\r\n\t\t\tthis.input.clearQueue();\r\n\t\t}\r\n\r\n\t\t// Interact with doors\r\n\t\tif ( this.input.usePressed || this.input.leftMouseUp ) {\r\n\t\t\tconst ray = RayCast.ray(this.player.position, this.player.direction, this.player.plane, 0, this.world);\r\n\t\t\tif ( ray.hit && ray.perpWallDist < 2 ) {\r\n\t\t\t\tif ( ray.worldObject instanceof Door) {\r\n\t\t\t\t\tray.worldObject.interact(this);\r\n\t\t\t\t}\r\n\t\t\t} \r\n\t\t}\r\n\r\n\t\tif ( !this.input.anyDirectional() && this.input.mouseDragStart == null ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tvar movement = this.getMovementFromInput();\r\n\t\tif ( movement.x === 0 && movement.y === 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst newPlayerPos = this.player.position.add(movement);\r\n\r\n\t\t// Out of bounds\r\n\t\tif (newPlayerPos.y > this.world.objects.length || newPlayerPos.y < 0 || \r\n\t\t\tnewPlayerPos.x > this.world.objects[0].length || newPlayerPos.x < 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.currentTileX = Math.floor(newPlayerPos.x);\r\n\t\tthis.currentTileY = Math.floor(newPlayerPos.y);\r\n\r\n\t\tconst currentTile = this.world.objects[this.currentTileY][this.currentTileX];\r\n\t\tif (currentTile != null && currentTile.collidable()) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.player.position = newPlayerPos;\r\n\r\n\t\tif ( currentTile instanceof Pickup) {\r\n\t\t\tcurrentTile.onPickup(this.player);\r\n\t\t\tthis.world.objects[this.currentTileY][this.currentTileX] = null;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate getMovementFromInput(): Vector {\r\n\t\tif ( this.input.leftPressed) {\r\n\t\t\tthis.player.rotateBy(1.5);\r\n\t\t} else if ( this.input.rightPressed) {\r\n\t\t\tthis.player.rotateBy(-1.5);\r\n\t\t}\r\n\r\n\t\tlet xVel = 0;\r\n\t\tlet yVel = 0;\r\n\t\tif ( this.input.upPressed ) {\r\n\t\t\tyVel += this.player.direction.y * this.player.movementSpeed;\r\n\t\t\txVel += this.player.direction.x * this.player.movementSpeed;\r\n\t\t} else if (this.input.downPressed) {\r\n\t\t\tyVel -= this.player.direction.y * this.player.movementSpeed;\r\n\t\t\txVel -= this.player.direction.x * this.player.movementSpeed;\r\n\t\t} \r\n\r\n\t\tif ( this.input.mouseDragStart != null) {\r\n\t\t\tthis.player.rotateBy((this.input.mouseDragStart.x - this.input.mousePosition.x)*0.01);\r\n\t\t\tconst forward = (this.input.mouseDragStart.y - this.input.mousePosition.y) * 0.0005;\r\n\t\t\tif ( forward > 0.01 ) {\r\n\t\t\t\tyVel = this.player.direction.y * Math.min(forward, this.player.movementSpeed)\r\n\t\t\t\txVel = this.player.direction.x * Math.min(forward, this.player.movementSpeed)\r\n\t\t\t} else if (forward < -0.01) {\r\n\t\t\t\tyVel = this.player.direction.y * Math.max(forward, -this.player.movementSpeed)\r\n\t\t\t\txVel = this.player.direction.x * Math.max(forward, -this.player.movementSpeed)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn new Vector(xVel, yVel);\r\n\t}\r\n};","export class Item {\r\n    sprite: number;\r\n    amount: number;\r\n    name: string;\r\n\r\n    constructor(name: string, sprite: number, amount: number = 1) {\r\n        this.amount = amount;\r\n        this.sprite = sprite;\r\n        this.name = name;\r\n    }\r\n}","import { Vector } from '../base/vector';\r\nimport { Item } from \"./item\";\r\n\r\nexport class Player {\r\n    movementSpeed: number = 0.05;\r\n    items: Array<Item> = [];\r\n\r\n    position: Vector;\r\n    direction: Vector;\r\n    plane: Vector;\r\n    \r\n    constructor(x: number, y: number) {\r\n        this.position = new Vector(x, y);\r\n        this.direction = new Vector(0, -1);\r\n        this.plane = new Vector(0.66, 0);\r\n    }\r\n\r\n    get score(): number {\r\n        let points = 0;\r\n        this.items.forEach(i => {\r\n            if ( i.name === 'score') {\r\n                points+=i.amount;\r\n            }\r\n        })\r\n\r\n        return points;\r\n    }\r\n\r\n    rotateBy(degrees: number) {\r\n        this.direction.rotateBy(degrees);\r\n        this.plane.rotateBy(degrees);\r\n    }\r\n}","import { World } from \"./world/world\";\r\nimport { Vector } from \"../base/vector\";\r\nimport { ViewSprite } from \"../presentation/rendering/view-sprite\";\r\nimport { Sprite } from \"./world/sprite\";\r\nimport { Door } from \"./world/door\";\r\nimport { GameObject } from \"./world/game-object\";\r\n\r\nexport class RayCastResult {\r\n    public sprites: Array<ViewSprite>;\r\n    public perpWallDist: number;\r\n    public worldObject: GameObject | null;\r\n    public inside: boolean;\r\n    public hit: boolean;\r\n    public side: number;\r\n    public texture: number;\r\n    public direction: Vector;\r\n}\r\n\r\nexport class RayCast {\r\n    public static ray(originPos: Vector, originDir: Vector, originPlane: Vector, cameraX: number, world: World, stopOnSprite: boolean = false): RayCastResult {\r\n        var rayDirX = originDir.x + originPlane.x * cameraX;\r\n        var rayDirY = originDir.y + originPlane.y * cameraX;\r\n\r\n        // Which box of the map we're in\r\n        var mapX = Math.floor(originPos.x);\r\n        var mapY = Math.floor(originPos.y);\r\n\r\n        // Length of ray from one X or Y-side to next X or Y-side\r\n        var deltaDistX = Math.abs(1/rayDirX);\r\n        var deltaDistY = Math.abs(1/rayDirY);\r\n\r\n        // What direction to step in X or Y-direction (either +1 or -1)\r\n        var stepX;\r\n        var stepY;\r\n\r\n        // Length of array from current position to next X or Y-side\r\n        var sideDistX;\r\n        var sideDistY;\r\n\r\n        // Calculate step and initial sideDist\r\n        if (rayDirX < 0)\r\n        {\r\n            stepX = -1;\r\n            sideDistX = (originPos.x - mapX) * deltaDistX;\r\n        }\r\n        else\r\n        {\r\n            stepX = 1;\r\n            sideDistX = (mapX + 1 - originPos.x) * deltaDistX;\r\n        }\r\n        if (rayDirY < 0)\r\n        {\r\n            stepY = -1;\r\n            sideDistY = (originPos.y - mapY) * deltaDistY;\r\n        }\r\n        else\r\n        {\r\n            stepY = 1;\r\n            sideDistY = (mapY + 1 - originPos.y) * deltaDistY;\r\n        }\r\n\r\n        var hit = 0;\r\n        var wallXOffset = 0;\r\n        var wallYOffset = 0;\r\n        var inside = false\r\n\r\n        const sprites: Array<ViewSprite> = [];\r\n        var wallX: number;\r\n        var side: number;\r\n        var texNum: number;\r\n        var worldObject: GameObject;\r\n        \r\n        // Perform DDA\r\n        while (hit === 0)\r\n        {\r\n            // Jump to next map square, OR in X-direction, OR in Y-direction\r\n            if (sideDistX < sideDistY)\r\n            {\r\n                sideDistX += deltaDistX;\r\n                mapX += stepX;\r\n                side = 0;\r\n            }\r\n            else\r\n            {\r\n                sideDistY += deltaDistY;\r\n                mapY += stepY;\r\n                side = 1;\r\n            }\r\n            // Check if ray has hit a wall\r\n            worldObject = world.objects[mapY][mapX];\r\n            if ( worldObject == null) continue;\r\n\r\n            if ( worldObject instanceof Sprite ) {\r\n                var viewSprite = new ViewSprite(mapX+0.5, mapY+0.5, worldObject.texture, worldObject.scale);\r\n                if ( sprites.findIndex(v => v.x === viewSprite.x && v.y === viewSprite.y) < 0) {\r\n                    sprites.push(viewSprite);\r\n                }\r\n                if ( stopOnSprite ) {\r\n                    hit = 1;\r\n                }\r\n                continue;\r\n            } else if ( worldObject instanceof Door) {\r\n                texNum = worldObject.texture;\r\n                hit = 1;\r\n                if (side == 1) {\r\n                    wallYOffset = 0.5 * stepY;\r\n                    perpWallDist = (mapY - originPos.y + wallYOffset + (1 - stepY) / 2) / rayDirY;\r\n                    if (sideDistY - (deltaDistY/2) < sideDistX) { //If ray hits offset wall\r\n                        wallX = originPos.x + perpWallDist * rayDirX;\r\n                        wallX -= Math.floor(wallX);\r\n                        if ( wallX <= worldObject.openAmount){\r\n                            hit = 0; //Continue raycast for open/opening doors\r\n                            wallYOffset = 0;\r\n                        }\r\n                    } else {\r\n                        mapX += stepX;\r\n                        side = 0;\r\n                        inside =  true;\r\n                        wallYOffset = 0;\r\n                        texNum = world.objects[mapY][mapX].texture;\r\n                    }\r\n                } else { //side == 0\r\n                    wallXOffset = 0.5 * stepX;\r\n                    perpWallDist  = (mapX - originPos.x + wallXOffset + (1 - stepX) / 2) / rayDirX;\r\n                    if (sideDistX - (deltaDistX/2) < sideDistY) {\r\n                        wallX = originPos.y + perpWallDist * rayDirY;\r\n                        wallX -= Math.floor(wallX);\r\n                        if ( wallX < worldObject.openAmount) {\r\n                            hit = 0;\r\n                            wallXOffset = 0;\r\n                        }\r\n                    } else {\r\n                        mapY += stepY;\r\n                        side = 1;\r\n                        inside = true;\r\n                        wallXOffset = 0;\r\n                        texNum = world.objects[mapY][mapX].texture;\r\n                    }\r\n                }\r\n            } else {\r\n                texNum = worldObject.texture;\r\n                hit = 1;\r\n            }\r\n        }\r\n\r\n        var perpWallDist;\r\n\r\n        // Calculate distance projected on camera direction (Euclidean distance will give fisheye effect!)\r\n        if (side === 0) perpWallDist = (mapX - originPos.x + wallXOffset + (1 - stepX) / 2) / rayDirX;\r\n        else           perpWallDist = (mapY - originPos.y + wallYOffset + (1 - stepY) / 2) / rayDirY;\r\n\r\n            var result = new RayCastResult();\r\n            result.sprites = sprites;\r\n            result.hit = hit === 1;\r\n            result.side = side;\r\n            result.perpWallDist = perpWallDist;\r\n            result.inside = inside;\r\n            result.worldObject = worldObject;\r\n            result.texture = texNum;\r\n            result.direction = new Vector(rayDirX, rayDirY);\r\n            return result;\r\n    }\r\n}","import { RoomObject } from \"./room-object\";\r\n\r\nexport class Room {\r\n    public objects: Array<RoomObject>;\r\n    public tiles: Array<Array<number>>;\r\n    public textures: string;\r\n    public sprites: string;\r\n\r\n    public static validate(room: Room) {\r\n        if ( room.textures == null || room.textures.length < 1) {\r\n            throw new Error(`Room does not reference a texture file`);\r\n        }\r\n\r\n        if ( room.sprites == null || room.sprites.length < 1) {\r\n            throw new Error(`Room does not reference a sprites file`);\r\n        }\r\n\r\n        if ( room.objects== null || room.objects.length < 1) {\r\n            throw new Error(`Room contains no objects`);\r\n        }\r\n\r\n        if (room.tiles == null || room.tiles.length < 1) {\r\n            throw new Error(`Room contains no tiles`);\r\n        }\r\n\r\n        var tilesWidth = room.tiles[0].length;\r\n        for (let y = 0; y < room.tiles.length; y++) {\r\n            if ( room.tiles[y].length != tilesWidth) {\r\n                console.debug('Faulty row looks like', room.tiles[y]);\r\n                throw new Error(`Irregular row length for row ${y}, expected: ${tilesWidth} actual: ${room.tiles[y].length}`);\r\n            }\r\n\r\n            for (let x = 0; x < room.tiles[y].length; x++) {\r\n                if ( room.tiles[y][x] < 0 || room.tiles[y][x] > room.objects.length) {\r\n                    throw new Error(`Tile reference out of bounds at coordinates ${x},${y}. Should be between 0 and ${room.objects.length}`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import { GameObject } from \"./game-object\";\r\nimport { DynamicObject } from \"./dynamic-object\";\r\nimport { Interactable } from \"./interactable\";\r\nimport { Game } from \"../game\";\r\nimport { ItemRequiredEvent } from \"../events/item-required-event\";\r\nimport { ItemConsumedEvent } from \"../events/item-consumed-event\"\r\n\r\nexport class Door extends GameObject implements DynamicObject, Interactable {\r\n    public closed: boolean;\r\n    public openAmount: number;\r\n    public block: boolean;\r\n    public openTime: number;\r\n    public key: string | null;\r\n    public unlockTexture: number;\r\n\r\n    constructor(texture: number, key: string | null = null, unlockTexture: number | null = null) {\r\n        super(texture);\r\n        this.closed = true;\r\n        this.openAmount = 0;\r\n        this.openTime = 0;\r\n        this.key = key;\r\n        this.unlockTexture = unlockTexture ?? texture;\r\n    }\r\n\r\n    public override collidable(): boolean {\r\n        return this.openAmount !== 1;\r\n    }\r\n\r\n    public unlock() {\r\n        this.key = null;\r\n        this.texture = this.unlockTexture;\r\n    }\r\n\r\n    public interact(game: Game) {\r\n        if ( this.key != null) {\r\n            const key = this.key;\r\n            const keyIndex = game.player.items.findIndex(i => i.name === this.key && i.amount > 0);\r\n            if ( keyIndex < 0) {\r\n                game.addEvent(new ItemRequiredEvent(key));\r\n                return; // Nothing happens, door is locked\r\n            }\r\n\r\n            game.player.items[keyIndex].amount -= 1;\r\n            this.unlock();\r\n            game.addEvent(new ItemConsumedEvent(key));\r\n            return;\r\n        }\r\n\r\n        if ( this.closed && this.openAmount === 0 ) {\r\n           this.closed = false;\r\n           this.openTime = 0;\r\n        } else if ( !this.closed && this.openAmount === 1) {\r\n            this.closed = true;\r\n        }\r\n    }\r\n\r\n    public step(delta: number) {\r\n        if ( this.closed && this.openAmount > 0) { \r\n            console.log(\"Closing\", this.openAmount);\r\n            this.openAmount -= delta; \r\n        }\r\n        if ( !this.closed && this.openAmount < 1) { \r\n            console.log(\"Opening\", this.openAmount);\r\n            this.openAmount += delta; \r\n        }\r\n\r\n        if ( this.openAmount > 1) { this.openAmount = 1; }\r\n        if ( this.openAmount < 0) { this.openAmount = 0; }\r\n\r\n        // Automatically start closing the door if it's open for a few seconds\r\n        if ( this.openAmount === 1) { this.openTime += delta; }\r\n        if ( this.openTime > 5) { this.closed = true; }\r\n    }\r\n}","export class GameObject {\r\n    public texture: number;\r\n\r\n    constructor(texture: number) {\r\n        this.texture = texture;\r\n    }\r\n\r\n    public collidable(): boolean {\r\n        return true;\r\n    }\r\n}","import { Sprite } from \"./sprite\"\r\nimport { Player } from \"../player\"\r\nimport { Item } from \"../item\";\r\n\r\nexport class Pickup extends Sprite {\r\n    public name: string;\r\n    public amount: number;\r\n\r\n    constructor(sprite: number, name: string, amount: number = 1, scale: number = 1) {\r\n        super(sprite, scale);\r\n        this.amount = amount;\r\n        this.name = name;\r\n    }\r\n\r\n    public override collidable(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public onPickup(player: Player) {\r\n        const existing = player.items.findIndex(i => i.name === this.name);\r\n        if ( existing >= 0)  {\r\n            player.items[existing].amount+=this.amount;\r\n            return;\r\n        }\r\n\r\n        player.items.push(new Item(this.name, this.texture, this.amount));\r\n        return;\r\n    }\r\n}\r\n","import { GameObject } from \"./game-object\";\r\n\r\nexport class Sprite extends GameObject{\r\n    public scale: number;\r\n    \r\n    constructor(sprite: number, scale: number = 1) {\r\n        super(sprite);\r\n        this.scale = scale;\r\n    }\r\n\r\n    distanceBetween(x: number, y: number, otherX: number, otherY: number) : number {\r\n        return ((otherX - x) * (otherX - x) + (otherY - y) * (otherY - y));\r\n    }\r\n}","import { GameObject } from \"./game-object\";\r\nimport { DynamicObject } from \"./dynamic-object\";\r\nimport { Door } from \"./door\";\r\nimport { Sprite } from \"./sprite\";\r\nimport { Room } from \"../room/room\";\r\nimport { Pickup } from \"./pickup\";\r\n\r\nexport class World {\r\n    public objects: Array<Array<GameObject | null>>;\r\n    public items: Map<string, Pickup>;\r\n\r\n    public textures: URL;\r\n    public sprites: URL;\r\n\r\n\tpublic ceiling = 5;\r\n\tpublic floor = 2;\r\n\r\n    private dynamicObjects: Array<DynamicObject>;\r\n\r\n    private constructor() {\r\n        this.objects = [];\r\n        this.dynamicObjects = [];\r\n        this.items = new Map<string, Pickup>();\r\n    }\r\n\r\n    public step(delta: number) {\r\n        this.dynamicObjects.forEach(o => o.step(delta));\r\n    }\r\n\r\n    public cacheDynamicObjects() {\r\n        this.dynamicObjects.splice(0);\r\n        for (let x = 0; x < this.objects.length; x++) {\r\n            for (let y = 0; y < this.objects[x].length; y++) {\r\n                const obj = this.objects[x][y];\r\n                if ( obj instanceof Door ) {\r\n                    this.dynamicObjects.push(obj);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public static from(room: Room, url: URL): World {\r\n        let pathParts = url.pathname.split('/');\r\n        pathParts.splice(pathParts.length-1, 1);\r\n        const basePath = pathParts.join('/');\r\n\r\n\t\tlet world = new World();\r\n        world.textures = new URL(`${basePath}/${room.textures}`, url.origin);\r\n        world.sprites = new URL(`${basePath}/${room.sprites}`, url.origin);\r\n\r\n\t\tfor (let x = 0; x < room.tiles.length; x++) {\r\n\t\t\tlet row: Array<GameObject> = [];\r\n\r\n\t\t\tfor (let y = 0; y < room.tiles[x].length; y++) {\r\n\t\t\t\tconst tile = room.tiles[x][y]-1;\r\n\t\t\t\tif ( tile < 0) {\r\n                    row.push(null);\r\n                } else {\r\n                    const obj = room.objects[tile];\r\n                    switch (obj.type) {\r\n                        case \"block\":\r\n                            row.push(new GameObject(obj[\"texture\"] as number));\r\n                            break;\r\n\r\n                        case \"door\":\r\n                            const unlockTexture = obj[\"texture-unlocked\"] as number | null;\r\n                            row.push(new Door(obj[\"texture\"] as number, obj[\"key\"] as string, unlockTexture));\r\n                            break;\r\n\r\n                        case \"sprite\":\r\n                            row.push(new Sprite(obj[\"texture\"] as number));\r\n                            break;\r\n\r\n                        case \"item\":\r\n                            const scale = obj[\"scale\"] as number;\r\n                            const amount = obj[\"amount\"] as number;\r\n                            const name = obj[\"name\"];\r\n                            const pickup = new Pickup(obj[\"texture\"] as number, name, amount ?? 1, scale ?? 1);\r\n                            row.push(pickup);\r\n                            world.items.set(name, pickup);\r\n                            break;\r\n\r\n                        default:\r\n                            throw new Error(`Unknown type '${obj.type}' for object ${tile} at ${y},${x}`);\r\n                    }\r\n                }\r\n\t\t\t}\r\n\r\n            world.objects.push(row);\r\n\t\t}\r\n\r\n        world.cacheDynamicObjects();\r\n        return world;\r\n\t}\r\n}","export class Dialog {\r\n    public message: string;\r\n    public sprite: number | null;\r\n    public alive: number;\r\n    public element: HTMLElement;\r\n\r\n    constructor(message: string, element: HTMLElement, sprite: number | null = null) {\r\n        this.message = message;\r\n        this.sprite = sprite;\r\n        this.element = element;\r\n        this.alive = 0;\r\n    }\r\n\r\n    public addDelta(delta: number) {\r\n        this.alive += delta;\r\n    }\r\n}","import { World } from \"../game/world/world\";\r\nimport { Dialog } from \"./dialog\";\r\nimport { ResourceResolver } from \"./resource-resolver\";\r\nimport { Game } from \"../game/game\";\r\n\r\nexport class GuiManager {\r\n    resourceResolver: ResourceResolver;\r\n    parentElement: HTMLElement;\r\n    scoreElement: HTMLElement;\r\n\r\n    dialog: Dialog | null;\r\n    lastScore = -1;\r\n    texWidth = 64;\r\n    texHeight = 64;\r\n\r\n    constructor(resourceResolver: ResourceResolver, parent: HTMLElement) {\r\n        this.resourceResolver = resourceResolver;\r\n        this.parentElement = parent;\r\n        this.scoreElement = document.createElement('p');\r\n        this.scoreElement.classList.add('score');\r\n        this.parentElement.appendChild(this.scoreElement);\r\n    }\r\n\r\n    public addDialog(message: string, sprite: number | null = null, world: World | null = null) {\r\n        if ( this.dialog ) {\r\n            let oldElement = this.dialog.element;\r\n            this.parentElement.removeChild(oldElement);\r\n        }\r\n\r\n        const element = document.createElement('div');\r\n        element.classList.add('dialog');\r\n        const text = document.createElement('p');\r\n        text.innerText = message;\r\n\r\n        if ( sprite != null && world != null) {\r\n            element.appendChild(this.createSpriteCanvas(sprite, world));\r\n        }\r\n        \r\n        element.appendChild(text);\r\n        this.parentElement.appendChild(element);\r\n        this.dialog = new Dialog(message, element, sprite);\r\n    }\r\n\r\n    public tick(game: Game, delta: number) {\r\n        if ( this.dialog ) {\r\n            this.dialog.addDelta(delta);\r\n            if ( this.dialog.alive > 3 ) {\r\n                this.parentElement.removeChild(this.dialog.element);\r\n                this.dialog = null;\r\n            }\r\n        }\r\n\r\n        if ( game.player.score !== this.lastScore) {\r\n            this.lastScore = game.player.score;\r\n            this.scoreElement.innerText = `${this.lastScore}`.padStart(10, '0');\r\n        }\r\n    }\r\n\r\n    private createSpriteCanvas(sprite: number, world: World): HTMLCanvasElement {\r\n        const canvas = document.createElement('canvas');\r\n        canvas.width = this.texWidth;\r\n        canvas.height = this.texHeight;\r\n\r\n        const ctx = canvas.getContext('2d');\r\n        if ( ctx == null ) {\r\n            throw new Error(`Unable to create 2D context`);\r\n        }\r\n\r\n        const sheet = this.resourceResolver.getSprites(world);\r\n        ctx.drawImage(sheet, sprite*this.texWidth, 0, this.texWidth, this.texHeight, 0, 0, this.texWidth, this.texHeight);\r\n        return canvas;\r\n    }\r\n}","import { Vector } from \"../base/vector\";\r\n\r\nexport class Input {\r\n    public upPressed = false;\r\n    public downPressed = false;\r\n    public leftPressed = false;\r\n    public rightPressed = false;\r\n    public usePressed = false;\r\n\r\n    public leftMousePressed = false;\r\n    public previousLeftMousePressed = false;\r\n    public mouseDragStart: Vector | null = null;\r\n    public mousePosition = new Vector(0,0);\r\n    \r\n    public keyQueue = [];\r\n    \r\n    public get leftMouseUp(): boolean {\r\n        if ( this.previousLeftMousePressed) {\r\n            this.previousLeftMousePressed = false;\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public attachEventListeners(el: HTMLElement) {\r\n        el.addEventListener(\"keydown\", (e: KeyboardEvent) => {\r\n            if (e.key === \"ArrowLeft\") { this.leftPressed = true; };\r\n            if (e.key === \"ArrowRight\") { this.rightPressed = true; };\r\n            if (e.key === \"ArrowUp\") { this.upPressed = true; };\r\n            if (e.key === \"ArrowDown\") { this.downPressed = true; };\r\n            if (e.key === \" \" ) {this.usePressed = true;}\r\n        });\r\n\r\n        el.addEventListener(\"keyup\", (e: KeyboardEvent) => {\r\n            if (e.key === \"ArrowLeft\") { this.leftPressed = false; };\r\n            if (e.key === \"ArrowRight\") { this.rightPressed = false; };\r\n            if (e.key === \"ArrowUp\") { this.upPressed = false; };\r\n            if (e.key === \"ArrowDown\") { this.downPressed = false; };\r\n            if (e.key === \" \" ) {this.usePressed = false;}\r\n            if (e.key.length === 1 ) { this.keyQueue.push(e.key); }\r\n        });\r\n\r\n        el.addEventListener(\"mousedown\", (e: MouseEvent) => {\r\n            if (e.button === 0) {\r\n                const rect = el.getBoundingClientRect();\r\n                this.leftMousePressed = true;\r\n                this.mouseDragStart = new Vector(e.clientX - rect.left, e.clientY - rect.top);\r\n            }\r\n        });\r\n\r\n        el.addEventListener(\"mousemove\", (e: MouseEvent) => {\r\n            const rect = el.getBoundingClientRect();\r\n            this.mousePosition = new Vector(e.clientX - rect.left, e.clientY - rect.top);\r\n        })\r\n\r\n        el.addEventListener(\"mouseup\", (e: MouseEvent) => {\r\n            if ( e.button === 0) {\r\n                this.leftMousePressed = false;\r\n                this.previousLeftMousePressed = true;\r\n                this.mouseDragStart = null;\r\n            }\r\n        });\r\n\r\n        el.addEventListener(\"touchstart\", (e: TouchEvent) => {\r\n            this.leftMousePressed = true;\r\n            const rect = el.getBoundingClientRect();\r\n            const relX = e.changedTouches.item(0).clientX - rect.left;\r\n            const relY = e.changedTouches.item(0).clientY - rect.top;\r\n            this.mouseDragStart = new Vector(relX, relY);\r\n        });\r\n\r\n        el.addEventListener(\"touchmove\", (e: TouchEvent) => {\r\n            const rect = el.getBoundingClientRect();\r\n            const relX = e.changedTouches.item(0).clientX - rect.left;\r\n            const relY = e.changedTouches.item(0).clientY - rect.top;\r\n            this.mousePosition = new Vector(relX, relY);\r\n        });\r\n\r\n        el.addEventListener(\"touchend\", (e: TouchEvent) => {\r\n            this.leftMousePressed = false;\r\n            this.previousLeftMousePressed = true;\r\n            this.mouseDragStart = null;\r\n        });\r\n    }\r\n\r\n    public anyDirectional(): boolean {\r\n        if (this.upPressed || this.downPressed || this.leftPressed || this.rightPressed)\r\n            return true;\r\n\r\n        return false;\r\n    }\r\n\r\n    public clearQueue() {\r\n        this.keyQueue = [];\r\n    }\r\n}\r\n","import { Game } from \"../../game/game\";\r\nimport { Color } from \"../../base/color\";\r\nimport { Sprite } from \"../../game/world/sprite\";\r\nimport { ViewSprite } from \"./view-sprite\";\r\nimport { Door } from \"../../game/world/door\";\r\nimport { GameObject } from \"../../game/world/game-object\";\r\nimport { RayCast } from \"../../game/raycast\";\r\nimport { ResourceResolver } from \"../resource-resolver\";\r\nimport { Player } from \"../../game/player\";\r\n\r\n\r\nexport class Renderer {\r\n    screenWidth: number;\r\n\tscreenHeight: number;\r\n\tcanvas: HTMLCanvasElement;\r\n\r\n    resourceResolver: ResourceResolver;\r\n\tdrawContext: CanvasRenderingContext2D;\r\n    parentElement: HTMLElement;\r\n    mapVisible: boolean;\r\n\r\n    texWidth = 64;\r\n    texHeight = 64;\r\n\r\n    constructor(width: number, height: number, resResolver: ResourceResolver, canvasElement: HTMLCanvasElement, parent: HTMLElement) {\r\n        this.screenWidth = width;\r\n\t\tthis.screenHeight = height;\r\n\r\n        this.resourceResolver = resResolver;\r\n\t\tthis.canvas = canvasElement;\r\n\t\tthis.canvas.width = this.screenWidth;\r\n\t\tthis.canvas.height = this.screenHeight;\r\n\r\n        let context = this.canvas.getContext('2d');\r\n\t\tif ( context == null) {\r\n\t\t\tthrow new Error(\"Unable to get 2D rendering context from Canvas\");\r\n        }\r\n\r\n\t\tthis.drawContext = context;\r\n        this.drawContext.imageSmoothingEnabled = false;\r\n        this.parentElement = parent;\r\n    }\r\n\r\n    public toggleMap() {\r\n        this.mapVisible = !this.mapVisible;\r\n    }\r\n\r\n    public render(game: Game, delta: number) {\r\n        this.drawContext.fillStyle = \"#000\";\r\n        this.drawContext.fillRect(0,0,this.screenWidth, this.screenHeight);\r\n    \r\n        const textures = this.resourceResolver.getTextures(game.world);\r\n        const sprites = this.resourceResolver.getSprites(game.world);\r\n        \r\n        if ( textures.naturalWidth === 0 || textures.naturalHeight === 0 || \r\n            sprites.naturalWidth === 0  || sprites.naturalHeight === 0) {\r\n            this.drawContext.fillStyle = \"#fff\";\r\n            this.drawContext.font = \"30px Arial\";\r\n            this.drawContext.textAlign = \"center\";\r\n            this.drawContext.fillText(\"Loading textures...\", this.screenWidth/2, this.screenHeight/2);\r\n            return;\r\n        }\r\n\r\n        this.renderCeilingFloor(game);\r\n        this.renderWalls(game, textures, sprites);\r\n\r\n        if ( this.mapVisible ) {\r\n            this.renderMap(game);\r\n        }\r\n\r\n        this.renderInterface(game.player, sprites, delta);\r\n    }\r\n\r\n    private renderInterface(player: Player, sprites: HTMLImageElement, delta: number) {\r\n        let left = 16;\r\n        let bottom = 16;\r\n\r\n        player.items.forEach(i => {\r\n            // Don't draw items we have none of, or who are in the special 'score' category\r\n            if ( i.amount < 1 || i.name === 'score' ) {\r\n                return;\r\n            }\r\n\r\n            const width = 48;\r\n            const y = this.screenHeight - (bottom+width);\r\n            for (let n = 0; n < i.amount; n++) {\r\n                this.drawContext.drawImage(sprites, i.sprite*this.texWidth, 0, this.texWidth, this.texHeight, left+(n*width/2), y, width, width);\r\n            }\r\n            bottom+=(width/2 + 8);\r\n        });\r\n    }\r\n\r\n    private renderCeilingFloor(game: Game) {\r\n        // Temporary implementation\r\n        var ceilColor = this.getBlockColor(game.world.ceiling);\r\n        this.drawContext.fillStyle = \"hsl(\" + ceilColor.hue + \",\" + ceilColor.saturation + \"%,\" + ceilColor.lightness/2 + \"%)\";\r\n        this.drawContext.fillRect(0, 0, this.screenWidth, this.screenHeight/2);\r\n\r\n        var floorColor = this.getBlockColor(game.world.floor);\r\n        this.drawContext.fillStyle = \"hsl(\" + floorColor.hue + \",\" + floorColor.saturation + \"%,\" + floorColor.lightness/4 + \"%)\";\r\n        this.drawContext.fillRect(0, this.screenHeight/2, this.screenWidth, this.screenHeight/2);\r\n    }\r\n\r\n    private renderWalls(game: Game, textures: HTMLImageElement, spriteTextures: HTMLImageElement) {\r\n        const pitch = 0;\r\n        const zBuffer: Array<number> = [];\r\n        zBuffer.fill(0, 0, this.screenWidth);\r\n        const sprites: Array<ViewSprite> = [];\r\n\r\n        for(var x = 0; x < this.screenWidth; x++) {\r\n            var cameraX = 2 * x / this.screenWidth - 1; // X coordinate in camera space\r\n            var ray = RayCast.ray(game.player.position, game.player.direction, game.player.plane, cameraX, game.world);\r\n\r\n            ray.sprites.forEach(sprite => {\r\n                if ( sprites.findIndex(s => s.x === sprite.x && s.y === sprite.y && s.sprite === sprite.sprite) < 0) {\r\n                    sprites.push(sprite);\r\n                }\r\n            })\r\n\r\n            // Calculate height of line to draw on screen\r\n            var lineHeight = Math.floor(this.screenHeight / ray.perpWallDist);\r\n\r\n            // Calculate lowest and highest pixel to fill in current stripe\r\n            const drawStart = -lineHeight / 2 + this.screenHeight / 2 + pitch;\r\n            const drawEnd = lineHeight / 2 + this.screenHeight / 2 + pitch;\r\n\r\n            var wallX;\r\n            if (ray.side == 0) wallX = game.player.position.y + ray.perpWallDist * ray.direction.y;\r\n            else           wallX = game.player.position.x + ray.perpWallDist * ray.direction.x;\r\n            wallX -= Math.floor(wallX);\r\n\r\n            //x coordinate on the texture\r\n            var texX = wallX * this.texWidth;\r\n            if(ray.side == 0 && ray.direction.x > 0) texX = this.texWidth - texX;\r\n            if(ray.side == 1 && ray.direction.y < 0) texX = this.texWidth - texX;\r\n            \r\n            if ( ray.worldObject instanceof Door && !ray.inside ) { \r\n                if((ray.side == 0 && ray.direction.x > 0 )|| (ray.side == 1 && ray.direction.y < 0)) {\r\n                    texX += Math.floor(ray.worldObject.openAmount * this.texWidth);\r\n                } else {\r\n                    texX -= Math.floor(ray.worldObject.openAmount * this.texWidth);\r\n                }\r\n                \r\n            }\r\n\r\n            const textureStartX = Math.floor(this.texWidth+(ray.texture*this.texWidth)-texX);\r\n            this.drawContext.drawImage(textures, textureStartX, 0, 1, this.texHeight, x, drawStart, 1, drawEnd - drawStart);\r\n            if ( ray.side === 1 ) { \r\n                this.drawContext.strokeStyle = 'rgba(0,0,0,0.6)';\r\n                this.drawContext.beginPath();\r\n                this.drawContext.moveTo(x, drawStart);\r\n                this.drawContext.lineTo(x, drawEnd);\r\n                this.drawContext.stroke();\r\n            }\r\n\r\n            zBuffer[x] = ray.perpWallDist;\r\n        }\r\n\r\n        // Sort from farthest to closest\r\n        sprites.sort((a: ViewSprite, b: ViewSprite): number => {\r\n            return b.distanceTo(game.player.position.x, game.player.position.y) - a.distanceTo(game.player.position.x, game.player.position.y);\r\n        });\r\n\r\n        sprites.forEach(s => this.renderSpriteBillboard(s, game, zBuffer, pitch, spriteTextures));\r\n    }\r\n\r\n    private renderSpriteBillboard(sprite: ViewSprite, game: Game, zBuffer: Array<number>, pitch: number, texture: HTMLImageElement) {\r\n        const spriteX = sprite.x - game.player.position.x;\r\n        const spriteY = sprite.y - game.player.position.y;\r\n\r\n        const invDet = 1.0 / (game.player.plane.x * game.player.direction.y - game.player.direction.x * game.player.plane.y); //required for correct matrix multiplication\r\n\r\n        const transformX = invDet * (game.player.direction.y * spriteX - game.player.direction.x * spriteY);\r\n        const transformY = invDet * (-game.player.plane.y * spriteX + game.player.plane.x * spriteY); //this is actually the depth inside the screen, that what Z is in 3D\r\n\r\n        const spriteScreenX = Math.floor((this.screenWidth / 2) * (1 + transformX / transformY));\r\n\r\n        //calculate height of the sprite on screen\r\n        const spriteHeight = Math.abs(Math.floor(this.screenHeight / (transformY))) * sprite.scale; //using 'transformY' instead of the real distance prevents fisheye\r\n\r\n        //calculate width of the sprite\r\n        const spriteWidth = Math.abs(Math.floor(this.screenHeight / (transformY))) * sprite.scale;\r\n        var drawStartX = Math.floor(-spriteWidth / 2 + spriteScreenX);\r\n        if(drawStartX < 0) drawStartX = 0;\r\n        var drawEndX = spriteWidth / 2 + spriteScreenX;\r\n        if(drawEndX >= this.screenWidth) drawEndX = this.screenWidth - 1;\r\n\r\n        //loop through every vertical stripe of the sprite on screen\r\n        for(var stripe = drawStartX; stripe < drawEndX; stripe++)\r\n        {\r\n            const texX = Math.floor((stripe - (-spriteWidth / 2 + spriteScreenX)) * this.texWidth / spriteWidth);\r\n            //the conditions in the if are:\r\n            //1) it's in front of camera plane so you don't see things behind you\r\n            //2) it's on the screen (left)\r\n            //3) it's on the screen (right)\r\n            //4) ZBuffer, with perpendicular distance\r\n            if(transformY > 0 && stripe > 0 && stripe < this.screenWidth && transformY < zBuffer[stripe]) {\r\n                // Ensure that we don't pick a pixel that's outside the tile, which may happen due to rounding with scaled sprites\r\n                let spriteStartX = Math.min((sprite.sprite * this.texWidth) + texX,(sprite.sprite * this.texWidth) + this.texWidth);\r\n                spriteStartX = Math.max(spriteStartX, (sprite.sprite * this.texWidth));\r\n\r\n                const startY = -((spriteHeight* sprite.scale)/2) + (spriteHeight - (spriteHeight * sprite.scale)) + (this.screenHeight / 2) + pitch;\r\n                this.drawContext.drawImage(texture, spriteStartX, 0, 1, this.texHeight, stripe, startY, 1, spriteHeight);\r\n                zBuffer[stripe] = transformY;\r\n            }\r\n        }\r\n    }\r\n\r\n    private renderMap(game: Game) {\r\n        const blockSize = 8;\r\n\r\n        for (var y = 0; y < game.world.objects.length; y++) {\r\n            for (var x = 0; x < game.world.objects[y].length; x++) {\r\n                const obj = game.world.objects[y][x];\r\n                if ( obj == null) continue;\r\n\r\n                var color = this.getBlockColor(obj.texture+1);\r\n                this.drawContext.fillStyle = \"hsl(\" + color.hue + \",\" + color.saturation + \"%,\" + color.lightness + \"%)\";\r\n                if ( obj instanceof Sprite ) {\r\n                    this.drawContext.strokeStyle = '#f77';\r\n                    this.drawCircle((x+0.5)*blockSize, (y+0.5)*blockSize, blockSize/2);\r\n                } else if ( obj instanceof Door && !obj.block) {\r\n                    var neighbour: GameObject;\r\n                    if ( x > 0) {\r\n                        neighbour = game.world.objects[y][x-1];\r\n                    } else {\r\n                        neighbour = game.world.objects[y][x+1];\r\n                    }\r\n                    if ( neighbour == null ) { this.drawContext.fillRect((x+0.25)*blockSize, y*blockSize, blockSize/2, blockSize); }\r\n                    else { this.drawContext.fillRect(x*blockSize, (y+0.25)*blockSize, blockSize, blockSize/2); }\r\n                } else {\r\n                    this.drawContext.fillRect(x*blockSize, y*blockSize, blockSize, blockSize);\r\n                }\r\n                \r\n                if ( game.currentTileX === x && game.currentTileY === y) {\r\n                    this.drawContext.strokeStyle = '#f0f';\r\n                    this.drawContext.strokeRect(x*blockSize, y*blockSize, blockSize, blockSize);\r\n                }\r\n            }\r\n        }\r\n\r\n        const playerX = game.player.position.x*blockSize;\r\n        const playerY = game.player.position.y*blockSize;\r\n        this.drawContext.strokeStyle = \"#fff\";\r\n        this.drawCircle(playerX, playerY, blockSize/2);\r\n        this.drawContext.beginPath();\r\n        this.drawContext.moveTo(playerX, playerY);\r\n        this.drawContext.lineTo(playerX + game.player.direction.x*blockSize, playerY + game.player.direction.y*blockSize);\r\n        this.drawContext.stroke();\r\n    }\r\n\r\n    private drawCircle(x: number, y: number, r: number) {\r\n        this.drawContext.beginPath();\r\n        this.drawContext.arc(x, y, r, 0, 2 * Math.PI);\r\n        this.drawContext.stroke(); \r\n    }\r\n\r\n    private getBlockColor(blockId: number): Color {\r\n        var hue = 0;\r\n        var saturation = 100;\r\n        var lightness = 50\r\n\r\n        switch(blockId) {\r\n            case 0: // Empty\r\n                saturation = 0;\r\n                lightness = 0;\r\n                break;\r\n            \r\n            default:\r\n                hue = blockId*40;\r\n                break; \r\n        }\r\n\r\n        return new Color(hue, saturation, lightness);\r\n    }\r\n}\r\n","export class ViewSprite {\r\n    public x: number;\r\n    public y: number;\r\n    public sprite: number;\r\n    public scale: number;\r\n\r\n    constructor(x: number, y: number, sprite: number, scale: number = 1) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.sprite = sprite;\r\n        this.scale = scale;\r\n    }\r\n\r\n    distanceTo(x: number, y: number) : number {\r\n        return ((x - this.x) * (x - this.x) + (y - this.y) * (y - this.y));\r\n    }\r\n}","import { World } from \"../game/world/world\";\r\n\r\nexport class ResourceResolver {\r\n    public parentElement: HTMLElement;\r\n    public images: Map<string, HTMLImageElement>;\r\n\r\n    constructor(parent: HTMLElement) {\r\n        this.parentElement = parent;\r\n        this.images = new Map<string, HTMLImageElement>();\r\n    }\r\n\r\n    getTextures(world: World): HTMLImageElement {\r\n        let textureImage = this.images.get(world.textures.href);\r\n        if ( textureImage != null ) {\r\n            return textureImage;\r\n        }\r\n\r\n        return this.addResource(world.textures.href);\r\n    }\r\n\r\n    getSprites(world: World): HTMLImageElement {\r\n        let spriteImage = this.images.get(world.sprites.href);\r\n        if ( spriteImage != null ) {\r\n            return spriteImage;\r\n        }\r\n\r\n        return this.addResource(world.sprites.href);\r\n    }\r\n\r\n    private addResource(url: string): HTMLImageElement {\r\n        const img = document.createElement('img');\r\n        img.src = url;\r\n        img.classList.add('hidden');\r\n        this.parentElement.appendChild(img);\r\n        this.images.set(url, img);\r\n        return img;\r\n    }\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { Game } from \"./ts/game/game\";\r\nimport { ResourceResolver } from \"./ts/presentation/resource-resolver\";\r\nimport { Input } from \"./ts/presentation/input\";\r\nimport { Renderer } from \"./ts/presentation/rendering/renderer\";\r\nimport { GuiManager } from \"./ts/presentation/gui-manager\";\r\n\r\nconst input = new Input();\r\ninput.attachEventListeners(document.getElementsByTagName('body')[0]);\r\n\r\nconst width = 1024;\r\nconst height = 768;\r\nconst canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\r\nconst depth = document.getElementById(\"depth\") as HTMLCanvasElement;\r\nconst parent = document.getElementById(\"client-parent\") as HTMLElement;\r\nparent.style.width = `${width}px`;\r\n\r\nconst resources = new ResourceResolver(parent);\r\nconst renderer = new Renderer(width, height, resources, canvas, depth);\r\nconst guiManager = new GuiManager(resources, parent);\r\nconst game = new Game(renderer, input, guiManager);\r\n\r\nvar url = new URL(\"./assets/room.json\", document.baseURI).href; // Local room is fallback\r\n\r\nconst params = new URLSearchParams(window.location.search);\r\nif ( params.get('url') != null) {\r\n    url = params.get('url');\r\n} \r\n\r\ngame.loadRoom(url);"],"names":["Color","hue","saturation","lightness","this","x","y","add","vector","Vector","rotateBy","degrees","Math","PI","cos","sin","newX","round","newY","game","gui","guiManager","handle","event","GameEventHandler","GameEvent","itemName","item","handler","sprite","world","items","get","texture","addDialog","ItemConsumedEvent","ItemRequiredEvent","renderer","input","currentTileX","currentTileY","currentTime","previousTime","player","Player","events","Array","loadRoom","urlString","url","URL","console","log","href","fetch","method","mode","then","response","ok","Error","json","room","Room","validate","World","from","tick","performance","now","delta","gameStep","step","render","forEach","e","window","requestAnimationFrame","bind","addEvent","push","keyQueue","length","find","k","toggleMap","clearQueue","usePressed","leftMouseUp","ray","RayCast","position","direction","plane","hit","perpWallDist","worldObject","Door","interact","anyDirectional","mouseDragStart","movement","getMovementFromInput","newPlayerPos","objects","floor","currentTile","collidable","Pickup","onPickup","leftPressed","rightPressed","xVel","yVel","upPressed","movementSpeed","downPressed","mousePosition","forward","min","max","Game","Item","name","amount","points","i","RayCastResult","originPos","originDir","originPlane","cameraX","stopOnSprite","stepX","stepY","sideDistX","sideDistY","rayDirX","rayDirY","mapX","mapY","deltaDistX","abs","deltaDistY","wallX","side","texNum","wallXOffset","wallYOffset","inside","sprites","Sprite","viewSprite","ViewSprite","scale","findIndex","v","openAmount","result","textures","tiles","tilesWidth","debug","key","unlockTexture","closed","openTime","unlock","keyIndex","GameObject","existing","distanceBetween","otherX","otherY","ceiling","dynamicObjects","Map","o","cacheDynamicObjects","splice","obj","pathParts","pathname","split","basePath","join","origin","row","tile","type","pickup","set","message","element","alive","addDelta","Dialog","resourceResolver","parent","lastScore","texWidth","texHeight","parentElement","scoreElement","document","createElement","classList","appendChild","dialog","oldElement","removeChild","text","innerText","createSpriteCanvas","score","padStart","canvas","width","height","ctx","getContext","sheet","getSprites","drawImage","GuiManager","leftMousePressed","previousLeftMousePressed","attachEventListeners","el","addEventListener","button","rect","getBoundingClientRect","clientX","left","clientY","top","relX","changedTouches","relY","Input","resResolver","canvasElement","screenWidth","screenHeight","context","drawContext","imageSmoothingEnabled","mapVisible","fillStyle","fillRect","getTextures","naturalWidth","naturalHeight","font","textAlign","fillText","renderCeilingFloor","renderWalls","renderMap","renderInterface","bottom","n","ceilColor","getBlockColor","floorColor","spriteTextures","zBuffer","fill","s","lineHeight","drawStart","drawEnd","texX","textureStartX","strokeStyle","beginPath","moveTo","lineTo","stroke","sort","a","b","distanceTo","renderSpriteBillboard","pitch","spriteX","spriteY","invDet","transformX","transformY","spriteScreenX","spriteHeight","spriteWidth","drawStartX","drawEndX","stripe","spriteStartX","startY","color","drawCircle","blockSize","block","strokeRect","playerX","playerY","r","arc","blockId","Renderer","images","textureImage","addResource","spriteImage","img","src","ResourceResolver","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","call","getElementsByTagName","getElementById","depth","style","resources","baseURI","params","URLSearchParams","location","search"],"sourceRoot":""}