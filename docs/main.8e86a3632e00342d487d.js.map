{"version":3,"file":"main.8e86a3632e00342d487d.js","mappings":"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","sources":["webpack://weblabyrinth/./src/ts/base/color.ts","webpack://weblabyrinth/./src/ts/base/vector.ts","webpack://weblabyrinth/./src/ts/game/events/game-event-handler.ts","webpack://weblabyrinth/./src/ts/game/events/game-event.ts","webpack://weblabyrinth/./src/ts/game/events/item-consumed-event.ts","webpack://weblabyrinth/./src/ts/game/events/item-required-event.ts","webpack://weblabyrinth/./src/ts/game/game.ts","webpack://weblabyrinth/./src/ts/game/item.ts","webpack://weblabyrinth/./src/ts/game/level/level.ts","webpack://weblabyrinth/./src/ts/game/level/resources.ts","webpack://weblabyrinth/./src/ts/game/level/room.ts","webpack://weblabyrinth/./src/ts/game/player.ts","webpack://weblabyrinth/./src/ts/game/raycast.ts","webpack://weblabyrinth/./src/ts/game/world/door.ts","webpack://weblabyrinth/./src/ts/game/world/exit.ts","webpack://weblabyrinth/./src/ts/game/world/game-object.ts","webpack://weblabyrinth/./src/ts/game/world/pickup.ts","webpack://weblabyrinth/./src/ts/game/world/portal.ts","webpack://weblabyrinth/./src/ts/game/world/sprite.ts","webpack://weblabyrinth/./src/ts/game/world/world.ts","webpack://weblabyrinth/./src/ts/presentation/gui-manager.ts","webpack://weblabyrinth/./src/ts/presentation/input.ts","webpack://weblabyrinth/./src/ts/presentation/interface/dialog.ts","webpack://weblabyrinth/./src/ts/presentation/interface/panel.ts","webpack://weblabyrinth/./src/ts/presentation/rendering/renderer.ts","webpack://weblabyrinth/./src/ts/presentation/rendering/view-sprite.ts","webpack://weblabyrinth/./src/ts/presentation/resource-resolver.ts","webpack://weblabyrinth/webpack/bootstrap","webpack://weblabyrinth/./src/index.ts"],"sourcesContent":["export class Color\r\n{\r\n    hue: number;\r\n    saturation: number;\r\n    lightness: number;\r\n    \r\n    constructor(hue: number, saturation: number, lightness: number) {\r\n        this.hue = hue;\r\n        this.saturation = saturation;\r\n        this.lightness = lightness;\r\n    }\r\n}","export class Vector {\r\n    public x: number;\r\n    public y: number;\r\n\r\n    constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    add(vector: Vector): Vector {\r\n        return new Vector(this.x + vector.x, this.y + vector.y);\r\n    }\r\n\r\n    multiply(scalar: number): Vector {\r\n        return new Vector(this.x * scalar, this.y * scalar);\r\n    }\r\n\r\n    subtract(vector: Vector): Vector {\r\n        return new Vector(this.x - vector.x, this.y - vector.y);\r\n    }\r\n\r\n    rotateBy(degrees: number): Vector {\r\n        degrees = -degrees * (Math.PI / 180);\r\n        const cos = Math.cos(degrees);\r\n        const sin = Math.sin(degrees);\r\n        const newX = Math.round(10000 * (this.x * cos - this.y * sin)) / 10000;\r\n        const newY = Math.round(10000 * (this.x * sin + this.y * cos)) / 10000;\r\n        return new Vector(newX, newY);\r\n    }\r\n\r\n    magnitude(): number {\r\n        return Math.sqrt((this.x * this.x) + (this.y * this.y));\r\n    }\r\n\r\n    setLength(length: number): Vector {\r\n        const mag = this.magnitude();\r\n        return new Vector(this.x * (length / mag), this.y * (length / mag));\r\n    }\r\n\r\n    normalize(): Vector {\r\n        const mgn = this.magnitude();\r\n        return new Vector(this.x / mgn, this.y / mgn);\r\n    }\r\n\r\n    dot(vector: Vector): number {\r\n        return (this.x * vector.x) + (this.y * vector.y);\r\n    }\r\n\r\n    cross(vector: Vector): number {\r\n        return (this.x * vector.y) - (vector.x * this.y);\r\n    }\r\n\r\n    rotationDiff(vector: Vector): number {\r\n        const result =\r\n            (Math.atan2(this.y, this.x)\r\n            - Math.atan2(vector.y, vector.x)) \r\n            * (180/Math.PI);\r\n        return result\r\n    }\r\n}\r\n","import { GuiManager } from \"../../presentation/gui-manager\";\r\nimport { GameEvent } from \"./game-event\";\r\nimport { Game } from \"../game\";\r\n\r\nexport class GameEventHandler {\r\n    public game: Game;\r\n    public guiManager: GuiManager;\r\n\r\n    constructor(game: Game, gui: GuiManager) {\r\n        this.game = game;\r\n        this.guiManager = gui;\r\n    }\r\n\r\n    public handle(event: GameEvent) {\r\n        event.handle(this);\r\n    }\r\n}","import { GameEventHandler } from \"./game-event-handler\";\r\n\r\nexport abstract class GameEvent {\r\n    public abstract handle(handler: GameEventHandler);\r\n}","import { GameEvent } from \"./game-event\"\r\nimport { GameEventHandler } from \"./game-event-handler\";\r\n\r\nexport class ItemConsumedEvent extends GameEvent {\r\n    public item: string;\r\n\r\n    constructor(itemName: string) {\r\n        super();\r\n        this.item = itemName;\r\n    }\r\n    \r\n    public handle(handler: GameEventHandler) {\r\n        const sprite = handler.game.world.items.get(this.item).texture;\r\n        handler.guiManager.addDialog('Item consumed', sprite, handler.game.world);\r\n    }\r\n}","import { GameEvent } from \"./game-event\";\r\nimport { GameEventHandler } from \"./game-event-handler\";\r\n\r\nexport class ItemRequiredEvent extends GameEvent {\r\n    public item: string;\r\n\r\n    constructor(itemName: string) {\r\n        super();\r\n        this.item = itemName;\r\n    }\r\n\r\n    public handle(handler: GameEventHandler) {\r\n        const sprite = handler.game.world.items.get(this.item).texture;\r\n        handler.guiManager.addDialog('Missing required item', sprite, handler.game.world);\r\n    }\r\n}","import { Room } from \"./level/room\";\r\nimport { Input } from '../presentation/input';\r\nimport { Player } from './player';\r\nimport { Renderer } from '../presentation/rendering/renderer';\r\nimport { World } from './world/world';\r\nimport { Vector } from '../base/vector';\r\nimport { RayCast } from \"./raycast\";\r\nimport { Door } from './world/door';\r\nimport { Pickup } from \"./world/pickup\";\r\nimport { GameEventHandler } from \"./events/game-event-handler\";\r\nimport { GameEvent } from \"./events/game-event\";\r\nimport { GuiManager } from \"../presentation/gui-manager\";\r\nimport { Portal } from \"./world/portal\";\r\nimport { Level } from \"./level/level\";\r\nimport { Exit } from \"./world/exit\";\r\nimport { GameObject } from \"./world/game-object\";\r\n\r\nexport class Game {\r\n    public world: World;\r\n\r\n\tplayer: Player;\r\n\tinput: Input;\r\n\trenderer: Renderer;\r\n\tguiManager: GuiManager;\r\n\tevents: Array<GameEvent>;\r\n\thandler: GameEventHandler;\r\n\t\r\n\tpaused = false;\r\n\tcurrentTileX = 0;\r\n\tcurrentTileY = 0;\r\n\r\n\tcurrentTime = 0;\r\n\tpreviousTime = 0;\r\n\r\n\tconstructor(renderer: Renderer, input: Input, guiManager: GuiManager) {\r\n\t\tthis.renderer = renderer;\r\n\t\tthis.input = input;\r\n\t\tthis.guiManager = guiManager;\r\n\t\tthis.handler = new GameEventHandler(this, guiManager);\r\n\r\n\t\tthis.player = new Player(17, 19);\r\n\t\tthis.events = new Array<GameEvent>();\r\n\t}\r\n\r\n\tpublic loadLevel(urlString: string) {\r\n\t\tconst url = new URL(urlString);\r\n\t\tconsole.log('Loading new room from URL', url.href);\r\n\r\n\t\tfetch(url.href, {\r\n\t\t\tmethod: 'get',\r\n\t\t\tmode: 'cors'\r\n\t\t}).then((response) => {\r\n\t\t\tif ( response.ok ) {\r\n\t\t\t\tresponse.json().then(json => {\r\n\t\t\t\t\tconst level = json as Level;\r\n\t\t\t\t\tlet warnings = Level.validate(level);\r\n\t\t\t\t\tif ( warnings.length > 0) {\r\n\t\t\t\t\t\tconsole.warn('Warnings were returned during room validation', warnings);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( level.name != null ) {\r\n\t\t\t\t\t\tthis.guiManager.enteredLevel(level.name, level.author);\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.initialize(World.from(level, url));\r\n\t\t\t\t})\r\n\t\t\t} else {\r\n\t\t\t\tthrow new Error(`Unable to retrieve room at URL: ${urlString}`);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes the game instance with the specified world\r\n\t * @param world \r\n\t */\r\n\tpublic initialize(world: World) {\r\n\t\tthis.world = world;\r\n\t\tlet oldScore = this.player.score;\r\n\t\tthis.player = new Player(world.playerStart.x, world.playerStart.y);\r\n\t\tthis.player.rotateBy(world.playerRotation);\r\n\t\tthis.player.score = oldScore;\r\n\t\tthis.paused = false;\r\n\t\tthis.tick();\r\n\t}\r\n\r\n\tpublic levelEnd(nextLevel: string | null) {\r\n\t\tthis.paused = true;\r\n\t\tthis.guiManager.createEndScreen(this, nextLevel);\r\n\t}\r\n\r\n\t/**\r\n\t * Progresses the game by 1 step, and schedules the next step\r\n\t */\r\n\tpublic tick() {\r\n\t\tif ( this.paused ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (this.previousTime=== 0 ) {\r\n\t\t\tthis.previousTime = performance.now();\r\n\t\t} else {\r\n\t\t\tthis.previousTime = this.currentTime;\r\n\t\t}\r\n\r\n\t\tthis.currentTime = performance.now();\r\n\r\n\t\tconst delta = (this.currentTime - this.previousTime)/1000;\r\n\t\tthis.gameStep(delta);\r\n\t\tthis.world.step(delta);\r\n\r\n\t\tthis.renderer.render(this, delta);\r\n\t\tthis.guiManager.tick(this, delta);\r\n\r\n\t\tthis.events.forEach(e => this.handler.handle(e));\r\n\t\tthis.events = [];\r\n\r\n\t\twindow.requestAnimationFrame(this.tick.bind(this));\r\n\t}\r\n\r\n\tpublic addEvent(event: GameEvent) {\r\n\t\tthis.events.push(event);\r\n\t}\r\n\r\n\tprivate gameStep(delta: number) {\r\n\t\tif ( this.input.keyQueue.length > 0) {\r\n\t\t\tif ( this.input.keyQueue.find((k) => k === 'm') != null) {\r\n\t\t\t\tthis.renderer.toggleMap();\r\n\t\t\t}\r\n\r\n\t\t\tthis.input.clearQueue();\r\n\t\t}\r\n\r\n\t\t// Interact with objects in the world\r\n\t\tif ( this.input.usePressed || this.input.leftMouseUp ) {\r\n\t\t\tconst ray = RayCast.ray(this.player.position, this.player.direction, this.player.plane, 0, this.world);\r\n\t\t\tif ( ray.hit && ray.perpWallDist < 2 ) {\r\n\t\t\t\tif ( ray.worldObject instanceof Door || ray.worldObject instanceof Exit) {\r\n\t\t\t\t\tray.worldObject.interact(this);\r\n\t\t\t\t}\r\n\t\t\t} \r\n\t\t}\r\n\r\n\t\tif ( !this.input.anyDirectional() && this.input.mouseDragStart == null ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tvar movement = this.getMovementFromInput();\r\n\t\tif ( movement.x === 0 && movement.y === 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet newPlayerPos = this.player.position.add(movement);\r\n\r\n\t\t// Out of bounds\r\n\t\tif (newPlayerPos.y > this.world.objects.length || newPlayerPos.y < 0 || \r\n\t\t\tnewPlayerPos.x > this.world.objects[0].length || newPlayerPos.x < 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst currentTile = this.world.objects[this.currentTileY][this.currentTileX];\r\n\t\tconst nextTile = this.world.objects[Math.floor(newPlayerPos.y)][Math.floor(newPlayerPos.x)];\r\n\t\tlet rotationOffset = 0;\r\n\t\tif (nextTile instanceof GameObject ) {\r\n\t\t\tif ( nextTile.collidable() ) { return; }\r\n\t\t\tif ( nextTile instanceof Portal ) {\r\n\t\t\t\trotationOffset = -(nextTile.targetPortal.targetDirection.rotationDiff(nextTile.targetDirection)-180);\r\n\t\t\t\tnewPlayerPos = \r\n\t\t\t\t\tnew Vector(\r\n\t\t\t\t\t\tnewPlayerPos.x - Math.floor(newPlayerPos.x),\r\n\t\t\t\t\t\tnewPlayerPos.y - Math.floor(newPlayerPos.y)\r\n\t\t\t\t\t)\r\n\t\t\t\t\t.rotateBy(rotationOffset)\r\n\t\t\t\t\t.add(nextTile.targetPortal.targetDirection);\r\n\r\n\t\t\t\tif (newPlayerPos.x < 0) {newPlayerPos.x++;}\r\n\t\t\t\tif (newPlayerPos.y < 0) {newPlayerPos.y++;}\r\n\t\t\t\tnewPlayerPos = newPlayerPos.add(nextTile.targetPosition);\r\n\r\n\t\t\t\tconst nudge = nextTile.targetPortal.targetDirection.multiply(0.1);\r\n\t\t\t\twhile (\tMath.floor(newPlayerPos.x) === Math.floor(nextTile.targetPosition.x) &&\r\n\t\t\t\t\tMath.floor(newPlayerPos.y) === Math.floor(nextTile.targetPosition.y)) {\r\n\t\t\t\t\tnewPlayerPos = newPlayerPos.add(nudge);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.player.position = newPlayerPos;\r\n\t\tthis.player.rotateBy(rotationOffset);\r\n\t\tthis.currentTileX = Math.floor(newPlayerPos.x);\r\n\t\tthis.currentTileY = Math.floor(newPlayerPos.y);\r\n\r\n\t\tif ( currentTile instanceof Pickup) {\r\n\t\t\tcurrentTile.onPickup(this.player);\r\n\t\t\tthis.world.objects[this.currentTileY][this.currentTileX] = null;\r\n\t\t\tthis.player.lastItem = performance.now();\r\n\t\t}\r\n\t}\r\n\r\n\tprivate getMovementFromInput(): Vector {\r\n\t\tif ( this.input.leftPressed) {\r\n\t\t\tthis.player.rotateBy(1.5);\r\n\t\t} else if ( this.input.rightPressed) {\r\n\t\t\tthis.player.rotateBy(-1.5);\r\n\t\t}\r\n\r\n\t\tlet xVel = 0;\r\n\t\tlet yVel = 0;\r\n\t\tif ( this.input.upPressed ) {\r\n\t\t\tyVel += this.player.direction.y * this.player.movementSpeed;\r\n\t\t\txVel += this.player.direction.x * this.player.movementSpeed;\r\n\t\t} else if (this.input.downPressed) {\r\n\t\t\tyVel -= this.player.direction.y * this.player.movementSpeed;\r\n\t\t\txVel -= this.player.direction.x * this.player.movementSpeed;\r\n\t\t} \r\n\r\n\t\tif ( this.input.mouseDragStart != null) {\r\n\t\t\tthis.player.rotateBy((this.input.mouseDragStart.x - this.input.mousePosition.x)*0.01);\r\n\t\t\tconst forward = (this.input.mouseDragStart.y - this.input.mousePosition.y) * 0.0005;\r\n\t\t\tif ( forward > 0.01 ) {\r\n\t\t\t\tyVel = this.player.direction.y * Math.min(forward, this.player.movementSpeed)\r\n\t\t\t\txVel = this.player.direction.x * Math.min(forward, this.player.movementSpeed)\r\n\t\t\t} else if (forward < -0.01) {\r\n\t\t\t\tyVel = this.player.direction.y * Math.max(forward, -this.player.movementSpeed)\r\n\t\t\t\txVel = this.player.direction.x * Math.max(forward, -this.player.movementSpeed)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn new Vector(xVel, yVel);\r\n\t}\r\n};\r\n","export class Item {\r\n    sprite: number;\r\n    amount: number;\r\n    name: string;\r\n\r\n    constructor(name: string, sprite: number, amount: number = 1) {\r\n        this.amount = amount;\r\n        this.sprite = sprite;\r\n        this.name = name;\r\n    }\r\n}","import { Resources } from \"./resources\";\r\nimport { Room } from \"./room\";\r\n\r\nexport class Level {\r\n    public static readonly supportedFormat = 'basic_v1';\r\n\r\n    public name: string;\r\n    public author: string;\r\n    public format: string;\r\n    public resources: Resources;\r\n    public room: Room;\r\n\r\n    public static validate(level: Level): Array<string> {\r\n        let warnings = new Array<string>();\r\n        \r\n        if ( level.name == null ) {\r\n            warnings.push('No name was provided for the room');\r\n        }\r\n\r\n        if ( level.author == null) {\r\n            warnings.push('No author was provided for the room');\r\n        }\r\n\r\n        if ( level.format == null ) {\r\n            warnings.push('No file format identifier was provided');\r\n        } else if ( level.format !== this.supportedFormat) {\r\n            warnings.push(`Provided file format of '${level.format}' does not match expected format of ${this.supportedFormat}`);\r\n        }\r\n\r\n        if ( level.resources == null) {\r\n            throw new Error('No resource data was specified');\r\n        }\r\n\r\n        if ( level.room == null) {\r\n            throw new Error('No room data was specified');\r\n        }\r\n\r\n        warnings = warnings.concat(Resources.validate(level.resources));\r\n        warnings = warnings.concat(Room.validate(level.room));\r\n        return warnings;\r\n    }\r\n}","export class Resources {\r\n    public textures: string;\r\n    public sprites: string;\r\n\r\n    public static validate(resources: Resources): Array<string> {\r\n        const warnings = new Array<string>();\r\n        if ( resources.textures == null || resources.textures.length < 1) {\r\n            throw new Error(`Room does not reference a texture file`);\r\n        }\r\n\r\n        if ( resources.sprites == null || resources.sprites.length < 1) {\r\n            throw new Error(`Room does not reference a sprites file`);\r\n        }\r\n        return warnings;\r\n    }\r\n}","import { RoomObject } from \"./room-object\";\r\n\r\nexport class Room {\r\n    public ceiling: string;\r\n    public floor: string;\r\n    public player: Array<number>;\r\n    public objects: Array<RoomObject>;\r\n    public tiles: Array<Array<number>>;\r\n\r\n    public static validate(room: Room): Array<string> {\r\n        const warnings = new Array<string>();\r\n\r\n        if ( room.ceiling == null ) {\r\n            warnings.push('Ceiling was not specified, using default color');\r\n        }\r\n\r\n        if ( room.floor == null) {\r\n            warnings.push('Floor was not specified, using default color');\r\n        }\r\n\r\n        if ( room.player == null) {\r\n            throw new Error('Room contains no player starting position and orientation');\r\n        }\r\n\r\n        if ( room.player.length !== 3) {\r\n            throw new Error(`Room player position and orientation expects 3 arguments, found ${room.player.length}`);\r\n        }\r\n\r\n        if ( room.objects == null || room.objects.length < 1) {\r\n            throw new Error(`Room contains no objects`);\r\n        }\r\n\r\n        if (room.tiles == null || room.tiles.length < 1) {\r\n            throw new Error(`Room contains no tiles`);\r\n        }\r\n\r\n        var tilesWidth = room.tiles[0].length;\r\n        for (let y = 0; y < room.tiles.length; y++) {\r\n            if ( room.tiles[y].length != tilesWidth) {\r\n                console.debug('Faulty row looks like', room.tiles[y]);\r\n                throw new Error(`Irregular row length for row ${y}, expected: ${tilesWidth} actual: ${room.tiles[y].length}`);\r\n            }\r\n\r\n            for (let x = 0; x < room.tiles[y].length; x++) {\r\n                if ( room.tiles[y][x] < 0 || room.tiles[y][x] > room.objects.length) {\r\n                    throw new Error(`Tile reference out of bounds at coordinates ${x},${y}. Should be between 0 and ${room.objects.length}`);\r\n                }\r\n            }\r\n        }\r\n\r\n        return warnings;\r\n    }\r\n}\r\n","import { Vector } from '../base/vector';\r\nimport { Item } from \"./item\";\r\n\r\nexport class Player {\r\n    movementSpeed: number = 0.05;\r\n    items: Array<Item> = [];\r\n\r\n    position: Vector;\r\n    direction: Vector;\r\n    plane: Vector;\r\n    lastItem: number = 0;\r\n    score: number = 0;\r\n    \r\n    secretsFound: number = 0;\r\n    scoreItemsFound: number = 0;\r\n    \r\n    constructor(x: number, y: number) {\r\n        this.position = new Vector(x, y);\r\n        this.direction = new Vector(0, -1);\r\n        this.plane = new Vector(0.66, 0);\r\n    }\r\n\r\n    rotateBy(degrees: number) {\r\n        this.direction = this.direction.rotateBy(degrees);\r\n        this.plane = this.plane.rotateBy(degrees);\r\n    }\r\n}","import { World } from \"./world/world\";\r\nimport { Vector } from \"../base/vector\";\r\nimport { ViewSprite } from \"../presentation/rendering/view-sprite\";\r\nimport { Sprite } from \"./world/sprite\";\r\nimport { Door } from \"./world/door\";\r\nimport { GameObject } from \"./world/game-object\";\r\nimport { Portal } from \"./world/portal\";\r\n\r\nexport class RayCastResult {\r\n    public sprites: Array<ViewSprite>;\r\n    public perpWallDist: number;\r\n    public worldObject: GameObject | null;\r\n    public inside: boolean;\r\n    public hit: boolean;\r\n    public side: number;\r\n    public texture: number;\r\n    public direction: Vector;\r\n    public wallX: number;\r\n    public tilesPassed: Array<Vector>;\r\n}\r\n\r\nexport class RayCast {\r\n    public static ray(originPos: Vector, originDir: Vector, originPlane: Vector, cameraX: number, world: World, \r\n        stopOnSprite: boolean = false, startLength: number = 0, maxLength: number = 8192): RayCastResult {\r\n        var rayDirX = originDir.x + originPlane.x * cameraX;\r\n        var rayDirY = originDir.y + originPlane.y * cameraX;\r\n\r\n        // Which box of the map we're in\r\n        var mapX = Math.floor(originPos.x);\r\n        var mapY = Math.floor(originPos.y);\r\n\r\n        // Length of ray from one X or Y-side to next X or Y-side\r\n        var deltaDistX = Math.abs(1/rayDirX);\r\n        var deltaDistY = Math.abs(1/rayDirY);\r\n\r\n        // What direction to step in X or Y-direction (either +1 or -1)\r\n        var stepX;\r\n        var stepY;\r\n\r\n        // Length of array from current position to next X or Y-side\r\n        var sideDistX;\r\n        var sideDistY;\r\n\r\n        // Calculate step and initial sideDist\r\n        if (rayDirX < 0)\r\n        {\r\n            stepX = -1;\r\n            sideDistX = (originPos.x - mapX) * deltaDistX;\r\n        }\r\n        else\r\n        {\r\n            stepX = 1;\r\n            sideDistX = (mapX + 1 - originPos.x) * deltaDistX;\r\n        }\r\n        if (rayDirY < 0)\r\n        {\r\n            stepY = -1;\r\n            sideDistY = (originPos.y - mapY) * deltaDistY;\r\n        }\r\n        else\r\n        {\r\n            stepY = 1;\r\n            sideDistY = (mapY + 1 - originPos.y) * deltaDistY;\r\n        }\r\n\r\n        var hit = 0;\r\n        var wallXOffset = 0;\r\n        var wallYOffset = 0;\r\n        var inside = false\r\n\r\n        const passed: Array<Vector> = [];\r\n        const sprites: Array<ViewSprite> = [];\r\n        var side: number;\r\n        var texNum: number;\r\n        var worldObject: GameObject;\r\n        \r\n        // Perform DDA\r\n        while (hit === 0)\r\n        {\r\n            // Jump to next map square, OR in X-direction, OR in Y-direction\r\n            if (sideDistX < sideDistY)\r\n            {\r\n                sideDistX += deltaDistX;\r\n                mapX += stepX;\r\n                side = 0;\r\n            }\r\n            else\r\n            {\r\n                sideDistY += deltaDistY;\r\n                mapY += stepY;\r\n                side = 1;\r\n            }\r\n\r\n            passed.push(new Vector(mapX, mapY)); // Store the tile the ray passed\r\n\r\n            // Check if ray has hit a wall\r\n            if ( world.objects[mapY][mapX] instanceof GameObject) { \r\n                worldObject = world.objects[mapY][mapX] as GameObject;\r\n            } else { \r\n                continue; \r\n            }\r\n\r\n            if ( worldObject instanceof Sprite ) {\r\n                var viewSprite = new ViewSprite((mapX+0.5) - originPos.x, (mapY+0.5) - originPos.y, worldObject.texture, worldObject, worldObject.scale);\r\n                if ( sprites.findIndex(v => v.x === viewSprite.x && v.y === viewSprite.y) < 0) {\r\n                    sprites.push(viewSprite);\r\n                }\r\n                if ( stopOnSprite ) {\r\n                    hit = 1;\r\n                }\r\n                continue;\r\n            } else if ( worldObject instanceof Door) {\r\n                if ( worldObject.block ) {\r\n                    if ( worldObject.openAmount < 1) {\r\n                        // Distance starts at 1, which is a normal hit, then offset by twice the open amount\r\n                        if (side === 1 && sideDistY - (deltaDistY*(1-worldObject.openAmount*2)) < sideDistX) {\r\n                            hit = 1;\r\n                            texNum = worldObject.texture;\r\n                            wallYOffset = (worldObject.openAmount*2) * stepY;\r\n                        } else if (side === 0 && sideDistX - (deltaDistX*(1-worldObject.openAmount*2)) < sideDistY) {\r\n                            hit = 1;\r\n                            texNum = worldObject.texture;\r\n                            wallXOffset = (worldObject.openAmount*2) * stepX;\r\n                        }\r\n                    }\r\n                } else {\r\n                    texNum = worldObject.texture;\r\n                    hit = 1;\r\n\r\n                    if (side == 1) {\r\n                        wallYOffset = 0.5 * stepY;\r\n                        if (sideDistY - (deltaDistY/2) < sideDistX) { //If ray hits offset wall\r\n                            let wallX = originPos.x + this.perpendicularDistance(mapY, originPos.y, wallYOffset, stepY, rayDirY) * rayDirX;\r\n                            wallX -= Math.floor(wallX);\r\n                            if ( wallX <= worldObject.openAmount){\r\n                                hit = 0; //Continue raycast for open/opening doors\r\n                                wallYOffset = 0;\r\n                            }\r\n                        } else {\r\n                            mapX += stepX;\r\n                            side = 0;\r\n                            inside =  true;\r\n                            wallYOffset = 0;\r\n                            texNum = (world.objects[mapY][mapX] as GameObject).texture;\r\n                        }\r\n                    } else { //side == 0\r\n                        wallXOffset = 0.5 * stepX;\r\n                        if (sideDistX - (deltaDistX/2) < sideDistY) {\r\n                            let wallX = originPos.y + this.perpendicularDistance(mapX, originPos.x, wallXOffset, stepX, rayDirX) * rayDirY;\r\n                            wallX -= Math.floor(wallX);\r\n                            if ( wallX < worldObject.openAmount) {\r\n                                hit = 0;\r\n                                wallXOffset = 0;\r\n                            }\r\n                        } else {\r\n                            mapY += stepY;\r\n                            side = 1;\r\n                            inside = true;\r\n                            wallXOffset = 0;\r\n                            texNum = (world.objects[mapY][mapX] as GameObject).texture;\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                texNum = worldObject.texture;\r\n                hit = 1;\r\n            }\r\n        }\r\n\r\n        var perpWallDist;\r\n        var wallX;\r\n\r\n        // Calculate distance projected on camera direction, and the offset from the start of the wall\r\n        if (side === 0) {\r\n            perpWallDist = this.perpendicularDistance(mapX, originPos.x, wallXOffset, stepX, rayDirX);\r\n            wallX = originPos.y + perpWallDist * rayDirY;\r\n        }\r\n        else {\r\n            perpWallDist = this.perpendicularDistance(mapY, originPos.y, wallYOffset, stepY, rayDirY);\r\n            wallX = originPos.x + perpWallDist * rayDirX;\r\n        }\r\n\r\n        wallX = wallX - Math.floor(wallX);\r\n\r\n        // If the ray hit a portal, we cast another ray from the hit location relative to the target portal\r\n        if (worldObject instanceof Portal && perpWallDist + startLength < maxLength) {\r\n            const angleOffset = -(worldObject.targetPortal.targetDirection.rotationDiff(worldObject.targetDirection) - 180);\r\n            // Convert hit information into vector in entrance portal space\r\n            let newPos = new Vector(wallX * side, !side ? wallX : 0)\r\n                        .rotateBy(angleOffset)\r\n                        .add(worldObject.targetPortal.targetDirection);\r\n            if (newPos.x < 0) {newPos.x++;}\r\n            if (newPos.y < 0) {newPos.y++;}\r\n\r\n            newPos = newPos.add(worldObject.targetPosition);\r\n\r\n            const nudge = worldObject.targetPortal.targetDirection.multiply(0.1);\r\n            while ( Math.floor(newPos.x) === Math.floor(worldObject.targetPosition.x) &&\r\n                    Math.floor(newPos.y) === Math.floor(worldObject.targetPosition.y)) {\r\n                    newPos = newPos.add(nudge);\r\n            }\r\n\r\n            const newDir = originDir.rotateBy(angleOffset);\r\n            const newPlane = originPlane.rotateBy(angleOffset);\r\n\r\n            const castResult = RayCast.ray(newPos, newDir, newPlane, cameraX, world, stopOnSprite, perpWallDist + startLength, maxLength);\r\n\r\n            if ( castResult.sprites.length > 0) {\r\n                let offset = new Vector(wallX * side, !side ? wallX : 0)\r\n                        .add(worldObject.targetDirection)\r\n                if (offset.x < 0) { offset.x++;}\r\n                if (offset.y < 0) { offset.y++;}\r\n\r\n                offset = offset.add(new Vector(mapX - originPos.x, mapY - originPos.y));\r\n\r\n                // Reinterpret sprite position for all sprites discovered by the ray from the portal           \r\n                castResult.sprites.forEach(s => {\r\n                    const spritePos = new Vector(s.x, s.y)\r\n                        .rotateBy(-angleOffset)\r\n                        .add(offset);\r\n\r\n                    sprites.push(new ViewSprite(spritePos.x, spritePos.y, s.sprite, s.gameObject, s.scale));\r\n                });\r\n                \r\n                castResult.sprites = sprites;\r\n                castResult.tilesPassed = castResult.tilesPassed.concat(passed);\r\n            }\r\n\r\n            return castResult;\r\n        }\r\n\r\n        var result = new RayCastResult();\r\n        result.sprites = sprites;\r\n        result.hit = hit === 1;\r\n        result.side = side;\r\n        result.perpWallDist = perpWallDist + startLength;\r\n        result.inside = inside;\r\n        result.worldObject = worldObject;\r\n        result.texture = texNum;\r\n        result.direction = new Vector(rayDirX, rayDirY);\r\n        result.wallX = wallX;\r\n        result.tilesPassed = passed;\r\n        return result;\r\n    }\r\n\r\n    private static perpendicularDistance(map: number, pos: number, wallOffset: number, step: number, rayDir: number) {\r\n        return (map - pos + wallOffset + (1 - step) / 2) / rayDir;\r\n    }\r\n}\r\n","import { GameObject } from \"./game-object\";\r\nimport { DynamicObject } from \"./dynamic-object\";\r\nimport { Interactable } from \"./interactable\";\r\nimport { Game } from \"../game\";\r\nimport { ItemRequiredEvent } from \"../events/item-required-event\";\r\nimport { ItemConsumedEvent } from \"../events/item-consumed-event\"\r\n\r\nexport class Door extends GameObject implements DynamicObject, Interactable {\r\n    public closed: boolean;\r\n    public openAmount: number;\r\n    public block: boolean;\r\n    public openTime: number;\r\n    public key: string | null;\r\n    public secret: boolean;\r\n    public unlockTexture: number;\r\n\r\n    constructor(texture: number, block: boolean = false, secret: boolean = false, key: string | null = null, unlockTexture: number | null = null) {\r\n        super(texture);\r\n        this.closed = true;\r\n        this.openAmount = 0;\r\n        this.openTime = 0;\r\n        this.block = block;\r\n        this.key = key;\r\n        this.secret = secret;\r\n        this.unlockTexture = unlockTexture ?? texture;\r\n    }\r\n\r\n    public override collidable(): boolean {\r\n        return this.openAmount !== 1;\r\n    }\r\n\r\n    public unlock() {\r\n        this.key = null;\r\n        this.texture = this.unlockTexture;\r\n    }\r\n\r\n    public interact(game: Game) {\r\n        if ( this.key != null) {\r\n            const key = this.key;\r\n            const keyIndex = game.player.items.findIndex(i => i.name === this.key && i.amount > 0);\r\n            if ( keyIndex < 0) {\r\n                game.addEvent(new ItemRequiredEvent(key));\r\n                return; // Nothing happens, door is locked\r\n            }\r\n\r\n            game.player.items[keyIndex].amount -= 1;\r\n            this.unlock();\r\n            game.addEvent(new ItemConsumedEvent(key));\r\n            return;\r\n        }\r\n\r\n        if ( this.closed && this.openAmount === 0 ) {\r\n            this.closed = false;\r\n            this.openTime = 0;\r\n            \r\n            if ( this.secret === true) {\r\n                game.player.secretsFound++;\r\n                this.secret = false;\r\n            }\r\n        } else if ( !this.closed && this.openAmount === 1) {\r\n            this.closed = true;\r\n        }\r\n    }\r\n\r\n    public step(delta: number) {\r\n        const amount = this.block ? delta * 0.2 : delta;\r\n        if ( this.closed && this.openAmount > 0) { \r\n            this.openAmount -= amount; \r\n        }\r\n        if ( !this.closed && this.openAmount < 1) { \r\n            console.debug('Opening', amount);\r\n            this.openAmount += amount; \r\n        }\r\n\r\n        if ( this.openAmount > 1) { this.openAmount = 1; }\r\n        if ( this.openAmount < 0) { this.openAmount = 0; }\r\n\r\n        // Automatically start closing the door if it's open for a few seconds\r\n        if ( !this.block) {\r\n            if ( this.openAmount === 1) { this.openTime += delta; }\r\n            if ( this.openTime > 5) { this.closed = true; }\r\n        }\r\n    }\r\n}","import { Game } from \"../game\";\r\nimport { GameObject } from \"./game-object\";\r\nimport { Interactable } from \"./interactable\";\r\n\r\nexport class Exit extends GameObject implements Interactable {\r\n    public nextLevel: string | null;\r\n\r\n    constructor(texture: number, nextLevel: string | null) {\r\n        super(texture);\r\n        this.nextLevel = nextLevel;\r\n    }\r\n\r\n    public interact(game: Game) {\r\n        game.levelEnd(this.nextLevel);\r\n    }\r\n}","export class GameObject {\r\n    public texture: number;\r\n    public seen: boolean = false;\r\n\r\n    constructor(texture: number) {\r\n        this.texture = texture;\r\n    }\r\n\r\n    public collidable(): boolean {\r\n        return true;\r\n    }\r\n}","import { Sprite } from \"./sprite\"\r\nimport { Player } from \"../player\"\r\nimport { Item } from \"../item\";\r\n\r\nexport class Pickup extends Sprite {\r\n    public name: string;\r\n    public amount: number;\r\n\r\n    constructor(sprite: number, name: string, amount: number = 1, scale: number = 1) {\r\n        super(sprite, scale);\r\n        this.amount = amount;\r\n        this.name = name;\r\n    }\r\n\r\n    public override collidable(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public onPickup(player: Player) {\r\n        if ( this.name === 'score') {\r\n            player.score += this.amount;\r\n            player.scoreItemsFound++;\r\n            return;\r\n        }\r\n\r\n        const existing = player.items.findIndex(i => i.name === this.name);\r\n        if ( existing >= 0)  {\r\n            player.items[existing].amount+=this.amount;\r\n            return;\r\n        }\r\n\r\n        player.items.push(new Item(this.name, this.texture, this.amount));\r\n        return;\r\n    }\r\n}\r\n","import { GameObject } from \"./game-object\";\r\nimport { Vector } from \"../../base/vector\";\r\n\r\nexport class Portal extends GameObject {\r\n    public position: Vector;\r\n    public targetPortal: Portal;\r\n    public targetPosition: Vector;\r\n    public targetDirection: Vector;\r\n\r\n    constructor(position: Vector, direction: Vector) {\r\n        super(0);\r\n        this.position = position;\r\n        this.targetDirection = direction;\r\n    }\r\n\r\n    public connect(portal: Portal) {\r\n        this.targetPortal = portal;\r\n        this.targetPosition = portal.position;\r\n        this.targetPortal.targetPortal = this;\r\n        this.targetPortal.targetPosition = this.position;\r\n    }\r\n\r\n    public override collidable(): boolean {\r\n        return false;\r\n    }\r\n}","import { GameObject } from \"./game-object\";\r\n\r\nexport class Sprite extends GameObject{\r\n    public scale: number;\r\n    \r\n    constructor(sprite: number, scale: number = 1) {\r\n        super(sprite);\r\n        this.scale = scale;\r\n    }\r\n\r\n    distanceBetween(x: number, y: number, otherX: number, otherY: number) : number {\r\n        return ((otherX - x) * (otherX - x) + (otherY - y) * (otherY - y));\r\n    }\r\n}","import { GameObject } from \"./game-object\";\r\nimport { DynamicObject } from \"./dynamic-object\";\r\nimport { Door } from \"./door\";\r\nimport { Sprite } from \"./sprite\";\r\nimport { Level } from \"../level/level\";\r\nimport { Exit } from \"./exit\";\r\nimport { Pickup } from \"./pickup\";\r\nimport { Portal } from \"./portal\";\r\nimport { Vector } from \"../../base/vector\";\r\n\r\nexport class World {\r\n    public name: string;\r\n    public author: string;\r\n    public url: URL;\r\n    public objects: Array<Array<GameObject | boolean>>;\r\n    public items: Map<string, Pickup>;\r\n    \r\n    public playerStart: Vector;\r\n    public playerRotation: number;\r\n\tpublic ceiling: string;\r\n\tpublic floor: string;\r\n\r\n    public textures: URL;\r\n    public sprites: URL;\r\n\r\n    private dynamicObjects: Array<DynamicObject>;\r\n    public scoreItems: number = 0;\r\n    public secrets: number = 0;\r\n\r\n    private constructor() {\r\n        this.objects = [];\r\n        this.dynamicObjects = [];\r\n        this.items = new Map<string, Pickup>();\r\n    }\r\n\r\n    public step(delta: number) {\r\n        this.dynamicObjects.forEach(o => o.step(delta));\r\n    }\r\n\r\n    public cacheDynamicObjects() {\r\n        this.dynamicObjects.splice(0);\r\n        for (let x = 0; x < this.objects.length; x++) {\r\n            for (let y = 0; y < this.objects[x].length; y++) {\r\n                const obj = this.objects[x][y];\r\n                if ( obj instanceof Door ) {\r\n                    this.dynamicObjects.push(obj);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public static from(level: Level, url: URL): World {\r\n        let pathParts = url.pathname.split('/');\r\n        pathParts.splice(pathParts.length-1, 1);\r\n        const basePath = pathParts.join('/');\r\n\r\n\t\tlet world = new World();\r\n        world.name = level.name;\r\n        world.author = level.author;\r\n        world.url = url;\r\n        world.textures = new URL(`${basePath}/${level.resources.textures}`, url.origin);\r\n        world.sprites = new URL(`${basePath}/${level.resources.sprites}`, url.origin);\r\n\r\n        let room = level.room;\r\n        world.ceiling = room.ceiling != null ? room.ceiling : '#005580';\r\n        world.floor = room.floor != null ? room.floor : '#2b4000';\r\n        world.playerStart = new Vector(room.player[0], room.player[1]);\r\n        world.playerRotation = room.player[2];\r\n\r\n        let portals: Map<number, { portal: Portal, target: number} > = new Map<number, { portal: Portal, target: number}>();\r\n\t\tfor (let y = 0; y < room.tiles.length; y++) {\r\n\t\t\tlet row: Array<GameObject | boolean> = [];\r\n\r\n\t\t\tfor (let x = 0; x < room.tiles[y].length; x++) {\r\n\t\t\t\tconst tile = room.tiles[y][x]-1;\r\n\t\t\t\tif ( tile < 0) {\r\n                    row.push(false);\r\n                } else {\r\n                    const obj = room.objects[tile];\r\n                    switch (obj.type) {\r\n                        case \"block\":\r\n                            row.push(new GameObject(obj[\"texture\"] as number));\r\n                            break;\r\n\r\n                        case \"portal\":\r\n                            const dir = obj[\"targetDirection\"] as Array<number>;\r\n                            const target = obj[\"targetPortal\"] as number;\r\n                            const portal = new Portal(new Vector(x, y), new Vector(dir[0], dir[1]));\r\n                            row.push(portal);\r\n                            portals.set(tile+1, { portal: portal, target: target });\r\n                            break;\r\n\r\n                        case \"door\":\r\n                            const block = obj[\"block\"] as boolean;\r\n                            const unlockTexture = obj[\"texture-unlocked\"] as number | null;\r\n                            const secret = obj[\"secret\"] as boolean | null;\r\n                            row.push(new Door(obj[\"texture\"] as number, block ?? false, secret ?? false, obj[\"key\"] as string, unlockTexture));\r\n                            break;\r\n\r\n                        case \"sprite\":\r\n                            row.push(new Sprite(obj[\"texture\"] as number));\r\n                            break;\r\n\r\n                        case \"item\":\r\n                            const scale = obj[\"scale\"] as number;\r\n                            const amount = obj[\"amount\"] as number;\r\n                            const name = obj[\"name\"];\r\n                            const pickup = new Pickup(obj[\"texture\"] as number, name, amount ?? 1, scale ?? 1);\r\n                            row.push(pickup);\r\n                            world.items.set(name, pickup);\r\n                            break;\r\n\r\n                        case \"exit\":\r\n                            const nextLevel = obj[\"next-level\"] as string;\r\n                            row.push(new Exit(obj[\"texture\"] as number, nextLevel));\r\n                            break;\r\n\r\n                        default:\r\n                            throw new Error(`Unknown type '${obj.type}' for object ${tile} at ${x},${y}`);\r\n                    }\r\n                }\r\n\t\t\t}\r\n\r\n            // Increment world counters for certain types of objects\r\n            row.forEach(e => {\r\n                if ( e instanceof Pickup && e.name === 'score') { world.scoreItems++; }\r\n                if ( e instanceof Door && e.secret === true) { world.secrets++; }\r\n            });\r\n\r\n            world.objects.push(row);\r\n\t\t}\r\n\r\n        // Connect related portals\r\n        portals.forEach((v,k) => {\r\n            const target = portals.get(v.target);\r\n            if ( target == null) {\r\n                throw new Error(`Unable to find Portal with id ${v.target}`);\r\n            }\r\n            \r\n            v.portal.connect(target.portal);\r\n        })\r\n\r\n        world.cacheDynamicObjects();\r\n        return world;\r\n\t}\r\n}","import { World } from \"../game/world/world\";\r\nimport { Dialog } from \"./interface/dialog\";\r\nimport { ResourceResolver } from \"./resource-resolver\";\r\nimport { Game } from \"../game/game\";\r\nimport { Panel } from \"./interface/panel\";\r\n\r\nexport class GuiManager {\r\n    resourceResolver: ResourceResolver;\r\n    parentElement: HTMLElement;\r\n    scoreElement: HTMLElement;\r\n\r\n    panel: Panel | null;\r\n    lastScore = -1;\r\n    texWidth = 64;\r\n    texHeight = 64;\r\n\r\n    constructor(resourceResolver: ResourceResolver, parent: HTMLElement) {\r\n        this.resourceResolver = resourceResolver;\r\n        this.parentElement = parent;\r\n        this.scoreElement = document.createElement('p');\r\n        this.scoreElement.classList.add('score');\r\n        this.parentElement.appendChild(this.scoreElement);\r\n    }\r\n\r\n    public enteredLevel(name: string, author: string | null) {\r\n        document.title = `WebLabyrinth - ${name}`;\r\n        let message = name;\r\n        if ( author != null) {\r\n            message =`<strong>${message}</strong><br>By ${author}`;\r\n        }\r\n        \r\n        this.addDialog(message);\r\n    }\r\n\r\n    public addDialog(message: string, sprite: number | null = null, world: World | null = null) {\r\n        if ( this.panel ) {\r\n            let oldElement = this.panel.element;\r\n            this.parentElement.removeChild(oldElement);\r\n        }\r\n\r\n        const element = document.createElement('div');\r\n        element.classList.add('panel');\r\n        element.classList.add('dialog');\r\n        const text = document.createElement('p');\r\n        text.innerHTML = message;\r\n\r\n        if ( sprite != null && world != null) {\r\n            element.appendChild(this.createSpriteCanvas(sprite, world));\r\n        }\r\n        \r\n        element.appendChild(text);\r\n        this.parentElement.appendChild(element);\r\n        this.panel = new Dialog(message, element, sprite);\r\n    }\r\n\r\n    public createEndScreen(game: Game, nextLevel: string | null) {\r\n        if ( this.panel ) {\r\n            this.parentElement.removeChild(this.panel.element);\r\n            this.panel = null;\r\n        }\r\n\r\n        const element = document.createElement('div');\r\n        element.classList.add('panel');\r\n        \r\n        const title = document.createElement('p');\r\n        title.classList.add('title');\r\n        title.innerText = \"Level complete!\";\r\n        element.appendChild(title);\r\n\r\n        // Level information\r\n        if ( game.world.name != null) {\r\n            const levelInfo = document.createElement('div');\r\n            levelInfo.classList.add('level-info');\r\n            element.appendChild(levelInfo);\r\n\r\n            const subtitle = document.createElement('p');\r\n            subtitle.classList.add('name');\r\n            subtitle.innerText = game.world.name;\r\n            levelInfo.appendChild(subtitle);\r\n\r\n            if ( game.world.author != null) {\r\n                const author = document.createElement('p');\r\n                author.classList.add('author');\r\n                author.innerText = game.world.author;\r\n                levelInfo.appendChild(author);\r\n            }\r\n        }\r\n\r\n        const scoreTable = document.createElement('table');\r\n        scoreTable.classList.add('stats');\r\n        const scoreRow = game.world.scoreItems > 0 ? `<tr><td>Score</td><td>${(game.player.scoreItemsFound / game.world.scoreItems )*100}%</td></tr>` : '';\r\n        const secretRow = game.world.secrets > 0 ? `<tr><td>Secrets</td><td>${(game.player.secretsFound / game.world.secrets)*100}%</td></tr>` : '';\r\n        scoreTable.innerHTML = `<tbody>${scoreRow}${secretRow}</tbody>`;\r\n        element.appendChild(scoreTable);\r\n        \r\n        const button = document.createElement('button');\r\n        button.classList.add('btn');\r\n\r\n        if ( nextLevel != null) {\r\n            button.innerText = 'Next level';\r\n            button.onclick = () => game.loadLevel(nextLevel);\r\n\r\n        } else {\r\n            button.innerText = \"Replay\";\r\n            button.onclick = () => game.loadLevel(game.world.url.toString());\r\n        }\r\n\r\n        element.appendChild(button);\r\n\r\n        this.panel = new Panel(element);\r\n        this.parentElement.appendChild(element);\r\n        button.focus();\r\n    }\r\n\r\n    public tick(game: Game, delta: number) {\r\n        if ( this.panel && this.panel instanceof Dialog) {\r\n            this.panel.addDelta(delta);\r\n            if ( this.panel.alive > 4 ) {\r\n                this.parentElement.removeChild(this.panel.element);\r\n                this.panel = null;\r\n            }\r\n        }\r\n\r\n        if ( game.player.score !== this.lastScore) {\r\n            this.lastScore = game.player.score;\r\n            this.scoreElement.innerText = `${this.lastScore}`.padStart(10, '0');\r\n        }\r\n    }\r\n\r\n    private createSpriteCanvas(sprite: number, world: World): HTMLCanvasElement {\r\n        const canvas = document.createElement('canvas');\r\n        canvas.width = this.texWidth;\r\n        canvas.height = this.texHeight;\r\n\r\n        const ctx = canvas.getContext('2d');\r\n        if ( ctx == null ) {\r\n            throw new Error(`Unable to create 2D context`);\r\n        }\r\n\r\n        const sheet = this.resourceResolver.getSprites(world);\r\n        ctx.drawImage(sheet, sprite*this.texWidth, 0, this.texWidth, this.texHeight, 0, 0, this.texWidth, this.texHeight);\r\n        return canvas;\r\n    }\r\n}","import { Vector } from \"../base/vector\";\r\n\r\nexport class Input {\r\n    public upPressed = false;\r\n    public downPressed = false;\r\n    public leftPressed = false;\r\n    public rightPressed = false;\r\n    public usePressed = false;\r\n\r\n    public leftMousePressed = false;\r\n    public previousLeftMousePressed = false;\r\n    public mouseDragStart: Vector | null = null;\r\n    public mousePosition = new Vector(0,0);\r\n    \r\n    public keyQueue = [];\r\n    \r\n    public get leftMouseUp(): boolean {\r\n        if ( this.previousLeftMousePressed) {\r\n            this.previousLeftMousePressed = false;\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public attachEventListeners(el: HTMLElement) {\r\n        el.addEventListener(\"keydown\", (e: KeyboardEvent) => {\r\n            if (e.key === \"ArrowLeft\") { this.leftPressed = true; }\r\n            else if (e.key === \"ArrowRight\") { this.rightPressed = true; }\r\n            else if (e.key === \"ArrowUp\") { this.upPressed = true; }\r\n            else if (e.key === \"ArrowDown\") { this.downPressed = true; }\r\n            else if (e.key === \" \" ) {this.usePressed = true;}\r\n            else { return; }\r\n\r\n            // Captured input does not bubble up\r\n            e.preventDefault();\r\n        });\r\n\r\n        el.addEventListener(\"keyup\", (e: KeyboardEvent) => {\r\n            if (e.key === \"ArrowLeft\") { this.leftPressed = false; }\r\n            else if (e.key === \"ArrowRight\") { this.rightPressed = false; }\r\n            else if (e.key === \"ArrowUp\") { this.upPressed = false; }\r\n            else if (e.key === \"ArrowDown\") { this.downPressed = false; }\r\n            else if (e.key === \" \" ) {this.usePressed = false; }\r\n            else if (e.key.length === 1 ) { this.keyQueue.push(e.key); }\r\n            else { return; }\r\n            \r\n            // Captured input does not bubble up\r\n            e.preventDefault();\r\n        });\r\n\r\n        el.addEventListener(\"mousedown\", (e: MouseEvent) => {\r\n            if (e.button === 0) {\r\n                const rect = el.getBoundingClientRect();\r\n                this.leftMousePressed = true;\r\n                this.mouseDragStart = new Vector(e.clientX - rect.left, e.clientY - rect.top);\r\n            }\r\n        });\r\n\r\n        el.addEventListener(\"mousemove\", (e: MouseEvent) => {\r\n            const rect = el.getBoundingClientRect();\r\n            this.mousePosition = new Vector(e.clientX - rect.left, e.clientY - rect.top);\r\n        })\r\n\r\n        el.addEventListener(\"mouseup\", (e: MouseEvent) => {\r\n            if ( e.button === 0) {\r\n                this.leftMousePressed = false;\r\n                this.previousLeftMousePressed = true;\r\n                this.mouseDragStart = null;\r\n            }\r\n        });\r\n\r\n        el.addEventListener(\"touchstart\", (e: TouchEvent) => {\r\n            this.leftMousePressed = true;\r\n            const rect = el.getBoundingClientRect();\r\n            const relX = e.changedTouches.item(0).clientX - rect.left;\r\n            const relY = e.changedTouches.item(0).clientY - rect.top;\r\n            this.mouseDragStart = new Vector(relX, relY);\r\n        });\r\n\r\n        el.addEventListener(\"touchmove\", (e: TouchEvent) => {\r\n            const rect = el.getBoundingClientRect();\r\n            const relX = e.changedTouches.item(0).clientX - rect.left;\r\n            const relY = e.changedTouches.item(0).clientY - rect.top;\r\n            this.mousePosition = new Vector(relX, relY);\r\n        });\r\n\r\n        el.addEventListener(\"touchend\", (e: TouchEvent) => {\r\n            this.leftMousePressed = false;\r\n            this.previousLeftMousePressed = true;\r\n            this.mouseDragStart = null;\r\n        });\r\n    }\r\n\r\n    public anyDirectional(): boolean {\r\n        if (this.upPressed || this.downPressed || this.leftPressed || this.rightPressed)\r\n            return true;\r\n\r\n        return false;\r\n    }\r\n\r\n    public clearQueue() {\r\n        this.keyQueue = [];\r\n    }\r\n}\r\n","import {Panel} from \"./panel\";\r\n\r\nexport class Dialog extends Panel {\r\n    public message: string;\r\n    public sprite: number | null;\r\n    public alive: number;\r\n\r\n    constructor(message: string, element: HTMLElement, sprite: number | null = null) {\r\n        super(element);\r\n        this.message = message;\r\n        this.sprite = sprite;\r\n        this.alive = 0;\r\n    }\r\n\r\n    public addDelta(delta: number) {\r\n        this.alive += delta;\r\n    }\r\n}","export class Panel {\r\n    public element: HTMLElement;\r\n\r\n    constructor(element: HTMLElement) {\r\n        this.element = element;\r\n    }\r\n}","import { Game } from \"../../game/game\";\r\nimport { Color } from \"../../base/color\";\r\nimport { Sprite } from \"../../game/world/sprite\";\r\nimport { ViewSprite } from \"./view-sprite\";\r\nimport { Door } from \"../../game/world/door\";\r\nimport { GameObject } from \"../../game/world/game-object\";\r\nimport { RayCast } from \"../../game/raycast\";\r\nimport { ResourceResolver } from \"../resource-resolver\";\r\nimport { Player } from \"../../game/player\";\r\n\r\n\r\nexport class Renderer {\r\n    screenWidth: number;\r\n\tscreenHeight: number;\r\n\tcanvas: HTMLCanvasElement;\r\n\r\n    resourceResolver: ResourceResolver;\r\n\tdrawContext: CanvasRenderingContext2D;\r\n    parentElement: HTMLElement;\r\n    mapVisible: boolean;\r\n\r\n    texWidth = 64;\r\n    texHeight = 64;\r\n\r\n    constructor(width: number, height: number, resResolver: ResourceResolver, canvasElement: HTMLCanvasElement, parent: HTMLElement) {\r\n        this.screenWidth = width;\r\n\t\tthis.screenHeight = height;\r\n\r\n        this.resourceResolver = resResolver;\r\n\t\tthis.canvas = canvasElement;\r\n\t\tthis.canvas.width = this.screenWidth;\r\n\t\tthis.canvas.height = this.screenHeight;\r\n\r\n        let context = this.canvas.getContext('2d');\r\n\t\tif ( context == null) {\r\n\t\t\tthrow new Error(\"Unable to get 2D rendering context from Canvas\");\r\n        }\r\n\r\n\t\tthis.drawContext = context;\r\n        this.drawContext.imageSmoothingEnabled = false;\r\n        this.parentElement = parent;\r\n    }\r\n\r\n    public toggleMap() {\r\n        this.mapVisible = !this.mapVisible;\r\n    }\r\n\r\n    public render(game: Game, delta: number) {\r\n        this.drawContext.fillStyle = \"#000\";\r\n        this.drawContext.fillRect(0,0,this.screenWidth, this.screenHeight);\r\n    \r\n        const textures = this.resourceResolver.getTextures(game.world);\r\n        const sprites = this.resourceResolver.getSprites(game.world);\r\n        \r\n        if ( textures.naturalWidth === 0 || textures.naturalHeight === 0 || \r\n            sprites.naturalWidth === 0  || sprites.naturalHeight === 0) {\r\n            this.drawContext.fillStyle = \"#fff\";\r\n            this.drawContext.font = \"30px Arial\";\r\n            this.drawContext.textAlign = \"center\";\r\n            this.drawContext.fillText(\"Loading textures...\", this.screenWidth/2, this.screenHeight/2);\r\n            return;\r\n        }\r\n\r\n        this.renderCeilingFloor(game);\r\n        this.renderWalls(game, textures, sprites);\r\n        this.renderOverlay(game.player);\r\n\r\n        if ( this.mapVisible ) {\r\n            this.renderMap(game);\r\n        }\r\n\r\n        this.renderInterface(game.player, sprites, delta);\r\n    }\r\n\r\n    private renderOverlay(player: Player) {\r\n        const perf = performance.now()\r\n        if ( perf - player.lastItem < 500 ) {\r\n            const factor = (1 - (perf - player.lastItem) / 500)*0.7;\r\n            this.drawContext.fillStyle = `rgba(255,255,255,${factor})`;\r\n            this.drawContext.fillRect(0, 0, this.screenWidth, this.screenHeight);\r\n        }\r\n    }\r\n\r\n    private renderInterface(player: Player, sprites: HTMLImageElement, delta: number) {\r\n        let left = 16;\r\n        let bottom = 16;\r\n\r\n        player.items.forEach(i => {\r\n            // Don't draw items we have none of, or who are in the special 'score' category\r\n            if ( i.amount < 1 || i.name === 'score' ) {\r\n                return;\r\n            }\r\n\r\n            const width = 48;\r\n            const y = this.screenHeight - (bottom+width);\r\n            for (let n = 0; n < i.amount; n++) {\r\n                this.drawContext.drawImage(sprites, i.sprite*this.texWidth, 0, this.texWidth, this.texHeight, left+(n*width/2), y, width, width);\r\n            }\r\n            bottom+=(width/2 + 8);\r\n        });\r\n    }\r\n\r\n    private renderCeilingFloor(game: Game) {\r\n        // Temporary implementation\r\n        this.drawContext.fillStyle = game.world.ceiling;\r\n        this.drawContext.fillRect(0, 0, this.screenWidth, this.screenHeight/2);\r\n\r\n        this.drawContext.fillStyle = game.world.floor;\r\n        this.drawContext.fillRect(0, this.screenHeight/2, this.screenWidth, this.screenHeight/2);\r\n    }\r\n\r\n    private renderWalls(game: Game, textures: HTMLImageElement, spriteTextures: HTMLImageElement) {\r\n        const pitch = 0;\r\n        const zBuffer: Array<number> = [];\r\n        zBuffer.fill(0, 0, this.screenWidth);\r\n        const sprites: Array<ViewSprite> = [];\r\n\r\n        for(var x = 0; x < this.screenWidth; x++) {\r\n            var cameraX = 2 * x / this.screenWidth - 1; // X coordinate in camera space\r\n            var ray = RayCast.ray(game.player.position, game.player.direction, game.player.plane, cameraX, game.world);\r\n            \r\n            ray.worldObject.seen = true;\r\n            ray.tilesPassed.forEach(t => {\r\n                if ( !(game.world.objects[t.y][t.x] instanceof GameObject)) {\r\n                    game.world.objects[t.y][t.x] = true;\r\n                }\r\n            });\r\n\r\n            if ( ray.sprites ) {\r\n                ray.sprites.forEach(sprite => {\r\n                    if ( sprites.findIndex(s => s.x.toFixed(3) === sprite.x.toFixed(3) && \r\n                        s.y.toFixed(3) === sprite.y.toFixed(3) && s.sprite === sprite.sprite) < 0) {\r\n                            sprite.gameObject.seen = true;\r\n                            sprites.push(sprite);\r\n                    }\r\n                })\r\n            }\r\n            \r\n            // Calculate height of line to draw on screen\r\n            var lineHeight = Math.floor(this.screenHeight / ray.perpWallDist);\r\n\r\n            // Calculate lowest and highest pixel to fill in current stripe\r\n            const drawStart = -lineHeight / 2 + this.screenHeight / 2 + pitch;\r\n            const drawEnd = lineHeight / 2 + this.screenHeight / 2 + pitch;\r\n\r\n            //x coordinate on the texture\r\n            var texX = ray.wallX * this.texWidth;\r\n            if(ray.side == 0 && ray.direction.x > 0) texX = this.texWidth - texX;\r\n            if(ray.side == 1 && ray.direction.y < 0) texX = this.texWidth - texX;\r\n            \r\n            if ( ray.worldObject instanceof Door && !ray.worldObject.block && !ray.inside ) { \r\n                if((ray.side == 0 && ray.direction.x > 0 )|| (ray.side == 1 && ray.direction.y < 0)) {\r\n                    texX += Math.floor(ray.worldObject.openAmount * this.texWidth);\r\n                } else {\r\n                    texX -= Math.floor(ray.worldObject.openAmount * this.texWidth);\r\n                }\r\n                \r\n            }\r\n\r\n            const textureStartX = Math.floor(this.texWidth+(ray.texture*this.texWidth)-texX);\r\n            this.drawContext.drawImage(textures, textureStartX, 0, 1, this.texHeight, x, drawStart, 1, drawEnd - drawStart);\r\n            if ( ray.side === 1 ) { \r\n                this.drawContext.strokeStyle = 'rgba(0,0,0,0.6)';\r\n                this.drawContext.beginPath();\r\n                this.drawContext.moveTo(x, drawStart);\r\n                this.drawContext.lineTo(x, drawEnd);\r\n                this.drawContext.stroke();\r\n            }\r\n\r\n            zBuffer[x] = ray.perpWallDist;\r\n        }\r\n\r\n        // Sort from farthest to closest\r\n        sprites.sort((a: ViewSprite, b: ViewSprite): number => {\r\n            if ( a.y === b.y) {\r\n                return Math.abs(a.x) > Math.abs(b.x) ? -1 : 1;\r\n            } else {\r\n                return Math.abs(a.y) > Math.abs(b.y) ? -1 : 1;\r\n            }\r\n        });\r\n        \r\n        \r\n        sprites.forEach(s => {\r\n            this.renderSpriteBillboard(s, game, zBuffer, pitch, spriteTextures);\r\n        });\r\n    }\r\n\r\n    private renderSpriteBillboard(sprite: ViewSprite, game: Game, zBuffer: Array<number>, pitch: number, texture: HTMLImageElement) {\r\n        const invDet = 1.0 / (game.player.plane.x * game.player.direction.y - game.player.direction.x * game.player.plane.y); //required for correct matrix multiplication\r\n\r\n        const transformX = invDet * (game.player.direction.y * sprite.x - game.player.direction.x * sprite.y);\r\n        const transformY = invDet * (-game.player.plane.y * sprite.x + game.player.plane.x * sprite.y); //this is actually the depth inside the screen, that what Z is in 3D\r\n\r\n        const spriteScreenX = Math.floor((this.screenWidth / 2) * (1 + transformX / transformY));\r\n\r\n        //calculate height of the sprite on screen\r\n        const spriteHeight = Math.abs(Math.floor(this.screenHeight / (transformY))); //using 'transformY' instead of the real distance prevents fisheye\r\n\r\n        //calculate width of the sprite\r\n        const spriteWidth = Math.abs(Math.floor(this.screenHeight / (transformY))) * sprite.scale;\r\n        var drawStartX = Math.floor(-spriteWidth / 2 + spriteScreenX);\r\n        if(drawStartX < 0) drawStartX = 0;\r\n        var drawEndX = spriteWidth / 2 + spriteScreenX;\r\n        if(drawEndX >= this.screenWidth) drawEndX = this.screenWidth - 1;\r\n\r\n        const startY = -((spriteHeight* sprite.scale)/2) + ((spriteHeight/2) - (spriteHeight * sprite.scale)/2) + (this.screenHeight / 2) + pitch;\r\n\r\n        //loop through every vertical stripe of the sprite on screen\r\n        for(var stripe = drawStartX; stripe < drawEndX; stripe++)\r\n        {\r\n            const texX = Math.floor((stripe - (-spriteWidth / 2 + spriteScreenX)) * this.texWidth / spriteWidth);\r\n            //the conditions in the if are:\r\n            //1) it's in front of camera plane so you don't see things behind you\r\n            //2) it's on the screen (left)\r\n            //3) it's on the screen (right)\r\n            //4) ZBuffer, with perpendicular distance\r\n            if(transformY > 0 && stripe > 0 && stripe < this.screenWidth && transformY < zBuffer[stripe]) {\r\n                // Ensure that we don't pick a pixel that's outside the tile, which may happen due to rounding with scaled sprites\r\n                let spriteStartX = Math.min((sprite.sprite * this.texWidth) + texX,(sprite.sprite * this.texWidth) + this.texWidth);\r\n                spriteStartX = Math.max(spriteStartX, (sprite.sprite * this.texWidth));\r\n\r\n                this.drawContext.drawImage(texture, spriteStartX, 0, 1, this.texHeight, stripe, startY, 1, spriteHeight*sprite.scale);\r\n                zBuffer[stripe] = transformY;\r\n            }\r\n        }\r\n    }\r\n\r\n    private renderMap(game: Game) {\r\n        const blockSize = 8;\r\n\r\n        for (var y = 0; y < game.world.objects.length; y++) {\r\n            for (var x = 0; x < game.world.objects[y].length; x++) {\r\n                const obj = game.world.objects[y][x];\r\n                if ( ( !(obj instanceof GameObject) && obj === false) || (obj instanceof GameObject && !obj.seen)) { continue; }\r\n\r\n                var color: Color;\r\n                if ( obj instanceof GameObject) { color = this.getBlockColor(obj.texture+1) }\r\n                else { \r\n                    color = new Color(0, 0, 0);\r\n                }\r\n\r\n                this.drawContext.fillStyle = \"hsl(\" + color.hue + \",\" + color.saturation + \"%,\" + color.lightness + \"%)\";\r\n\r\n                if ( obj instanceof Sprite ) {\r\n                    this.drawContext.fillStyle = '#000';\r\n                    this.drawContext.fillRect(x*blockSize, y*blockSize, blockSize, blockSize);\r\n\r\n                    if ( obj.collidable()) {\r\n                        this.drawContext.strokeStyle = '#f77';\r\n                        this.drawCircle((x+0.5)*blockSize, (y+0.5)*blockSize, blockSize/2);\r\n                    }\r\n                } else if ( obj instanceof Door && !obj.block ) {\r\n                    var neighbour: GameObject | boolean;\r\n                    if ( x > 0) {\r\n                        neighbour = game.world.objects[y][x-1];\r\n                    } else {\r\n                        neighbour = game.world.objects[y][x+1];\r\n                    }\r\n                    if ( neighbour instanceof GameObject ) { this.drawContext.fillRect(x*blockSize, (y+0.25)*blockSize, blockSize, blockSize/2); }\r\n                    else { this.drawContext.fillRect((x+0.25)*blockSize, y*blockSize, blockSize/2, blockSize); }\r\n                } else if ( obj instanceof Door && obj.block && !obj.closed) {\r\n                    this.drawContext.fillStyle = \"#000\";\r\n                    this.drawContext.fillRect(x*blockSize, y*blockSize, blockSize, blockSize);\r\n                } else {\r\n                    this.drawContext.fillRect(x*blockSize, y*blockSize, blockSize, blockSize);\r\n                }\r\n                \r\n                if ( game.currentTileX === x && game.currentTileY === y) {\r\n                    this.drawContext.strokeStyle = '#f0f';\r\n                    this.drawContext.strokeRect(x*blockSize, y*blockSize, blockSize, blockSize);\r\n                }\r\n            }\r\n        }\r\n\r\n        const playerX = game.player.position.x*blockSize;\r\n        const playerY = game.player.position.y*blockSize;\r\n        this.drawContext.strokeStyle = \"#fff\";\r\n        this.drawCircle(playerX, playerY, blockSize/2);\r\n        this.drawContext.beginPath();\r\n        this.drawContext.moveTo(playerX, playerY);\r\n        this.drawContext.lineTo(playerX + game.player.direction.x*blockSize, playerY + game.player.direction.y*blockSize);\r\n        this.drawContext.stroke();\r\n    }\r\n\r\n    private drawCircle(x: number, y: number, r: number) {\r\n        this.drawContext.beginPath();\r\n        this.drawContext.arc(x, y, r, 0, 2 * Math.PI);\r\n        this.drawContext.stroke(); \r\n    }\r\n\r\n    private getBlockColor(blockId: number): Color {\r\n        var hue = 0;\r\n        var saturation = 100;\r\n        var lightness = 50\r\n\r\n        switch(blockId) {\r\n            case 0: // Empty\r\n                saturation = 0;\r\n                lightness = 0;\r\n                break;\r\n            \r\n            default:\r\n                hue = blockId*40;\r\n                break; \r\n        }\r\n\r\n        return new Color(hue, saturation, lightness);\r\n    }\r\n}\r\n","import { GameObject } from \"../../game/world/game-object\";\r\n\r\nexport class ViewSprite {\r\n    public x: number;\r\n    public y: number;\r\n    public sprite: number;\r\n    public scale: number;\r\n    public gameObject: GameObject;\r\n\r\n    constructor(x: number, y: number, sprite: number, gameObject: GameObject, scale: number = 1) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.sprite = sprite;\r\n        this.scale = scale;\r\n        this.gameObject = gameObject;\r\n    }\r\n\r\n    distanceTo(x: number, y: number) : number {\r\n        return ((x - this.x) * (x - this.x) + (y - this.y) * (y - this.y));\r\n    }\r\n}","import { World } from \"../game/world/world\";\r\n\r\nexport class ResourceResolver {\r\n    public parentElement: HTMLElement;\r\n    public images: Map<string, HTMLImageElement>;\r\n\r\n    constructor(parent: HTMLElement) {\r\n        this.parentElement = parent;\r\n        this.images = new Map<string, HTMLImageElement>();\r\n    }\r\n\r\n    getTextures(world: World): HTMLImageElement {\r\n        let textureImage = this.images.get(world.textures.href);\r\n        if ( textureImage != null ) {\r\n            return textureImage;\r\n        }\r\n\r\n        return this.addResource(world.textures.href);\r\n    }\r\n\r\n    getSprites(world: World): HTMLImageElement {\r\n        let spriteImage = this.images.get(world.sprites.href);\r\n        if ( spriteImage != null ) {\r\n            return spriteImage;\r\n        }\r\n\r\n        return this.addResource(world.sprites.href);\r\n    }\r\n\r\n    private addResource(url: string): HTMLImageElement {\r\n        const img = document.createElement('img');\r\n        img.src = url;\r\n        img.classList.add('hidden');\r\n        this.parentElement.appendChild(img);\r\n        this.images.set(url, img);\r\n        return img;\r\n    }\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { Game } from \"./ts/game/game\";\r\nimport { ResourceResolver } from \"./ts/presentation/resource-resolver\";\r\nimport { Input } from \"./ts/presentation/input\";\r\nimport { Renderer } from \"./ts/presentation/rendering/renderer\";\r\nimport { GuiManager } from \"./ts/presentation/gui-manager\";\r\n\r\nconst input = new Input();\r\ninput.attachEventListeners(document.getElementsByTagName('body')[0]);\r\n\r\nconst width = 1024;\r\nconst height = 768;\r\nconst canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\r\nconst depth = document.getElementById(\"depth\") as HTMLCanvasElement;\r\nconst parent = document.getElementById(\"client-parent\") as HTMLElement;\r\nparent.style.maxWidth = `${width}px`;\r\n\r\nconst resources = new ResourceResolver(parent);\r\nconst renderer = new Renderer(width, height, resources, canvas, depth);\r\nconst guiManager = new GuiManager(resources, parent);\r\nconst game = new Game(renderer, input, guiManager);\r\n\r\nvar url = new URL(\"./assets/room.json\", document.baseURI).href; // Local room is fallback\r\n\r\nconst params = new URLSearchParams(window.location.search);\r\nif ( params.get('url') != null) {\r\n    url = params.get('url');\r\n} \r\n\r\ngame.loadLevel(url);\r\n"],"names":["Color","hue","saturation","lightness","this","x","y","add","vector","Vector","multiply","scalar","subtract","rotateBy","degrees","Math","PI","cos","sin","round","magnitude","sqrt","setLength","length","mag","normalize","mgn","dot","cross","rotationDiff","atan2","game","gui","guiManager","handle","event","GameEventHandler","GameEvent","itemName","item","handler","sprite","world","items","get","texture","addDialog","ItemConsumedEvent","ItemRequiredEvent","renderer","input","paused","currentTileX","currentTileY","currentTime","previousTime","player","Player","events","Array","loadLevel","urlString","url","URL","console","log","href","fetch","method","mode","then","response","ok","Error","json","level","warnings","Level","validate","warn","name","enteredLevel","author","initialize","World","from","oldScore","score","playerStart","playerRotation","tick","levelEnd","nextLevel","createEndScreen","performance","now","delta","gameStep","step","render","forEach","e","window","requestAnimationFrame","bind","addEvent","push","keyQueue","find","k","toggleMap","clearQueue","usePressed","leftMouseUp","ray","RayCast","position","direction","plane","hit","perpWallDist","worldObject","Door","Exit","interact","anyDirectional","mouseDragStart","movement","getMovementFromInput","newPlayerPos","objects","currentTile","nextTile","floor","rotationOffset","GameObject","collidable","Portal","targetPortal","targetDirection","targetPosition","nudge","Pickup","onPickup","lastItem","leftPressed","rightPressed","xVel","yVel","upPressed","movementSpeed","downPressed","mousePosition","forward","min","max","Game","Item","amount","format","supportedFormat","resources","room","concat","Resources","Room","textures","sprites","ceiling","tiles","tilesWidth","debug","secretsFound","scoreItemsFound","RayCastResult","originPos","originDir","originPlane","cameraX","stopOnSprite","startLength","maxLength","stepX","stepY","sideDistX","sideDistY","rayDirX","rayDirY","mapX","mapY","deltaDistX","abs","deltaDistY","side","texNum","wallX","wallXOffset","wallYOffset","inside","passed","Sprite","viewSprite","ViewSprite","scale","findIndex","v","block","openAmount","perpendicularDistance","newPos","newDir","newPlane","castResult","s","spritePos","gameObject","tilesPassed","result","map","pos","wallOffset","rayDir","secret","key","unlockTexture","closed","openTime","unlock","keyIndex","i","seen","existing","connect","portal","distanceBetween","otherX","otherY","scoreItems","secrets","dynamicObjects","Map","o","cacheDynamicObjects","splice","obj","pathParts","pathname","split","basePath","join","origin","portals","row","tile","type","dir","target","set","pickup","resourceResolver","parent","lastScore","texWidth","texHeight","parentElement","scoreElement","document","createElement","classList","appendChild","title","message","panel","oldElement","element","removeChild","text","innerHTML","createSpriteCanvas","Dialog","innerText","levelInfo","subtitle","scoreTable","scoreRow","secretRow","button","onclick","toString","Panel","focus","addDelta","alive","padStart","canvas","width","height","ctx","getContext","sheet","getSprites","drawImage","GuiManager","leftMousePressed","previousLeftMousePressed","attachEventListeners","el","addEventListener","preventDefault","rect","getBoundingClientRect","clientX","left","clientY","top","relX","changedTouches","relY","Input","resResolver","canvasElement","screenWidth","screenHeight","context","drawContext","imageSmoothingEnabled","mapVisible","fillStyle","fillRect","getTextures","naturalWidth","naturalHeight","font","textAlign","fillText","renderCeilingFloor","renderWalls","renderOverlay","renderMap","renderInterface","perf","factor","bottom","n","spriteTextures","zBuffer","fill","t","toFixed","lineHeight","drawStart","drawEnd","texX","textureStartX","strokeStyle","beginPath","moveTo","lineTo","stroke","sort","a","b","renderSpriteBillboard","pitch","invDet","transformX","transformY","spriteScreenX","spriteHeight","spriteWidth","drawStartX","drawEndX","startY","stripe","spriteStartX","color","getBlockColor","drawCircle","blockSize","strokeRect","playerX","playerY","r","arc","blockId","Renderer","distanceTo","images","textureImage","addResource","spriteImage","img","src","ResourceResolver","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","call","getElementsByTagName","getElementById","depth","style","maxWidth","baseURI","params","URLSearchParams","location","search"],"sourceRoot":""}