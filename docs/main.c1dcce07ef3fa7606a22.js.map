{"version":3,"file":"main.c1dcce07ef3fa7606a22.js","mappings":"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","sources":["webpack://weblabyrinth/./src/client/color.ts","webpack://weblabyrinth/./src/client/game.ts","webpack://weblabyrinth/./src/client/input.ts","webpack://weblabyrinth/./src/client/player.ts","webpack://weblabyrinth/./src/client/raycast.ts","webpack://weblabyrinth/./src/client/rendering/renderer.ts","webpack://weblabyrinth/./src/client/rendering/view-sprite.ts","webpack://weblabyrinth/./src/client/vector.ts","webpack://weblabyrinth/./src/client/world/door.ts","webpack://weblabyrinth/./src/client/world/game-object.ts","webpack://weblabyrinth/./src/client/world/sprite.ts","webpack://weblabyrinth/./src/client/world/world.ts","webpack://weblabyrinth/webpack/bootstrap","webpack://weblabyrinth/./src/index.ts"],"sourcesContent":["export class Color\r\n{\r\n    hue: number;\r\n    saturation: number;\r\n    lightness: number;\r\n    \r\n    constructor(hue: number, saturation: number, lightness: number) {\r\n        this.hue = hue;\r\n        this.saturation = saturation;\r\n        this.lightness = lightness;\r\n    }\r\n}","import { Input } from './input';\r\nimport { Player } from './player';\r\nimport { Renderer } from './rendering/renderer';\r\nimport { World } from './world/world';\r\nimport { Vector } from './vector';\r\nimport { RayCast } from \"./raycast\";\r\nimport { Door } from './world/door';\r\nimport { Interactable } from './world/interactable';\r\n\r\nexport class Game {\r\n\tpublic readonly textureLimit: number = 16;\r\n\r\n    public world: World;\r\n\r\n\tplayer: Player;\r\n\tinput: Input;\r\n\trenderer: Renderer;\r\n\t\r\n\tcurrentTileX = 0;\r\n\tcurrentTileY = 0;\r\n\r\n\tcurrentTime = 0;\r\n\tpreviousTime = 0;\r\n\r\n\tconstructor(renderer: Renderer, input: Input) {\r\n\t\tthis.renderer = renderer;\r\n\t\tthis.input = input;\r\n\t\tthis.player = new Player(17, 19);\r\n\t}\r\n\r\n\tpublic load(json: any) {\r\n\t\tthis.world = World.from(json as number[][], this.textureLimit);\r\n\t}\r\n\r\n\t/**\r\n\t * Progresses the game by 1 step, and schedules the next step\r\n\t */\r\n\tpublic tick() {\r\n\t\tif (this.previousTime=== 0 ) {\r\n\t\t\tthis.previousTime = performance.now();\r\n\t\t} else {\r\n\t\t\tthis.previousTime = this.currentTime;\r\n\t\t}\r\n\r\n\t\tthis.currentTime = performance.now();\r\n\r\n\t\tconst delta = (this.currentTime - this.previousTime)/1000;\r\n\t\tthis.gameStep(delta);\r\n\t\tthis.world.step(delta);\r\n\t\tthis.renderer.render(this);\r\n\r\n\t\twindow.requestAnimationFrame(this.tick.bind(this));\r\n\t}\r\n\r\n\tprivate gameStep(delta: number) {\r\n\t\tif ( this.input.keyQueue.length > 0) {\r\n\t\t\tif ( this.input.keyQueue.find((k) => k === 'm') != null) {\r\n\t\t\t\tthis.renderer.toggleMap();\r\n\t\t\t}\r\n\r\n\t\t\tthis.input.clearQueue();\r\n\t\t}\r\n\r\n\t\t// Interact with doors\r\n\t\tif ( this.input.usePressed || this.input.leftMouseUp ) {\r\n\t\t\tconst ray = RayCast.ray(this.player.position, this.player.direction, this.player.plane, 0, this.world);\r\n\t\t\tif ( ray.hit && ray.perpWallDist < 2 ) {\r\n\t\t\t\tif ( ray.worldObject instanceof Door) {\r\n\t\t\t\t\tray.worldObject.interact();\r\n\t\t\t\t}\r\n\t\t\t} \r\n\t\t}\r\n\r\n\t\tif ( !this.input.anyDirectional() && this.input.mouseDragStart == null ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tvar movement = this.getMovementFromInput();\r\n\t\tif ( movement.x === 0 && movement.y === 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst newPlayerPos = this.player.position.add(movement);\r\n\r\n\t\t// Out of bounds\r\n\t\tif (newPlayerPos.y > this.world.objects.length || newPlayerPos.y < 0 || \r\n\t\t\tnewPlayerPos.x > this.world.objects[0].length || newPlayerPos.x < 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.currentTileX = Math.floor(newPlayerPos.x);\r\n\t\tthis.currentTileY = Math.floor(newPlayerPos.y);\r\n\r\n\t\tconst currentTile = this.world.objects[this.currentTileY][this.currentTileX];\r\n\t\tif (currentTile != null && currentTile.collidable()) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.player.position = newPlayerPos;\r\n\t}\r\n\r\n\tprivate getMovementFromInput(): Vector {\r\n\t\tif ( this.input.leftPressed) {\r\n\t\t\tthis.player.rotateBy(1.5);\r\n\t\t} else if ( this.input.rightPressed) {\r\n\t\t\tthis.player.rotateBy(-1.5);\r\n\t\t}\r\n\r\n\t\tlet xVel = 0;\r\n\t\tlet yVel = 0;\r\n\t\tif ( this.input.upPressed ) {\r\n\t\t\tyVel += this.player.direction.y * this.player.movementSpeed;\r\n\t\t\txVel += this.player.direction.x * this.player.movementSpeed;\r\n\t\t} else if (this.input.downPressed) {\r\n\t\t\tyVel -= this.player.direction.y * this.player.movementSpeed;\r\n\t\t\txVel -= this.player.direction.x * this.player.movementSpeed;\r\n\t\t} \r\n\r\n\t\tif ( this.input.mouseDragStart != null) {\r\n\t\t\tthis.player.rotateBy((this.input.mouseDragStart.x - this.input.mousePosition.x)*0.01);\r\n\t\t\tconst forward = (this.input.mouseDragStart.y - this.input.mousePosition.y) * 0.0005;\r\n\t\t\tif ( forward > 0.01 ) {\r\n\t\t\t\tyVel = this.player.direction.y * Math.min(forward, this.player.movementSpeed)\r\n\t\t\t\txVel = this.player.direction.x * Math.min(forward, this.player.movementSpeed)\r\n\t\t\t} else if (forward < -0.01) {\r\n\t\t\t\tyVel = this.player.direction.y * Math.max(forward, -this.player.movementSpeed)\r\n\t\t\t\txVel = this.player.direction.x * Math.max(forward, -this.player.movementSpeed)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn new Vector(xVel, yVel);\r\n\t}\r\n};","import { Vector } from \"./vector\";\r\n\r\nexport class Input {\r\n    public upPressed = false;\r\n    public downPressed = false;\r\n    public leftPressed = false;\r\n    public rightPressed = false;\r\n    public usePressed = false;\r\n\r\n    public leftMousePressed = false;\r\n    public previousLeftMousePressed = false;\r\n    public mouseDragStart: Vector | null = null;\r\n    public mousePosition = new Vector(0,0);\r\n    \r\n    public keyQueue = [];\r\n    \r\n    public get leftMouseUp(): boolean {\r\n        if ( this.previousLeftMousePressed) {\r\n            this.previousLeftMousePressed = false;\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public attachEventListeners(el: HTMLElement) {\r\n        el.addEventListener(\"keydown\", (e: KeyboardEvent) => {\r\n            if (e.key === \"ArrowLeft\") { this.leftPressed = true; };\r\n            if (e.key === \"ArrowRight\") { this.rightPressed = true; };\r\n            if (e.key === \"ArrowUp\") { this.upPressed = true; };\r\n            if (e.key === \"ArrowDown\") { this.downPressed = true; };\r\n            if (e.key === \" \" ) {this.usePressed = true;}\r\n        });\r\n\r\n        el.addEventListener(\"keyup\", (e: KeyboardEvent) => {\r\n            if (e.key === \"ArrowLeft\") { this.leftPressed = false; };\r\n            if (e.key === \"ArrowRight\") { this.rightPressed = false; };\r\n            if (e.key === \"ArrowUp\") { this.upPressed = false; };\r\n            if (e.key === \"ArrowDown\") { this.downPressed = false; };\r\n            if (e.key === \" \" ) {this.usePressed = false;}\r\n            if (e.key.length === 1 ) { this.keyQueue.push(e.key); }\r\n        });\r\n\r\n        el.addEventListener(\"mousedown\", (e: MouseEvent) => {\r\n            if (e.button === 0) {\r\n                const rect = el.getBoundingClientRect();\r\n                this.leftMousePressed = true;\r\n                this.mouseDragStart = new Vector(e.clientX - rect.left, e.clientY - rect.top);\r\n            }\r\n        });\r\n\r\n        el.addEventListener(\"mousemove\", (e: MouseEvent) => {\r\n            const rect = el.getBoundingClientRect();\r\n            this.mousePosition = new Vector(e.clientX - rect.left, e.clientY - rect.top);\r\n        })\r\n\r\n        el.addEventListener(\"mouseup\", (e: MouseEvent) => {\r\n            if ( e.button === 0) {\r\n                this.leftMousePressed = false;\r\n                this.previousLeftMousePressed = true;\r\n                this.mouseDragStart = null;\r\n            }\r\n        });\r\n\r\n        el.addEventListener(\"touchstart\", (e: TouchEvent) => {\r\n            this.leftMousePressed = true;\r\n            const rect = el.getBoundingClientRect();\r\n            const relX = e.changedTouches.item(0).clientX - rect.left;\r\n            const relY = e.changedTouches.item(0).clientY - rect.top;\r\n            this.mouseDragStart = new Vector(relX, relY);\r\n        });\r\n\r\n        el.addEventListener(\"touchmove\", (e: TouchEvent) => {\r\n            const rect = el.getBoundingClientRect();\r\n            const relX = e.changedTouches.item(0).clientX - rect.left;\r\n            const relY = e.changedTouches.item(0).clientY - rect.top;\r\n            this.mousePosition = new Vector(relX, relY);\r\n        });\r\n\r\n        el.addEventListener(\"touchend\", (e: TouchEvent) => {\r\n            this.leftMousePressed = false;\r\n            this.mouseDragStart = null;\r\n        });\r\n    }\r\n\r\n    public anyDirectional(): boolean {\r\n        if (this.upPressed || this.downPressed || this.leftPressed || this.rightPressed)\r\n            return true;\r\n\r\n        return false;\r\n    }\r\n\r\n    public clearQueue() {\r\n        this.keyQueue = [];\r\n    }\r\n}\r\n","import { Vector } from './vector';\r\n\r\nexport class Player {\r\n    movementSpeed: number = 0.05;\r\n\r\n    position: Vector;\r\n    direction: Vector;\r\n    plane: Vector;\r\n    \r\n    constructor(x: number, y: number) {\r\n        this.position = new Vector(x, y);\r\n        this.direction = new Vector(0, -1);\r\n        this.plane = new Vector(0.66, 0);\r\n    }\r\n\r\n    rotateBy(degrees: number) {\r\n        this.direction.rotateBy(degrees);\r\n        this.plane.rotateBy(degrees);\r\n    }\r\n}","import { World } from \"./world/world\";\r\nimport { Vector } from \"./vector\";\r\nimport { ViewSprite } from \"./rendering/view-sprite\";\r\nimport { Sprite } from \"./world/sprite\";\r\nimport { Door } from \"./world/door\";\r\nimport { GameObject } from \"./world/game-object\";\r\n\r\nexport class RayCastResult {\r\n    public sprites: Array<ViewSprite>;\r\n    public perpWallDist: number;\r\n    public worldObject: GameObject | null;\r\n    public inside: boolean;\r\n    public hit: boolean;\r\n    public side: number;\r\n    public texture: number;\r\n    public direction: Vector;\r\n}\r\n\r\nexport class RayCast {\r\n    public static ray(originPos: Vector, originDir: Vector, originPlane: Vector, cameraX: number, world: World, stopOnSprite: boolean = false): RayCastResult {\r\n        var rayDirX = originDir.x + originPlane.x * cameraX;\r\n        var rayDirY = originDir.y + originPlane.y * cameraX;\r\n\r\n        // Which box of the map we're in\r\n        var mapX = Math.floor(originPos.x);\r\n        var mapY = Math.floor(originPos.y);\r\n\r\n        // Length of ray from one X or Y-side to next X or Y-side\r\n        var deltaDistX = Math.abs(1/rayDirX);\r\n        var deltaDistY = Math.abs(1/rayDirY);\r\n\r\n        // What direction to step in X or Y-direction (either +1 or -1)\r\n        var stepX;\r\n        var stepY;\r\n\r\n        // Length of array from current position to next X or Y-side\r\n        var sideDistX;\r\n        var sideDistY;\r\n\r\n        // Calculate step and initial sideDist\r\n        if (rayDirX < 0)\r\n        {\r\n            stepX = -1;\r\n            sideDistX = (originPos.x - mapX) * deltaDistX;\r\n        }\r\n        else\r\n        {\r\n            stepX = 1;\r\n            sideDistX = (mapX + 1 - originPos.x) * deltaDistX;\r\n        }\r\n        if (rayDirY < 0)\r\n        {\r\n            stepY = -1;\r\n            sideDistY = (originPos.y - mapY) * deltaDistY;\r\n        }\r\n        else\r\n        {\r\n            stepY = 1;\r\n            sideDistY = (mapY + 1 - originPos.y) * deltaDistY;\r\n        }\r\n\r\n        var hit = 0;\r\n        var wallXOffset = 0;\r\n        var wallYOffset = 0;\r\n        var inside = false\r\n\r\n        const sprites: Array<ViewSprite> = [];\r\n        var wallX: number;\r\n        var side: number;\r\n        var texNum: number;\r\n        var worldObject: GameObject;\r\n        \r\n        // Perform DDA\r\n        while (hit === 0)\r\n        {\r\n            // Jump to next map square, OR in X-direction, OR in Y-direction\r\n            if (sideDistX < sideDistY)\r\n            {\r\n                sideDistX += deltaDistX;\r\n                mapX += stepX;\r\n                side = 0;\r\n            }\r\n            else\r\n            {\r\n                sideDistY += deltaDistY;\r\n                mapY += stepY;\r\n                side = 1;\r\n            }\r\n            // Check if ray has hit a wall\r\n            worldObject = world.objects[mapY][mapX];\r\n            if ( worldObject == null) continue;\r\n\r\n            if ( worldObject instanceof Sprite ) {\r\n                var viewSprite = new ViewSprite(mapX+0.5, mapY+0.5, worldObject.texture);\r\n                if ( sprites.findIndex(v => v.x === viewSprite.x && v.y === viewSprite.y) < 0) {\r\n                    sprites.push(viewSprite);\r\n                }\r\n                if ( stopOnSprite ) {\r\n                    hit = 1;\r\n                }\r\n                continue;\r\n            } else if ( worldObject instanceof Door) {\r\n                texNum = worldObject.texture;\r\n                hit = 1;\r\n                if (side == 1) {\r\n                    wallYOffset = 0.5 * stepY;\r\n                    perpWallDist = (mapY - originPos.y + wallYOffset + (1 - stepY) / 2) / rayDirY;\r\n                    if (sideDistY - (deltaDistY/2) < sideDistX) { //If ray hits offset wall\r\n                        wallX = originPos.x + perpWallDist * rayDirX;\r\n                        wallX -= Math.floor(wallX);\r\n                        if ( wallX <= worldObject.openAmount){\r\n                            hit = 0; //Continue raycast for open/opening doors\r\n                            wallYOffset = 0;\r\n                        }\r\n                    } else {\r\n                        mapX += stepX;\r\n                        side = 0;\r\n                        inside =  true;\r\n                        wallYOffset = 0;\r\n                        texNum = world.objects[mapY][mapX].texture;\r\n                    }\r\n                } else { //side == 0\r\n                    wallXOffset = 0.5 * stepX;\r\n                    perpWallDist  = (mapX - originPos.x + wallXOffset + (1 - stepX) / 2) / rayDirX;\r\n                    if (sideDistX - (deltaDistX/2) < sideDistY) {\r\n                        wallX = originPos.y + perpWallDist * rayDirY;\r\n                        wallX -= Math.floor(wallX);\r\n                        if ( wallX < worldObject.openAmount) {\r\n                            hit = 0;\r\n                            wallXOffset = 0;\r\n                        }\r\n                    } else {\r\n                        mapY += stepY;\r\n                        side = 1;\r\n                        inside = true;\r\n                        wallXOffset = 0;\r\n                        texNum = world.objects[mapY][mapX].texture;\r\n                    }\r\n                }\r\n            } else {\r\n                texNum = worldObject.texture;\r\n                hit = 1;\r\n            }\r\n        }\r\n\r\n        var perpWallDist;\r\n\r\n        // Calculate distance projected on camera direction (Euclidean distance will give fisheye effect!)\r\n        if (side === 0) perpWallDist = (mapX - originPos.x + wallXOffset + (1 - stepX) / 2) / rayDirX;\r\n        else           perpWallDist = (mapY - originPos.y + wallYOffset + (1 - stepY) / 2) / rayDirY;\r\n\r\n            var result = new RayCastResult();\r\n            result.sprites = sprites;\r\n            result.hit = hit === 1;\r\n            result.side = side;\r\n            result.perpWallDist = perpWallDist;\r\n            result.inside = inside;\r\n            result.worldObject = worldObject;\r\n            result.texture = texNum;\r\n            result.direction = new Vector(rayDirX, rayDirY);\r\n            return result;\r\n    }\r\n}","import { Game } from \"../game\";\r\nimport { Color } from \"../color\";\r\nimport { Sprite } from \"../world/sprite\";\r\nimport { ViewSprite } from \"./view-sprite\";\r\nimport { Door } from \"../world/door\";\r\nimport { GameObject } from \"../world/game-object\";\r\nimport { RayCast } from \"../raycast\";\r\n\r\nexport class Renderer {\r\n    screenWidth: number;\r\n\tscreenHeight: number;\r\n\tcanvas: HTMLCanvasElement;\r\n\r\n\tdrawContext: CanvasRenderingContext2D;\r\n    depthContext: CanvasRenderingContext2D;\r\n    mapVisible: boolean;\r\n    textures: HTMLImageElement;\r\n    sprites: HTMLImageElement;\r\n\r\n    texWidth = 64;\r\n    texHeight = 64;\r\n\r\n    constructor(width: number, height: number, canvasElement: HTMLCanvasElement, textures: HTMLImageElement, sprites: HTMLImageElement,\r\n        depthBuffer?: HTMLCanvasElement) {\r\n        this.screenWidth = width;\r\n\t\tthis.screenHeight = height;\r\n\r\n        this.textures = textures;\r\n        this.sprites = sprites;\r\n\t\tthis.canvas = canvasElement;\r\n\t\tthis.canvas.width = this.screenWidth;\r\n\t\tthis.canvas.height = this.screenHeight;\r\n\r\n        let context = this.canvas.getContext('2d');\r\n\t\tif ( context == null) {\r\n\t\t\tthrow new Error(\"Unable to get 2D rendering context from Canvas\");\r\n        }\r\n\r\n\t\tthis.drawContext = context;\r\n        this.drawContext.imageSmoothingEnabled = false;\r\n\r\n        if ( depthBuffer != null) {\r\n            this.depthContext = depthBuffer.getContext('2d');\r\n        }\r\n    }\r\n\r\n    public toggleMap() {\r\n        this.mapVisible = !this.mapVisible;\r\n    }\r\n\r\n    public render(game: Game) {\r\n        this.drawContext.fillStyle = \"#000\";\r\n        this.drawContext.fillRect(0,0,this.screenWidth, this.screenHeight);\r\n    \r\n        this.renderCeilingFloor(game);\r\n        this.renderWalls(game);\r\n\r\n        if ( this.mapVisible ) {\r\n            this.renderMap(game);\r\n        }\r\n    }\r\n\r\n    private renderCeilingFloor(game: Game) {\r\n        // Temporary implementation\r\n        var ceilColor = this.getBlockColor(game.world.ceiling);\r\n        this.drawContext.fillStyle = \"hsl(\" + ceilColor.hue + \",\" + ceilColor.saturation + \"%,\" + ceilColor.lightness/2 + \"%)\";\r\n        this.drawContext.fillRect(0, 0, this.screenWidth, this.screenHeight/2);\r\n\r\n        var floorColor = this.getBlockColor(game.world.floor);\r\n        this.drawContext.fillStyle = \"hsl(\" + floorColor.hue + \",\" + floorColor.saturation + \"%,\" + floorColor.lightness/4 + \"%)\";\r\n        this.drawContext.fillRect(0, this.screenHeight/2, this.screenWidth, this.screenHeight/2);\r\n    }\r\n\r\n    private renderWalls(game: Game) {\r\n        const pitch = 0;\r\n        const zBuffer: Array<number> = [];\r\n        zBuffer.fill(0, 0, this.screenWidth);\r\n        const sprites: Array<ViewSprite> = [];\r\n\r\n        for(var x = 0; x < this.screenWidth; x++) {\r\n            var cameraX = 2 * x / this.screenWidth - 1; // X coordinate in camera space\r\n            var ray = RayCast.ray(game.player.position, game.player.direction, game.player.plane, cameraX, game.world);\r\n\r\n            ray.sprites.forEach(sprite => {\r\n                if ( sprites.findIndex(s => s.x === sprite.x && s.y === sprite.y && s.sprite === sprite.sprite) < 0) {\r\n                    sprites.push(sprite);\r\n                }\r\n            })\r\n\r\n            // Calculate height of line to draw on screen\r\n            var lineHeight = Math.floor(this.screenHeight / ray.perpWallDist);\r\n\r\n            // Calculate lowest and highest pixel to fill in current stripe\r\n            const drawStart = -lineHeight / 2 + this.screenHeight / 2 + pitch;\r\n            const drawEnd = lineHeight / 2 + this.screenHeight / 2 + pitch;\r\n\r\n            var wallX;\r\n            if (ray.side == 0) wallX = game.player.position.y + ray.perpWallDist * ray.direction.y;\r\n            else           wallX = game.player.position.x + ray.perpWallDist * ray.direction.x;\r\n            wallX -= Math.floor(wallX);\r\n\r\n            //x coordinate on the texture\r\n            var texX = wallX * this.texWidth;\r\n            if(ray.side == 0 && ray.direction.x > 0) texX = this.texWidth - texX;\r\n            if(ray.side == 1 && ray.direction.y < 0) texX = this.texWidth - texX;\r\n            \r\n            if ( ray.worldObject instanceof Door && !ray.inside ) { \r\n                if((ray.side == 0 && ray.direction.x > 0 )|| (ray.side == 1 && ray.direction.y < 0)) {\r\n                    texX += Math.floor(ray.worldObject.openAmount * this.texWidth);\r\n                } else {\r\n                    texX -= Math.floor(ray.worldObject.openAmount * this.texWidth);\r\n                }\r\n                \r\n            }\r\n\r\n            const textureStartX = Math.floor(this.texWidth+(ray.texture*this.texWidth)-texX);\r\n            this.drawContext.drawImage(this.textures, textureStartX, 0, 1, this.texHeight, x, drawStart, 1, drawEnd - drawStart);\r\n            if ( ray.side === 1 ) { \r\n                this.drawContext.strokeStyle = 'rgba(0,0,0,0.6)';\r\n                this.drawContext.beginPath();\r\n                this.drawContext.moveTo(x, drawStart);\r\n                this.drawContext.lineTo(x, drawEnd);\r\n                this.drawContext.stroke();\r\n            }\r\n\r\n            zBuffer[x] = ray.perpWallDist;\r\n        }\r\n\r\n        // Sort from farthest to closest\r\n        sprites.sort((a: ViewSprite, b: ViewSprite): number => {\r\n            return b.distanceTo(game.player.position.x, game.player.position.y) - a.distanceTo(game.player.position.x, game.player.position.y);\r\n        });\r\n\r\n        sprites.forEach(s => this.renderSpriteBillboard(s, game, zBuffer, pitch));\r\n\r\n        if (this.depthContext == null) {\r\n            return;\r\n        }\r\n\r\n        var maxDepth = game.world.objects.length;\r\n        for (let x = 0; x < this.screenWidth; x++) {\r\n            const color = (zBuffer[x] / maxDepth) * 100;\r\n            this.depthContext.strokeStyle = `hsl(0, 0%, ${100-color}%)`\r\n            this.depthContext.beginPath();\r\n            this.depthContext.moveTo(x, 0);\r\n            this.depthContext.lineTo(x, this.screenHeight);\r\n            this.depthContext.stroke();\r\n        }\r\n    }\r\n\r\n    private renderSpriteBillboard(sprite: ViewSprite, game: Game, zBuffer: Array<number>, pitch: number) {\r\n        const spriteX = sprite.x - game.player.position.x;\r\n        const spriteY = sprite.y - game.player.position.y;\r\n\r\n        const invDet = 1.0 / (game.player.plane.x * game.player.direction.y - game.player.direction.x * game.player.plane.y); //required for correct matrix multiplication\r\n\r\n        const transformX = invDet * (game.player.direction.y * spriteX - game.player.direction.x * spriteY);\r\n        const transformY = invDet * (-game.player.plane.y * spriteX + game.player.plane.x * spriteY); //this is actually the depth inside the screen, that what Z is in 3D\r\n\r\n        const spriteScreenX = Math.floor((this.screenWidth / 2) * (1 + transformX / transformY));\r\n\r\n        //calculate height of the sprite on screen\r\n        const spriteHeight = Math.abs(Math.floor(this.screenHeight / (transformY))); //using 'transformY' instead of the real distance prevents fisheye\r\n\r\n        //calculate width of the sprite\r\n        const spriteWidth = Math.abs(Math.floor(this.screenHeight / (transformY)));\r\n        var drawStartX = Math.floor(-spriteWidth / 2 + spriteScreenX);\r\n        if(drawStartX < 0) drawStartX = 0;\r\n        var drawEndX = spriteWidth / 2 + spriteScreenX;\r\n        if(drawEndX >= this.screenWidth) drawEndX = this.screenWidth - 1;\r\n\r\n        //loop through every vertical stripe of the sprite on screen\r\n        for(var stripe = drawStartX; stripe < drawEndX; stripe++)\r\n        {\r\n            const texX = Math.floor((stripe - (-spriteWidth / 2 + spriteScreenX)) * this.texWidth / spriteWidth);\r\n            //the conditions in the if are:\r\n            //1) it's in front of camera plane so you don't see things behind you\r\n            //2) it's on the screen (left)\r\n            //3) it's on the screen (right)\r\n            //4) ZBuffer, with perpendicular distance\r\n            if(transformY > 0 && stripe > 0 && stripe < this.screenWidth && transformY < zBuffer[stripe]) {\r\n                const spriteStartX = (sprite.sprite * this.texWidth) + texX;\r\n                const startY = -(spriteHeight/2) + (this.screenHeight / 2) + pitch;\r\n                this.drawContext.drawImage(this.sprites, spriteStartX, 0, 1, this.texHeight, stripe, startY, 1, spriteHeight);\r\n                zBuffer[stripe] = transformY;\r\n            }\r\n        }\r\n    }\r\n\r\n    private renderMap(game: Game) {\r\n        const blockSize = 8;\r\n        \r\n\r\n        for (var y = 0; y < game.world.objects.length; y++) {\r\n            for (var x = 0; x < game.world.objects[y].length; x++) {\r\n                const obj = game.world.objects[y][x];\r\n                if ( obj == null) continue;\r\n\r\n                var color = this.getBlockColor(obj.texture+1);\r\n                this.drawContext.fillStyle = \"hsl(\" + color.hue + \",\" + color.saturation + \"%,\" + color.lightness + \"%)\";\r\n                if ( obj instanceof Sprite ) {\r\n                    this.drawContext.strokeStyle = '#f77';\r\n                    this.drawCircle((x+0.5)*blockSize, (y+0.5)*blockSize, blockSize/2);\r\n                } else if ( obj instanceof Door && !obj.block) {\r\n                    var neighbour: GameObject;\r\n                    if ( x > 0) {\r\n                        neighbour = game.world.objects[y][x-1];\r\n                    } else {\r\n                        neighbour = game.world.objects[y][x+1];\r\n                    }\r\n                    if ( neighbour == null ) { this.drawContext.fillRect((x+0.25)*blockSize, y*blockSize, blockSize/2, blockSize); }\r\n                    else { this.drawContext.fillRect(x*blockSize, (y+0.25)*blockSize, blockSize, blockSize/2); }\r\n                } else {\r\n                    this.drawContext.fillRect(x*blockSize, y*blockSize, blockSize, blockSize);\r\n                }\r\n                \r\n                if ( game.currentTileX === x && game.currentTileY === y) {\r\n                    this.drawContext.strokeStyle = '#f0f';\r\n                    this.drawContext.strokeRect(x*blockSize, y*blockSize, blockSize, blockSize);\r\n                }\r\n            }\r\n        }\r\n\r\n        const playerX = game.player.position.x*blockSize;\r\n        const playerY = game.player.position.y*blockSize;\r\n        this.drawContext.strokeStyle = \"#fff\";\r\n        this.drawCircle(playerX, playerY, blockSize/2);\r\n        this.drawContext.beginPath();\r\n        this.drawContext.moveTo(playerX, playerY);\r\n        this.drawContext.lineTo(playerX + game.player.direction.x*blockSize, playerY + game.player.direction.y*blockSize);\r\n        this.drawContext.stroke();\r\n    }\r\n\r\n    private drawCircle(x: number, y: number, r: number) {\r\n        this.drawContext.beginPath();\r\n        this.drawContext.arc(x, y, r, 0, 2 * Math.PI);\r\n        this.drawContext.stroke(); \r\n    }\r\n\r\n    private getBlockColor(blockId: number): Color {\r\n        var hue = 0;\r\n        var saturation = 100;\r\n        var lightness = 50\r\n\r\n        switch(blockId) {\r\n            case 0: // Empty\r\n                saturation = 0;\r\n                lightness = 0;\r\n                break;\r\n            \r\n            default:\r\n                hue = blockId*40;\r\n                break; \r\n        }\r\n\r\n        return new Color(hue, saturation, lightness);\r\n    }\r\n}\r\n","export class ViewSprite {\r\n    public x: number;\r\n    public y: number;\r\n    public sprite: number;\r\n\r\n    constructor(x: number, y: number, sprite: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.sprite = sprite;\r\n    }\r\n\r\n    distanceTo(x: number, y: number) : number {\r\n        return ((x - this.x) * (x - this.x) + (y - this.y) * (y - this.y));\r\n    }\r\n}","export class Vector {\r\n    public x: number;\r\n    public y: number;\r\n\r\n    constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    add(vector: Vector): Vector {\r\n        return new Vector(this.x + vector.x, this.y + vector.y);\r\n    }\r\n\r\n    rotateBy(degrees: number) {\r\n        degrees = -degrees * (Math.PI / 180);\r\n        const cos = Math.cos(degrees);\r\n        const sin = Math.sin(degrees);\r\n        const newX = Math.round(10000 * (this.x * cos - this.y * sin)) / 10000;\r\n        const newY = Math.round(10000 * (this.x * sin + this.y * cos)) / 10000;\r\n        this.x = newX;\r\n        this.y = newY;\r\n    }\r\n}","import { GameObject } from \"./game-object\";\r\nimport { DynamicObject } from \"./dynamic-object\";\r\nimport { Interactable } from \"./interactable\";\r\n\r\nexport class Door extends GameObject implements DynamicObject, Interactable {\r\n    public closed: boolean;\r\n    public openAmount: number;\r\n    public block: boolean;\r\n    public openTime: number;\r\n\r\n    constructor(texture: number, block: boolean = false) {\r\n        super(texture);\r\n        this.closed = true;\r\n        this.openAmount = 0;\r\n        this.openTime = 0;\r\n        this.block = block;\r\n    }\r\n\r\n    public override collidable(): boolean {\r\n        return this.openAmount !== 1;\r\n    }\r\n\r\n    public interact() {\r\n        if ( this.closed && this.openAmount === 0 ) {\r\n           this.closed = false;\r\n           this.openTime = 0;\r\n        } else if ( !this.closed && this.openAmount === 1) {\r\n            this.closed = true;\r\n        }\r\n    }\r\n\r\n    public step(delta: number) {\r\n        if ( this.closed && this.openAmount > 0) { \r\n            console.log(\"Closing\", this.openAmount);\r\n            this.openAmount -= delta; \r\n        }\r\n        if ( !this.closed && this.openAmount < 1) { \r\n            console.log(\"Opening\", this.openAmount);\r\n            this.openAmount += delta; \r\n        }\r\n\r\n        if ( this.openAmount > 1) { this.openAmount = 1; }\r\n        if ( this.openAmount < 0) { this.openAmount = 0; }\r\n\r\n        // Automatically start closing the door if it's open for a few seconds\r\n        if ( this.openAmount === 1) { this.openTime += delta; }\r\n        if ( this.openTime > 5) { this.closed = true; }\r\n    }\r\n}","export class GameObject {\r\n    public texture: number;\r\n\r\n    constructor(texture: number) {\r\n        this.texture = texture;\r\n    }\r\n\r\n    public collidable(): boolean {\r\n        return true;\r\n    }\r\n}","import { GameObject } from \"./game-object\";\r\n\r\nexport class Sprite extends GameObject{\r\n    constructor(sprite: number) {\r\n        super(sprite);\r\n    }\r\n\r\n    distanceBetween(x: number, y: number, otherX: number, otherY: number) : number {\r\n        return ((otherX - x) * (otherX - x) + (otherY - y) * (otherY - y));\r\n    }\r\n}","import { GameObject } from \"./game-object\";\r\nimport { DynamicObject } from \"./dynamic-object\";\r\nimport { Door } from \"./door\";\r\nimport { Sprite } from \"./sprite\";\r\n\r\nexport class World {\r\n    public objects: Array<Array<GameObject | null>>;\r\n\r\n\tpublic ceiling = 5;\r\n\tpublic floor = 2;\r\n\r\n    private dynamicObjects: Array<DynamicObject>;\r\n\r\n    private constructor() {\r\n        this.objects = [];\r\n        this.dynamicObjects = [];\r\n    }\r\n\r\n    public step(delta: number) {\r\n        this.dynamicObjects.forEach(o => o.step(delta));\r\n    }\r\n\r\n    public cacheDynamicObjects() {\r\n        this.dynamicObjects.splice(0);\r\n        for (let x = 0; x < this.objects.length; x++) {\r\n            for (let y = 0; y < this.objects[x].length; y++) {\r\n                const obj = this.objects[x][y];\r\n                if ( obj instanceof Door ) {\r\n                    this.dynamicObjects.push(obj);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public static from(json: Array<Array<number>>, textureLimit: number): World {\r\n\t\tlet world = new World();\r\n\t\tfor (let x = 0; x < json.length; x++) {\r\n\t\t\tlet row: Array<GameObject> = [];\r\n\r\n\t\t\tfor (let y = 0; y < json[x].length; y++) {\r\n\t\t\t\tconst tile = json[x][y]-1;\r\n\t\t\t\tif ( tile < 0) {\r\n                    row.push(null);\r\n                } else if (tile < textureLimit ) {\r\n\t\t\t\t\trow.push(new GameObject(tile));\r\n\t\t\t\t} else if ( tile < textureLimit*2) {\r\n                    row.push(new Sprite(tile - textureLimit));\r\n                } else if ( tile < textureLimit*3) {\r\n\t\t\t\t\trow.push(new Door(tile - (textureLimit*2)));\r\n\t\t\t\t} else if ( tile < textureLimit*4) {\r\n                    row.push(new Door(tile - (textureLimit*3), true));\r\n                } else {\r\n                    throw new Error(`Invalid tile number of ${tile+textureLimit} at ${x},${y}`);\r\n                }\r\n\t\t\t}\r\n\r\n            world.objects.push(row);\r\n\t\t}\r\n\r\n        world.cacheDynamicObjects();\r\n        return world;\r\n\t}\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { Game } from \"./client/game\";\r\nimport { Input } from \"./client/input\";\r\nimport { Renderer } from \"./client/rendering/renderer\";\r\n\r\nconst input = new Input();\r\ninput.attachEventListeners(document.getElementsByTagName('body')[0]);\r\n\r\nconst canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\r\nconst depth = document.getElementById(\"depth\") as HTMLCanvasElement;\r\nconst textures = document.getElementById(\"textures\") as HTMLImageElement;\r\nconst sprites = document.getElementById(\"sprites\") as HTMLImageElement;\r\nvar renderer = new Renderer(1024, 768, canvas, textures, sprites, depth);\r\nvar game = new Game(renderer, input);\r\n\r\nfetch(\"assets/world.json\").then((response) => {\r\n    response.json().then(json => {\r\n        game.load(json);\r\n        game.tick();\r\n    })\r\n})\r\n"],"names":["Color","hue","saturation","lightness","this","renderer","input","textureLimit","currentTileX","currentTileY","currentTime","previousTime","player","Player","load","json","world","World","from","tick","performance","now","delta","gameStep","step","render","window","requestAnimationFrame","bind","keyQueue","length","find","k","toggleMap","clearQueue","usePressed","leftMouseUp","ray","RayCast","position","direction","plane","hit","perpWallDist","worldObject","Door","interact","anyDirectional","mouseDragStart","movement","getMovementFromInput","x","y","newPlayerPos","add","objects","Math","floor","currentTile","collidable","leftPressed","rotateBy","rightPressed","xVel","yVel","upPressed","movementSpeed","downPressed","mousePosition","forward","min","max","Vector","Game","leftMousePressed","previousLeftMousePressed","attachEventListeners","el","addEventListener","e","key","push","button","rect","getBoundingClientRect","clientX","left","clientY","top","relX","changedTouches","item","relY","Input","degrees","RayCastResult","originPos","originDir","originPlane","cameraX","stopOnSprite","stepX","stepY","sideDistX","sideDistY","rayDirX","rayDirY","mapX","mapY","deltaDistX","abs","deltaDistY","wallX","side","texNum","wallXOffset","wallYOffset","inside","sprites","Sprite","viewSprite","ViewSprite","texture","findIndex","v","openAmount","result","width","height","canvasElement","textures","depthBuffer","texWidth","texHeight","screenWidth","screenHeight","canvas","context","getContext","Error","drawContext","imageSmoothingEnabled","depthContext","mapVisible","game","fillStyle","fillRect","renderCeilingFloor","renderWalls","renderMap","ceilColor","getBlockColor","ceiling","floorColor","zBuffer","fill","forEach","sprite","s","lineHeight","drawStart","drawEnd","texX","textureStartX","drawImage","strokeStyle","beginPath","moveTo","lineTo","stroke","sort","a","b","distanceTo","renderSpriteBillboard","maxDepth","color","pitch","spriteX","spriteY","invDet","transformX","transformY","spriteScreenX","spriteHeight","spriteWidth","drawStartX","drawEndX","stripe","spriteStartX","startY","obj","drawCircle","blockSize","block","strokeRect","playerX","playerY","r","arc","PI","blockId","Renderer","vector","cos","sin","newX","round","newY","closed","openTime","console","log","GameObject","distanceBetween","otherX","otherY","dynamicObjects","o","cacheDynamicObjects","splice","row","tile","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","call","document","getElementsByTagName","getElementById","depth","fetch","then","response"],"sourceRoot":""}