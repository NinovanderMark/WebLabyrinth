{"version":3,"file":"main.3a6f97c314ecbf04efb9.js","mappings":"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","sources":["webpack://weblabyrinth/./src/client/color.ts","webpack://weblabyrinth/./src/client/game.ts","webpack://weblabyrinth/./src/client/input.ts","webpack://weblabyrinth/./src/client/item.ts","webpack://weblabyrinth/./src/client/player.ts","webpack://weblabyrinth/./src/client/raycast.ts","webpack://weblabyrinth/./src/client/rendering/renderer.ts","webpack://weblabyrinth/./src/client/rendering/view-sprite.ts","webpack://weblabyrinth/./src/client/resource-resolver.ts","webpack://weblabyrinth/./src/client/room/room.ts","webpack://weblabyrinth/./src/client/vector.ts","webpack://weblabyrinth/./src/client/world/door.ts","webpack://weblabyrinth/./src/client/world/game-object.ts","webpack://weblabyrinth/./src/client/world/pickup.ts","webpack://weblabyrinth/./src/client/world/sprite.ts","webpack://weblabyrinth/./src/client/world/world.ts","webpack://weblabyrinth/webpack/bootstrap","webpack://weblabyrinth/./src/index.ts"],"sourcesContent":["export class Color\r\n{\r\n    hue: number;\r\n    saturation: number;\r\n    lightness: number;\r\n    \r\n    constructor(hue: number, saturation: number, lightness: number) {\r\n        this.hue = hue;\r\n        this.saturation = saturation;\r\n        this.lightness = lightness;\r\n    }\r\n}","import { Room } from \"./room/room\";\r\nimport { Input } from './input';\r\nimport { Player } from './player';\r\nimport { Renderer } from './rendering/renderer';\r\nimport { World } from './world/world';\r\nimport { Vector } from './vector';\r\nimport { RayCast } from \"./raycast\";\r\nimport { Door } from './world/door';\r\nimport { Interactable } from './world/interactable';\r\nimport { Pickup } from \"./world/pickup\";\r\n\r\nexport class Game {\r\n\tpublic readonly textureLimit: number = 16;\r\n\r\n    public world: World;\r\n\r\n\tplayer: Player;\r\n\tinput: Input;\r\n\trenderer: Renderer;\r\n\t\r\n\tcurrentTileX = 0;\r\n\tcurrentTileY = 0;\r\n\r\n\tcurrentTime = 0;\r\n\tpreviousTime = 0;\r\n\r\n\tconstructor(renderer: Renderer, input: Input) {\r\n\t\tthis.renderer = renderer;\r\n\t\tthis.input = input;\r\n\t\tthis.player = new Player(17, 19);\r\n\t}\r\n\r\n\tpublic loadRoom(urlString: string) {\r\n\t\tconst url = new URL(urlString);\r\n\t\tconsole.log('Loading new room from URL', url.href);\r\n\r\n\t\tfetch(url.href, {\r\n\t\t\tmethod: 'get',\r\n\t\t\tmode: 'cors'\r\n\t\t}).then((response) => {\r\n\t\t\tif ( response.ok ) {\r\n\t\t\t\tresponse.json().then(json => {\r\n\t\t\t\t\tconst room = json as Room;\r\n\t\t\t\t\tRoom.validate(room);\r\n\t\t\t\t\tthis.world = World.from(room, url);\r\n\t\t\t\t\tthis.tick();\r\n\t\t\t\t})\r\n\t\t\t} else {\r\n\t\t\t\tthrow new Error(`Unable to retrieve room at URL: ${urlString}`);\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Progresses the game by 1 step, and schedules the next step\r\n\t */\r\n\tpublic tick() {\r\n\t\tif (this.previousTime=== 0 ) {\r\n\t\t\tthis.previousTime = performance.now();\r\n\t\t} else {\r\n\t\t\tthis.previousTime = this.currentTime;\r\n\t\t}\r\n\r\n\t\tthis.currentTime = performance.now();\r\n\r\n\t\tconst delta = (this.currentTime - this.previousTime)/1000;\r\n\t\tthis.gameStep(delta);\r\n\t\tthis.world.step(delta);\r\n\t\tthis.renderer.render(this);\r\n\r\n\t\twindow.requestAnimationFrame(this.tick.bind(this));\r\n\t}\r\n\r\n\tprivate gameStep(delta: number) {\r\n\t\tif ( this.input.keyQueue.length > 0) {\r\n\t\t\tif ( this.input.keyQueue.find((k) => k === 'm') != null) {\r\n\t\t\t\tthis.renderer.toggleMap();\r\n\t\t\t}\r\n\r\n\t\t\tthis.input.clearQueue();\r\n\t\t}\r\n\r\n\t\t// Interact with doors\r\n\t\tif ( this.input.usePressed || this.input.leftMouseUp ) {\r\n\t\t\tconst ray = RayCast.ray(this.player.position, this.player.direction, this.player.plane, 0, this.world);\r\n\t\t\tif ( ray.hit && ray.perpWallDist < 2 ) {\r\n\t\t\t\tif ( ray.worldObject instanceof Door) {\r\n\t\t\t\t\tray.worldObject.interact();\r\n\t\t\t\t}\r\n\t\t\t} \r\n\t\t}\r\n\r\n\t\tif ( !this.input.anyDirectional() && this.input.mouseDragStart == null ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tvar movement = this.getMovementFromInput();\r\n\t\tif ( movement.x === 0 && movement.y === 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst newPlayerPos = this.player.position.add(movement);\r\n\r\n\t\t// Out of bounds\r\n\t\tif (newPlayerPos.y > this.world.objects.length || newPlayerPos.y < 0 || \r\n\t\t\tnewPlayerPos.x > this.world.objects[0].length || newPlayerPos.x < 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.currentTileX = Math.floor(newPlayerPos.x);\r\n\t\tthis.currentTileY = Math.floor(newPlayerPos.y);\r\n\r\n\t\tconst currentTile = this.world.objects[this.currentTileY][this.currentTileX];\r\n\t\tif (currentTile != null && currentTile.collidable()) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.player.position = newPlayerPos;\r\n\r\n\t\tif ( currentTile instanceof Pickup) {\r\n\t\t\tcurrentTile.onPickup(this.player);\r\n\t\t\tthis.world.objects[this.currentTileY][this.currentTileX] = null;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate getMovementFromInput(): Vector {\r\n\t\tif ( this.input.leftPressed) {\r\n\t\t\tthis.player.rotateBy(1.5);\r\n\t\t} else if ( this.input.rightPressed) {\r\n\t\t\tthis.player.rotateBy(-1.5);\r\n\t\t}\r\n\r\n\t\tlet xVel = 0;\r\n\t\tlet yVel = 0;\r\n\t\tif ( this.input.upPressed ) {\r\n\t\t\tyVel += this.player.direction.y * this.player.movementSpeed;\r\n\t\t\txVel += this.player.direction.x * this.player.movementSpeed;\r\n\t\t} else if (this.input.downPressed) {\r\n\t\t\tyVel -= this.player.direction.y * this.player.movementSpeed;\r\n\t\t\txVel -= this.player.direction.x * this.player.movementSpeed;\r\n\t\t} \r\n\r\n\t\tif ( this.input.mouseDragStart != null) {\r\n\t\t\tthis.player.rotateBy((this.input.mouseDragStart.x - this.input.mousePosition.x)*0.01);\r\n\t\t\tconst forward = (this.input.mouseDragStart.y - this.input.mousePosition.y) * 0.0005;\r\n\t\t\tif ( forward > 0.01 ) {\r\n\t\t\t\tyVel = this.player.direction.y * Math.min(forward, this.player.movementSpeed)\r\n\t\t\t\txVel = this.player.direction.x * Math.min(forward, this.player.movementSpeed)\r\n\t\t\t} else if (forward < -0.01) {\r\n\t\t\t\tyVel = this.player.direction.y * Math.max(forward, -this.player.movementSpeed)\r\n\t\t\t\txVel = this.player.direction.x * Math.max(forward, -this.player.movementSpeed)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn new Vector(xVel, yVel);\r\n\t}\r\n};","import { Vector } from \"./vector\";\r\n\r\nexport class Input {\r\n    public upPressed = false;\r\n    public downPressed = false;\r\n    public leftPressed = false;\r\n    public rightPressed = false;\r\n    public usePressed = false;\r\n\r\n    public leftMousePressed = false;\r\n    public previousLeftMousePressed = false;\r\n    public mouseDragStart: Vector | null = null;\r\n    public mousePosition = new Vector(0,0);\r\n    \r\n    public keyQueue = [];\r\n    \r\n    public get leftMouseUp(): boolean {\r\n        if ( this.previousLeftMousePressed) {\r\n            this.previousLeftMousePressed = false;\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public attachEventListeners(el: HTMLElement) {\r\n        el.addEventListener(\"keydown\", (e: KeyboardEvent) => {\r\n            if (e.key === \"ArrowLeft\") { this.leftPressed = true; };\r\n            if (e.key === \"ArrowRight\") { this.rightPressed = true; };\r\n            if (e.key === \"ArrowUp\") { this.upPressed = true; };\r\n            if (e.key === \"ArrowDown\") { this.downPressed = true; };\r\n            if (e.key === \" \" ) {this.usePressed = true;}\r\n        });\r\n\r\n        el.addEventListener(\"keyup\", (e: KeyboardEvent) => {\r\n            if (e.key === \"ArrowLeft\") { this.leftPressed = false; };\r\n            if (e.key === \"ArrowRight\") { this.rightPressed = false; };\r\n            if (e.key === \"ArrowUp\") { this.upPressed = false; };\r\n            if (e.key === \"ArrowDown\") { this.downPressed = false; };\r\n            if (e.key === \" \" ) {this.usePressed = false;}\r\n            if (e.key.length === 1 ) { this.keyQueue.push(e.key); }\r\n        });\r\n\r\n        el.addEventListener(\"mousedown\", (e: MouseEvent) => {\r\n            if (e.button === 0) {\r\n                const rect = el.getBoundingClientRect();\r\n                this.leftMousePressed = true;\r\n                this.mouseDragStart = new Vector(e.clientX - rect.left, e.clientY - rect.top);\r\n            }\r\n        });\r\n\r\n        el.addEventListener(\"mousemove\", (e: MouseEvent) => {\r\n            const rect = el.getBoundingClientRect();\r\n            this.mousePosition = new Vector(e.clientX - rect.left, e.clientY - rect.top);\r\n        })\r\n\r\n        el.addEventListener(\"mouseup\", (e: MouseEvent) => {\r\n            if ( e.button === 0) {\r\n                this.leftMousePressed = false;\r\n                this.previousLeftMousePressed = true;\r\n                this.mouseDragStart = null;\r\n            }\r\n        });\r\n\r\n        el.addEventListener(\"touchstart\", (e: TouchEvent) => {\r\n            this.leftMousePressed = true;\r\n            const rect = el.getBoundingClientRect();\r\n            const relX = e.changedTouches.item(0).clientX - rect.left;\r\n            const relY = e.changedTouches.item(0).clientY - rect.top;\r\n            this.mouseDragStart = new Vector(relX, relY);\r\n        });\r\n\r\n        el.addEventListener(\"touchmove\", (e: TouchEvent) => {\r\n            const rect = el.getBoundingClientRect();\r\n            const relX = e.changedTouches.item(0).clientX - rect.left;\r\n            const relY = e.changedTouches.item(0).clientY - rect.top;\r\n            this.mousePosition = new Vector(relX, relY);\r\n        });\r\n\r\n        el.addEventListener(\"touchend\", (e: TouchEvent) => {\r\n            this.leftMousePressed = false;\r\n            this.previousLeftMousePressed = true;\r\n            this.mouseDragStart = null;\r\n        });\r\n    }\r\n\r\n    public anyDirectional(): boolean {\r\n        if (this.upPressed || this.downPressed || this.leftPressed || this.rightPressed)\r\n            return true;\r\n\r\n        return false;\r\n    }\r\n\r\n    public clearQueue() {\r\n        this.keyQueue = [];\r\n    }\r\n}\r\n","export class Item {\r\n    sprite: number;\r\n    amount: number;\r\n    name: string;\r\n\r\n    constructor(name: string, sprite: number, amount: number = 1) {\r\n        this.amount = amount;\r\n        this.sprite = sprite;\r\n        this.name = name;\r\n    }\r\n}","import { Vector } from './vector';\r\nimport { Item } from \"./item\";\r\n\r\nexport class Player {\r\n    movementSpeed: number = 0.05;\r\n    items: Array<Item> = [];\r\n\r\n    position: Vector;\r\n    direction: Vector;\r\n    plane: Vector;\r\n    \r\n    constructor(x: number, y: number) {\r\n        this.position = new Vector(x, y);\r\n        this.direction = new Vector(0, -1);\r\n        this.plane = new Vector(0.66, 0);\r\n    }\r\n\r\n    rotateBy(degrees: number) {\r\n        this.direction.rotateBy(degrees);\r\n        this.plane.rotateBy(degrees);\r\n    }\r\n}","import { World } from \"./world/world\";\r\nimport { Vector } from \"./vector\";\r\nimport { ViewSprite } from \"./rendering/view-sprite\";\r\nimport { Sprite } from \"./world/sprite\";\r\nimport { Door } from \"./world/door\";\r\nimport { GameObject } from \"./world/game-object\";\r\n\r\nexport class RayCastResult {\r\n    public sprites: Array<ViewSprite>;\r\n    public perpWallDist: number;\r\n    public worldObject: GameObject | null;\r\n    public inside: boolean;\r\n    public hit: boolean;\r\n    public side: number;\r\n    public texture: number;\r\n    public direction: Vector;\r\n}\r\n\r\nexport class RayCast {\r\n    public static ray(originPos: Vector, originDir: Vector, originPlane: Vector, cameraX: number, world: World, stopOnSprite: boolean = false): RayCastResult {\r\n        var rayDirX = originDir.x + originPlane.x * cameraX;\r\n        var rayDirY = originDir.y + originPlane.y * cameraX;\r\n\r\n        // Which box of the map we're in\r\n        var mapX = Math.floor(originPos.x);\r\n        var mapY = Math.floor(originPos.y);\r\n\r\n        // Length of ray from one X or Y-side to next X or Y-side\r\n        var deltaDistX = Math.abs(1/rayDirX);\r\n        var deltaDistY = Math.abs(1/rayDirY);\r\n\r\n        // What direction to step in X or Y-direction (either +1 or -1)\r\n        var stepX;\r\n        var stepY;\r\n\r\n        // Length of array from current position to next X or Y-side\r\n        var sideDistX;\r\n        var sideDistY;\r\n\r\n        // Calculate step and initial sideDist\r\n        if (rayDirX < 0)\r\n        {\r\n            stepX = -1;\r\n            sideDistX = (originPos.x - mapX) * deltaDistX;\r\n        }\r\n        else\r\n        {\r\n            stepX = 1;\r\n            sideDistX = (mapX + 1 - originPos.x) * deltaDistX;\r\n        }\r\n        if (rayDirY < 0)\r\n        {\r\n            stepY = -1;\r\n            sideDistY = (originPos.y - mapY) * deltaDistY;\r\n        }\r\n        else\r\n        {\r\n            stepY = 1;\r\n            sideDistY = (mapY + 1 - originPos.y) * deltaDistY;\r\n        }\r\n\r\n        var hit = 0;\r\n        var wallXOffset = 0;\r\n        var wallYOffset = 0;\r\n        var inside = false\r\n\r\n        const sprites: Array<ViewSprite> = [];\r\n        var wallX: number;\r\n        var side: number;\r\n        var texNum: number;\r\n        var worldObject: GameObject;\r\n        \r\n        // Perform DDA\r\n        while (hit === 0)\r\n        {\r\n            // Jump to next map square, OR in X-direction, OR in Y-direction\r\n            if (sideDistX < sideDistY)\r\n            {\r\n                sideDistX += deltaDistX;\r\n                mapX += stepX;\r\n                side = 0;\r\n            }\r\n            else\r\n            {\r\n                sideDistY += deltaDistY;\r\n                mapY += stepY;\r\n                side = 1;\r\n            }\r\n            // Check if ray has hit a wall\r\n            worldObject = world.objects[mapY][mapX];\r\n            if ( worldObject == null) continue;\r\n\r\n            if ( worldObject instanceof Sprite ) {\r\n                var viewSprite = new ViewSprite(mapX+0.5, mapY+0.5, worldObject.texture, worldObject.scale);\r\n                if ( sprites.findIndex(v => v.x === viewSprite.x && v.y === viewSprite.y) < 0) {\r\n                    sprites.push(viewSprite);\r\n                }\r\n                if ( stopOnSprite ) {\r\n                    hit = 1;\r\n                }\r\n                continue;\r\n            } else if ( worldObject instanceof Door) {\r\n                texNum = worldObject.texture;\r\n                hit = 1;\r\n                if (side == 1) {\r\n                    wallYOffset = 0.5 * stepY;\r\n                    perpWallDist = (mapY - originPos.y + wallYOffset + (1 - stepY) / 2) / rayDirY;\r\n                    if (sideDistY - (deltaDistY/2) < sideDistX) { //If ray hits offset wall\r\n                        wallX = originPos.x + perpWallDist * rayDirX;\r\n                        wallX -= Math.floor(wallX);\r\n                        if ( wallX <= worldObject.openAmount){\r\n                            hit = 0; //Continue raycast for open/opening doors\r\n                            wallYOffset = 0;\r\n                        }\r\n                    } else {\r\n                        mapX += stepX;\r\n                        side = 0;\r\n                        inside =  true;\r\n                        wallYOffset = 0;\r\n                        texNum = world.objects[mapY][mapX].texture;\r\n                    }\r\n                } else { //side == 0\r\n                    wallXOffset = 0.5 * stepX;\r\n                    perpWallDist  = (mapX - originPos.x + wallXOffset + (1 - stepX) / 2) / rayDirX;\r\n                    if (sideDistX - (deltaDistX/2) < sideDistY) {\r\n                        wallX = originPos.y + perpWallDist * rayDirY;\r\n                        wallX -= Math.floor(wallX);\r\n                        if ( wallX < worldObject.openAmount) {\r\n                            hit = 0;\r\n                            wallXOffset = 0;\r\n                        }\r\n                    } else {\r\n                        mapY += stepY;\r\n                        side = 1;\r\n                        inside = true;\r\n                        wallXOffset = 0;\r\n                        texNum = world.objects[mapY][mapX].texture;\r\n                    }\r\n                }\r\n            } else {\r\n                texNum = worldObject.texture;\r\n                hit = 1;\r\n            }\r\n        }\r\n\r\n        var perpWallDist;\r\n\r\n        // Calculate distance projected on camera direction (Euclidean distance will give fisheye effect!)\r\n        if (side === 0) perpWallDist = (mapX - originPos.x + wallXOffset + (1 - stepX) / 2) / rayDirX;\r\n        else           perpWallDist = (mapY - originPos.y + wallYOffset + (1 - stepY) / 2) / rayDirY;\r\n\r\n            var result = new RayCastResult();\r\n            result.sprites = sprites;\r\n            result.hit = hit === 1;\r\n            result.side = side;\r\n            result.perpWallDist = perpWallDist;\r\n            result.inside = inside;\r\n            result.worldObject = worldObject;\r\n            result.texture = texNum;\r\n            result.direction = new Vector(rayDirX, rayDirY);\r\n            return result;\r\n    }\r\n}","import { Game } from \"../game\";\r\nimport { Color } from \"../color\";\r\nimport { Sprite } from \"../world/sprite\";\r\nimport { ViewSprite } from \"./view-sprite\";\r\nimport { Door } from \"../world/door\";\r\nimport { GameObject } from \"../world/game-object\";\r\nimport { RayCast } from \"../raycast\";\r\nimport { ResourceResolver } from \"../resource-resolver\";\r\nimport { Player } from \"../player\";\r\n\r\nexport class Renderer {\r\n    screenWidth: number;\r\n\tscreenHeight: number;\r\n\tcanvas: HTMLCanvasElement;\r\n\r\n    resourceResolver: ResourceResolver;\r\n\tdrawContext: CanvasRenderingContext2D;\r\n    depthContext: CanvasRenderingContext2D;\r\n    mapVisible: boolean;\r\n\r\n    texWidth = 64;\r\n    texHeight = 64;\r\n\r\n    constructor(width: number, height: number, resResolver: ResourceResolver, canvasElement: HTMLCanvasElement, depthBuffer?: HTMLCanvasElement) {\r\n        this.screenWidth = width;\r\n\t\tthis.screenHeight = height;\r\n\r\n        this.resourceResolver = resResolver;\r\n\t\tthis.canvas = canvasElement;\r\n\t\tthis.canvas.width = this.screenWidth;\r\n\t\tthis.canvas.height = this.screenHeight;\r\n\r\n        let context = this.canvas.getContext('2d');\r\n\t\tif ( context == null) {\r\n\t\t\tthrow new Error(\"Unable to get 2D rendering context from Canvas\");\r\n        }\r\n\r\n\t\tthis.drawContext = context;\r\n        this.drawContext.imageSmoothingEnabled = false;\r\n\r\n        if ( depthBuffer != null) {\r\n            this.depthContext = depthBuffer.getContext('2d');\r\n        }\r\n    }\r\n\r\n    public toggleMap() {\r\n        this.mapVisible = !this.mapVisible;\r\n    }\r\n\r\n    public render(game: Game) {\r\n        this.drawContext.fillStyle = \"#000\";\r\n        this.drawContext.fillRect(0,0,this.screenWidth, this.screenHeight);\r\n    \r\n        const textures = this.resourceResolver.getTextures(game.world);\r\n        const sprites = this.resourceResolver.getSprites(game.world);\r\n        \r\n        if ( textures.naturalWidth === 0 || textures.naturalHeight === 0 || \r\n            sprites.naturalWidth === 0  || sprites.naturalHeight === 0) {\r\n            this.drawContext.fillStyle = \"#fff\";\r\n            this.drawContext.font = \"30px Arial\";\r\n            this.drawContext.textAlign = \"center\";\r\n            this.drawContext.fillText(\"Loading textures...\", this.screenWidth/2, this.screenHeight/2);\r\n            return;\r\n        }\r\n\r\n        this.renderCeilingFloor(game);\r\n        this.renderWalls(game, textures, sprites);\r\n\r\n        if ( this.mapVisible ) {\r\n            this.renderMap(game);\r\n        }\r\n\r\n        this.renderInterface(game.player, sprites);\r\n    }\r\n\r\n    private renderInterface(player: Player, sprites: HTMLImageElement) {\r\n        let left = 16;\r\n        let bottom = 16;\r\n\r\n        player.items.forEach(i => {\r\n            const width = 48;\r\n            const y = this.screenHeight - (bottom+width);\r\n            for (let n = 0; n < i.amount; n++) {\r\n                this.drawContext.drawImage(sprites, i.sprite*this.texWidth, 0, this.texWidth, this.texHeight, left+(n*width/4), y, width, width);\r\n            }\r\n            bottom-=(width + 8);\r\n        });\r\n    }\r\n\r\n    private renderCeilingFloor(game: Game) {\r\n        // Temporary implementation\r\n        var ceilColor = this.getBlockColor(game.world.ceiling);\r\n        this.drawContext.fillStyle = \"hsl(\" + ceilColor.hue + \",\" + ceilColor.saturation + \"%,\" + ceilColor.lightness/2 + \"%)\";\r\n        this.drawContext.fillRect(0, 0, this.screenWidth, this.screenHeight/2);\r\n\r\n        var floorColor = this.getBlockColor(game.world.floor);\r\n        this.drawContext.fillStyle = \"hsl(\" + floorColor.hue + \",\" + floorColor.saturation + \"%,\" + floorColor.lightness/4 + \"%)\";\r\n        this.drawContext.fillRect(0, this.screenHeight/2, this.screenWidth, this.screenHeight/2);\r\n    }\r\n\r\n    private renderWalls(game: Game, textures: HTMLImageElement, spriteTextures: HTMLImageElement) {\r\n        const pitch = 0;\r\n        const zBuffer: Array<number> = [];\r\n        zBuffer.fill(0, 0, this.screenWidth);\r\n        const sprites: Array<ViewSprite> = [];\r\n\r\n        for(var x = 0; x < this.screenWidth; x++) {\r\n            var cameraX = 2 * x / this.screenWidth - 1; // X coordinate in camera space\r\n            var ray = RayCast.ray(game.player.position, game.player.direction, game.player.plane, cameraX, game.world);\r\n\r\n            ray.sprites.forEach(sprite => {\r\n                if ( sprites.findIndex(s => s.x === sprite.x && s.y === sprite.y && s.sprite === sprite.sprite) < 0) {\r\n                    sprites.push(sprite);\r\n                }\r\n            })\r\n\r\n            // Calculate height of line to draw on screen\r\n            var lineHeight = Math.floor(this.screenHeight / ray.perpWallDist);\r\n\r\n            // Calculate lowest and highest pixel to fill in current stripe\r\n            const drawStart = -lineHeight / 2 + this.screenHeight / 2 + pitch;\r\n            const drawEnd = lineHeight / 2 + this.screenHeight / 2 + pitch;\r\n\r\n            var wallX;\r\n            if (ray.side == 0) wallX = game.player.position.y + ray.perpWallDist * ray.direction.y;\r\n            else           wallX = game.player.position.x + ray.perpWallDist * ray.direction.x;\r\n            wallX -= Math.floor(wallX);\r\n\r\n            //x coordinate on the texture\r\n            var texX = wallX * this.texWidth;\r\n            if(ray.side == 0 && ray.direction.x > 0) texX = this.texWidth - texX;\r\n            if(ray.side == 1 && ray.direction.y < 0) texX = this.texWidth - texX;\r\n            \r\n            if ( ray.worldObject instanceof Door && !ray.inside ) { \r\n                if((ray.side == 0 && ray.direction.x > 0 )|| (ray.side == 1 && ray.direction.y < 0)) {\r\n                    texX += Math.floor(ray.worldObject.openAmount * this.texWidth);\r\n                } else {\r\n                    texX -= Math.floor(ray.worldObject.openAmount * this.texWidth);\r\n                }\r\n                \r\n            }\r\n\r\n            const textureStartX = Math.floor(this.texWidth+(ray.texture*this.texWidth)-texX);\r\n            this.drawContext.drawImage(textures, textureStartX, 0, 1, this.texHeight, x, drawStart, 1, drawEnd - drawStart);\r\n            if ( ray.side === 1 ) { \r\n                this.drawContext.strokeStyle = 'rgba(0,0,0,0.6)';\r\n                this.drawContext.beginPath();\r\n                this.drawContext.moveTo(x, drawStart);\r\n                this.drawContext.lineTo(x, drawEnd);\r\n                this.drawContext.stroke();\r\n            }\r\n\r\n            zBuffer[x] = ray.perpWallDist;\r\n        }\r\n\r\n        // Sort from farthest to closest\r\n        sprites.sort((a: ViewSprite, b: ViewSprite): number => {\r\n            return b.distanceTo(game.player.position.x, game.player.position.y) - a.distanceTo(game.player.position.x, game.player.position.y);\r\n        });\r\n\r\n        sprites.forEach(s => this.renderSpriteBillboard(s, game, zBuffer, pitch, spriteTextures));\r\n\r\n        if (this.depthContext == null) {\r\n            return;\r\n        }\r\n\r\n        var maxDepth = game.world.objects.length;\r\n        for (let x = 0; x < this.screenWidth; x++) {\r\n            const color = (zBuffer[x] / maxDepth) * 100;\r\n            this.depthContext.strokeStyle = `hsl(0, 0%, ${100-color}%)`\r\n            this.depthContext.beginPath();\r\n            this.depthContext.moveTo(x, 0);\r\n            this.depthContext.lineTo(x, this.screenHeight);\r\n            this.depthContext.stroke();\r\n        }\r\n    }\r\n\r\n    private renderSpriteBillboard(sprite: ViewSprite, game: Game, zBuffer: Array<number>, pitch: number, texture: HTMLImageElement) {\r\n        const spriteX = sprite.x - game.player.position.x;\r\n        const spriteY = sprite.y - game.player.position.y;\r\n\r\n        const invDet = 1.0 / (game.player.plane.x * game.player.direction.y - game.player.direction.x * game.player.plane.y); //required for correct matrix multiplication\r\n\r\n        const transformX = invDet * (game.player.direction.y * spriteX - game.player.direction.x * spriteY);\r\n        const transformY = invDet * (-game.player.plane.y * spriteX + game.player.plane.x * spriteY); //this is actually the depth inside the screen, that what Z is in 3D\r\n\r\n        const spriteScreenX = Math.floor((this.screenWidth / 2) * (1 + transformX / transformY));\r\n\r\n        //calculate height of the sprite on screen\r\n        const spriteHeight = Math.abs(Math.floor(this.screenHeight / (transformY))) * sprite.scale; //using 'transformY' instead of the real distance prevents fisheye\r\n\r\n        //calculate width of the sprite\r\n        const spriteWidth = Math.abs(Math.floor(this.screenHeight / (transformY))) * sprite.scale;\r\n        var drawStartX = Math.floor(-spriteWidth / 2 + spriteScreenX);\r\n        if(drawStartX < 0) drawStartX = 0;\r\n        var drawEndX = spriteWidth / 2 + spriteScreenX;\r\n        if(drawEndX >= this.screenWidth) drawEndX = this.screenWidth - 1;\r\n\r\n        //loop through every vertical stripe of the sprite on screen\r\n        for(var stripe = drawStartX; stripe < drawEndX; stripe++)\r\n        {\r\n            const texX = Math.floor((stripe - (-spriteWidth / 2 + spriteScreenX)) * this.texWidth / spriteWidth);\r\n            //the conditions in the if are:\r\n            //1) it's in front of camera plane so you don't see things behind you\r\n            //2) it's on the screen (left)\r\n            //3) it's on the screen (right)\r\n            //4) ZBuffer, with perpendicular distance\r\n            if(transformY > 0 && stripe > 0 && stripe < this.screenWidth && transformY < zBuffer[stripe]) {\r\n                const spriteStartX = (sprite.sprite * this.texWidth) + texX;\r\n                const startY = -(spriteHeight/2) + (spriteHeight - spriteHeight * sprite.scale) + (this.screenHeight / 2) + pitch;\r\n                this.drawContext.drawImage(texture, spriteStartX, 0, 1, this.texHeight, stripe, startY, 1, spriteHeight);\r\n                zBuffer[stripe] = transformY;\r\n            }\r\n        }\r\n    }\r\n\r\n    private renderMap(game: Game) {\r\n        const blockSize = 8;\r\n\r\n        for (var y = 0; y < game.world.objects.length; y++) {\r\n            for (var x = 0; x < game.world.objects[y].length; x++) {\r\n                const obj = game.world.objects[y][x];\r\n                if ( obj == null) continue;\r\n\r\n                var color = this.getBlockColor(obj.texture+1);\r\n                this.drawContext.fillStyle = \"hsl(\" + color.hue + \",\" + color.saturation + \"%,\" + color.lightness + \"%)\";\r\n                if ( obj instanceof Sprite ) {\r\n                    this.drawContext.strokeStyle = '#f77';\r\n                    this.drawCircle((x+0.5)*blockSize, (y+0.5)*blockSize, blockSize/2);\r\n                } else if ( obj instanceof Door && !obj.block) {\r\n                    var neighbour: GameObject;\r\n                    if ( x > 0) {\r\n                        neighbour = game.world.objects[y][x-1];\r\n                    } else {\r\n                        neighbour = game.world.objects[y][x+1];\r\n                    }\r\n                    if ( neighbour == null ) { this.drawContext.fillRect((x+0.25)*blockSize, y*blockSize, blockSize/2, blockSize); }\r\n                    else { this.drawContext.fillRect(x*blockSize, (y+0.25)*blockSize, blockSize, blockSize/2); }\r\n                } else {\r\n                    this.drawContext.fillRect(x*blockSize, y*blockSize, blockSize, blockSize);\r\n                }\r\n                \r\n                if ( game.currentTileX === x && game.currentTileY === y) {\r\n                    this.drawContext.strokeStyle = '#f0f';\r\n                    this.drawContext.strokeRect(x*blockSize, y*blockSize, blockSize, blockSize);\r\n                }\r\n            }\r\n        }\r\n\r\n        const playerX = game.player.position.x*blockSize;\r\n        const playerY = game.player.position.y*blockSize;\r\n        this.drawContext.strokeStyle = \"#fff\";\r\n        this.drawCircle(playerX, playerY, blockSize/2);\r\n        this.drawContext.beginPath();\r\n        this.drawContext.moveTo(playerX, playerY);\r\n        this.drawContext.lineTo(playerX + game.player.direction.x*blockSize, playerY + game.player.direction.y*blockSize);\r\n        this.drawContext.stroke();\r\n    }\r\n\r\n    private drawCircle(x: number, y: number, r: number) {\r\n        this.drawContext.beginPath();\r\n        this.drawContext.arc(x, y, r, 0, 2 * Math.PI);\r\n        this.drawContext.stroke(); \r\n    }\r\n\r\n    private getBlockColor(blockId: number): Color {\r\n        var hue = 0;\r\n        var saturation = 100;\r\n        var lightness = 50\r\n\r\n        switch(blockId) {\r\n            case 0: // Empty\r\n                saturation = 0;\r\n                lightness = 0;\r\n                break;\r\n            \r\n            default:\r\n                hue = blockId*40;\r\n                break; \r\n        }\r\n\r\n        return new Color(hue, saturation, lightness);\r\n    }\r\n}\r\n","export class ViewSprite {\r\n    public x: number;\r\n    public y: number;\r\n    public sprite: number;\r\n    public scale: number;\r\n\r\n    constructor(x: number, y: number, sprite: number, scale: number = 1) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.sprite = sprite;\r\n        this.scale = scale;\r\n    }\r\n\r\n    distanceTo(x: number, y: number) : number {\r\n        return ((x - this.x) * (x - this.x) + (y - this.y) * (y - this.y));\r\n    }\r\n}","import { World } from \"./world/world\";\r\n\r\nexport class ResourceResolver {\r\n    public parentElement: HTMLElement;\r\n    public images: Map<string, HTMLImageElement>;\r\n\r\n    constructor(parent: HTMLElement) {\r\n        this.parentElement = parent;\r\n        this.images = new Map<string, HTMLImageElement>();\r\n    }\r\n\r\n    getTextures(world: World): HTMLImageElement {\r\n        let textureImage = this.images.get(world.textures.href);\r\n        if ( textureImage != null ) {\r\n            return textureImage;\r\n        }\r\n\r\n        return this.addResource(world.textures.href);\r\n    }\r\n\r\n    getSprites(world: World): HTMLImageElement {\r\n        let spriteImage = this.images.get(world.sprites.href);\r\n        if ( spriteImage != null ) {\r\n            return spriteImage;\r\n        }\r\n\r\n        return this.addResource(world.sprites.href);\r\n    }\r\n\r\n    private addResource(url: string): HTMLImageElement {\r\n        const img = document.createElement('img');\r\n        img.src = url;\r\n        img.classList.add('hidden');\r\n        this.parentElement.appendChild(img);\r\n        this.images.set(url, img);\r\n        return img;\r\n    }\r\n}","import { RoomObject } from \"./room-object\";\r\n\r\nexport class Room {\r\n    public objects: Array<RoomObject>;\r\n    public tiles: Array<Array<number>>;\r\n    public textures: string;\r\n    public sprites: string;\r\n\r\n    public static validate(room: Room) {\r\n        if ( room.textures == null || room.textures.length < 1) {\r\n            throw new Error(`Room does not reference a texture file`);\r\n        }\r\n\r\n        if ( room.sprites == null || room.sprites.length < 1) {\r\n            throw new Error(`Room does not reference a sprites file`);\r\n        }\r\n\r\n        if ( room.objects== null || room.objects.length < 1) {\r\n            throw new Error(`Room contains no objects`);\r\n        }\r\n\r\n        if (room.tiles == null || room.tiles.length < 1) {\r\n            throw new Error(`Room contains no tiles`);\r\n        }\r\n\r\n        var tilesWidth = room.tiles[0].length;\r\n        for (let y = 0; y < room.tiles.length; y++) {\r\n            if ( room.tiles[y].length != tilesWidth) {\r\n                throw new Error(`Irregular row length for row ${y}, expected: ${tilesWidth} actual: ${room.tiles[y].length}`);\r\n            }\r\n\r\n            for (let x = 0; x < room.tiles[y].length; x++) {\r\n                if ( room.tiles[y][x] < 0 || room.tiles[y][x] > room.objects.length) {\r\n                    throw new Error(`Tile reference out of bounds at coordinates ${x},${y}. Should be between 0 and ${room.objects.length}`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","export class Vector {\r\n    public x: number;\r\n    public y: number;\r\n\r\n    constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    add(vector: Vector): Vector {\r\n        return new Vector(this.x + vector.x, this.y + vector.y);\r\n    }\r\n\r\n    rotateBy(degrees: number) {\r\n        degrees = -degrees * (Math.PI / 180);\r\n        const cos = Math.cos(degrees);\r\n        const sin = Math.sin(degrees);\r\n        const newX = Math.round(10000 * (this.x * cos - this.y * sin)) / 10000;\r\n        const newY = Math.round(10000 * (this.x * sin + this.y * cos)) / 10000;\r\n        this.x = newX;\r\n        this.y = newY;\r\n    }\r\n}","import { GameObject } from \"./game-object\";\r\nimport { DynamicObject } from \"./dynamic-object\";\r\nimport { Interactable } from \"./interactable\";\r\n\r\nexport class Door extends GameObject implements DynamicObject, Interactable {\r\n    public closed: boolean;\r\n    public openAmount: number;\r\n    public block: boolean;\r\n    public openTime: number;\r\n\r\n    constructor(texture: number, block: boolean = false) {\r\n        super(texture);\r\n        this.closed = true;\r\n        this.openAmount = 0;\r\n        this.openTime = 0;\r\n        this.block = block;\r\n    }\r\n\r\n    public override collidable(): boolean {\r\n        return this.openAmount !== 1;\r\n    }\r\n\r\n    public interact() {\r\n        if ( this.closed && this.openAmount === 0 ) {\r\n           this.closed = false;\r\n           this.openTime = 0;\r\n        } else if ( !this.closed && this.openAmount === 1) {\r\n            this.closed = true;\r\n        }\r\n    }\r\n\r\n    public step(delta: number) {\r\n        if ( this.closed && this.openAmount > 0) { \r\n            console.log(\"Closing\", this.openAmount);\r\n            this.openAmount -= delta; \r\n        }\r\n        if ( !this.closed && this.openAmount < 1) { \r\n            console.log(\"Opening\", this.openAmount);\r\n            this.openAmount += delta; \r\n        }\r\n\r\n        if ( this.openAmount > 1) { this.openAmount = 1; }\r\n        if ( this.openAmount < 0) { this.openAmount = 0; }\r\n\r\n        // Automatically start closing the door if it's open for a few seconds\r\n        if ( this.openAmount === 1) { this.openTime += delta; }\r\n        if ( this.openTime > 5) { this.closed = true; }\r\n    }\r\n}","export class GameObject {\r\n    public texture: number;\r\n\r\n    constructor(texture: number) {\r\n        this.texture = texture;\r\n    }\r\n\r\n    public collidable(): boolean {\r\n        return true;\r\n    }\r\n}","import { Sprite } from \"./sprite\"\r\nimport { Player } from \"../player\"\r\nimport { Item } from \"../item\";\r\n\r\nexport class Pickup extends Sprite {\r\n    public name: string;\r\n\r\n    constructor(sprite: number, name: string, scale: number = 1) {\r\n        super(sprite, scale);\r\n        this.name = name;\r\n    }\r\n\r\n    public override collidable(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public onPickup(player: Player) {\r\n        const existing = player.items.findIndex(i => i.name === this.name);\r\n        if ( existing >= 0)  {\r\n            player.items[existing].amount++;\r\n            return;\r\n        }\r\n\r\n        player.items.push(new Item(this.name, this.texture));\r\n        return;\r\n    }\r\n}","import { GameObject } from \"./game-object\";\r\n\r\nexport class Sprite extends GameObject{\r\n    public scale: number;\r\n    \r\n    constructor(sprite: number, scale: number = 1) {\r\n        super(sprite);\r\n        this.scale = scale;\r\n    }\r\n\r\n    distanceBetween(x: number, y: number, otherX: number, otherY: number) : number {\r\n        return ((otherX - x) * (otherX - x) + (otherY - y) * (otherY - y));\r\n    }\r\n}","import { GameObject } from \"./game-object\";\r\nimport { DynamicObject } from \"./dynamic-object\";\r\nimport { Door } from \"./door\";\r\nimport { Sprite } from \"./sprite\";\r\nimport { Room } from \"../room/room\";\r\nimport { Pickup } from \"./pickup\";\r\n\r\nexport class World {\r\n    public objects: Array<Array<GameObject | null>>;\r\n    public textures: URL;\r\n    public sprites: URL;\r\n\r\n\tpublic ceiling = 5;\r\n\tpublic floor = 2;\r\n\r\n    private dynamicObjects: Array<DynamicObject>;\r\n\r\n    private constructor() {\r\n        this.objects = [];\r\n        this.dynamicObjects = [];\r\n    }\r\n\r\n    public step(delta: number) {\r\n        this.dynamicObjects.forEach(o => o.step(delta));\r\n    }\r\n\r\n    public cacheDynamicObjects() {\r\n        this.dynamicObjects.splice(0);\r\n        for (let x = 0; x < this.objects.length; x++) {\r\n            for (let y = 0; y < this.objects[x].length; y++) {\r\n                const obj = this.objects[x][y];\r\n                if ( obj instanceof Door ) {\r\n                    this.dynamicObjects.push(obj);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public static from(room: Room, url: URL): World {\r\n        let pathParts = url.pathname.split('/');\r\n        pathParts.splice(pathParts.length-1, 1);\r\n        const basePath = pathParts.join('/');\r\n\r\n\t\tlet world = new World();\r\n        world.textures = new URL(`${basePath}/${room.textures}`, url.origin);\r\n        world.sprites = new URL(`${basePath}/${room.sprites}`, url.origin);\r\n\r\n\t\tfor (let x = 0; x < room.tiles.length; x++) {\r\n\t\t\tlet row: Array<GameObject> = [];\r\n\r\n\t\t\tfor (let y = 0; y < room.tiles[x].length; y++) {\r\n\t\t\t\tconst tile = room.tiles[x][y]-1;\r\n\t\t\t\tif ( tile < 0) {\r\n                    row.push(null);\r\n                } else {\r\n                    const obj = room.objects[tile];\r\n                    switch (obj.type) {\r\n                        case \"block\":\r\n                            row.push(new GameObject(obj[\"texture\"] as number));\r\n                            break;\r\n\r\n                        case \"door\":\r\n                            row.push(new Door(obj[\"texture\"] as number, false));\r\n                            break;\r\n\r\n                        case \"sprite\":\r\n                            row.push(new Sprite(obj[\"texture\"] as number));\r\n                            break;\r\n\r\n                        case \"item\":\r\n                            const scale = obj[\"scale\"] as number;\r\n                            row.push(new Pickup(obj[\"texture\"] as number, obj[\"name\"], scale ?? 1));\r\n                            break;\r\n\r\n                        default:\r\n                            throw new Error(`Unknown type '${obj.type}' for object ${tile} at ${y},${x}`);\r\n                    }\r\n                }\r\n\t\t\t}\r\n\r\n            world.objects.push(row);\r\n\t\t}\r\n\r\n        world.cacheDynamicObjects();\r\n        return world;\r\n\t}\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { Game } from \"./client/game\";\r\nimport { ResourceResolver } from \"./client/resource-resolver\";\r\nimport { Input } from \"./client/input\";\r\nimport { Renderer } from \"./client/rendering/renderer\";\r\n\r\nconst input = new Input();\r\ninput.attachEventListeners(document.getElementsByTagName('body')[0]);\r\n\r\nconst canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\r\nconst depth = document.getElementById(\"depth\") as HTMLCanvasElement;\r\nconst parent = document.getElementById(\"client-parent\") as HTMLElement;\r\nconst resources = new ResourceResolver(parent);\r\nconst renderer = new Renderer(1024, 768, resources, canvas, depth);\r\nconst game = new Game(renderer, input);\r\n\r\nvar url = new URL(\"./assets/room.json\", document.baseURI).href; // Local room is fallback\r\n\r\nconst params = new URLSearchParams(window.location.search);\r\nif ( params.get('url') != null) {\r\n    url = params.get('url');\r\n} \r\n\r\ngame.loadRoom(url);"],"names":["Color","hue","saturation","lightness","this","renderer","input","textureLimit","currentTileX","currentTileY","currentTime","previousTime","player","Player","loadRoom","urlString","url","URL","console","log","href","fetch","method","mode","then","response","ok","Error","json","room","Room","validate","world","World","from","tick","performance","now","delta","gameStep","step","render","window","requestAnimationFrame","bind","keyQueue","length","find","k","toggleMap","clearQueue","usePressed","leftMouseUp","ray","RayCast","position","direction","plane","hit","perpWallDist","worldObject","Door","interact","anyDirectional","mouseDragStart","movement","getMovementFromInput","x","y","newPlayerPos","add","objects","Math","floor","currentTile","collidable","Pickup","onPickup","leftPressed","rotateBy","rightPressed","xVel","yVel","upPressed","movementSpeed","downPressed","mousePosition","forward","min","max","Vector","Game","leftMousePressed","previousLeftMousePressed","attachEventListeners","el","addEventListener","e","key","push","button","rect","getBoundingClientRect","clientX","left","clientY","top","relX","changedTouches","item","relY","Input","Item","name","sprite","amount","items","degrees","RayCastResult","originPos","originDir","originPlane","cameraX","stopOnSprite","stepX","stepY","sideDistX","sideDistY","rayDirX","rayDirY","mapX","mapY","deltaDistX","abs","deltaDistY","wallX","side","texNum","wallXOffset","wallYOffset","inside","sprites","Sprite","viewSprite","ViewSprite","texture","scale","findIndex","v","openAmount","result","width","height","resResolver","canvasElement","depthBuffer","texWidth","texHeight","screenWidth","screenHeight","resourceResolver","canvas","context","getContext","drawContext","imageSmoothingEnabled","depthContext","mapVisible","game","fillStyle","fillRect","textures","getTextures","getSprites","naturalWidth","naturalHeight","font","textAlign","fillText","renderCeilingFloor","renderWalls","renderMap","renderInterface","bottom","forEach","i","n","drawImage","ceilColor","getBlockColor","ceiling","floorColor","spriteTextures","zBuffer","fill","s","lineHeight","drawStart","drawEnd","texX","textureStartX","strokeStyle","beginPath","moveTo","lineTo","stroke","sort","a","b","distanceTo","renderSpriteBillboard","maxDepth","color","pitch","spriteX","spriteY","invDet","transformX","transformY","spriteScreenX","spriteHeight","spriteWidth","drawStartX","drawEndX","stripe","spriteStartX","startY","obj","drawCircle","blockSize","block","strokeRect","playerX","playerY","r","arc","PI","blockId","Renderer","parent","parentElement","images","Map","textureImage","get","addResource","spriteImage","img","document","createElement","src","classList","appendChild","set","ResourceResolver","tiles","tilesWidth","vector","cos","sin","newX","round","newY","closed","openTime","GameObject","existing","distanceBetween","otherX","otherY","dynamicObjects","o","cacheDynamicObjects","splice","pathParts","pathname","split","basePath","join","origin","row","tile","type","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","call","getElementsByTagName","getElementById","depth","resources","baseURI","params","URLSearchParams","location","search"],"sourceRoot":""}