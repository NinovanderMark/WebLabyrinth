{"version":3,"file":"main.032370857d8d59002c20.js","mappings":"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","sources":["webpack://weblabyrinth/./src/client/color.ts","webpack://weblabyrinth/./src/client/game.ts","webpack://weblabyrinth/./src/client/input.ts","webpack://weblabyrinth/./src/client/player.ts","webpack://weblabyrinth/./src/client/renderer.ts","webpack://weblabyrinth/./src/client/static-object.ts","webpack://weblabyrinth/./src/client/vector.ts","webpack://weblabyrinth/webpack/bootstrap","webpack://weblabyrinth/./src/index.ts"],"sourcesContent":["export class Color\r\n{\r\n    hue: number;\r\n    saturation: number;\r\n    lightness: number;\r\n    \r\n    constructor(hue: number, saturation: number, lightness: number) {\r\n        this.hue = hue;\r\n        this.saturation = saturation;\r\n        this.lightness = lightness;\r\n    }\r\n}","import { Input } from './input';\r\nimport { Player } from './player';\r\nimport { Renderer } from './renderer';\r\nimport { StaticObject } from './static-object';\r\nimport { Vector } from './vector';\r\n\r\nexport class Game {\r\n    public walls = [\r\n\t\t[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2],\r\n\t\t[4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,3,0,0,0,2],\r\n\t\t[4,0,0,0,0,0,0,2,2,2,2,2,2,0,0,3,0,3,3,3,0,0,0,2],\r\n\t\t[4,0,3,3,0,0,0,2,0,0,0,0,2,0,0,0,0,0,0,3,0,0,0,2],\r\n\t\t[4,0,3,3,0,0,2,2,0,2,2,0,2,0,0,3,3,3,0,3,0,0,0,2],\r\n\t\t[4,0,3,3,0,0,2,0,0,0,2,0,2,0,0,3,0,0,0,3,0,0,0,2],\r\n\t\t[4,0,3,3,0,0,2,0,0,0,0,0,2,0,0,3,0,3,3,3,0,0,0,2],\r\n\t\t[4,0,0,0,0,0,2,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,2],\r\n\t\t[4,0,0,0,0,0,2,2,0,2,2,0,0,0,0,3,0,3,0,3,0,0,0,2],\r\n\t\t[4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],\r\n\t\t[4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],\r\n\t\t[4,0,6,6,0,6,0,0,0,0,0,5,5,5,5,5,0,0,0,0,0,0,0,2],\r\n\t\t[4,0,6,0,0,6,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,2],\r\n\t\t[4,0,0,0,0,6,0,0,0,0,0,5,5,0,0,5,0,0,0,0,0,0,0,2],\r\n\t\t[4,0,6,6,6,6,0,0,0,0,0,0,5,0,0,5,0,0,0,0,0,0,0,2],\r\n\t\t[4,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,0,0,1,0,0,1,1,2],\r\n\t\t[4,4,4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,1,0,0,0,0,2],\r\n\t\t[4,4,0,4,0,0,0,0,4,0,0,0,0,0,0,0,0,0,1,0,0,1,1,2],\r\n\t\t[4,4,0,0,0,0,5,0,4,4,0,4,4,4,0,0,0,0,1,0,0,0,0,2],\r\n\t\t[4,4,0,4,0,0,0,0,4,0,0,0,0,0,0,0,0,0,1,0,0,1,1,2],\r\n\t\t[4,4,0,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,1,0,0,0,0,2],\r\n\t\t[4,4,0,0,0,0,0,0,0,0,0,4,4,4,0,0,0,0,1,0,0,0,0,2],\r\n\t\t[4,4,4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,1,0,0,0,0,2],\r\n\t\t[4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]];\r\n\r\n\tpublic staticObjects = [\r\n\t\tnew StaticObject(16.5, 8.5, 0),\r\n\t\tnew StaticObject(18.5, 8.5, 0),\r\n\t\tnew StaticObject(11.5, 8.5, 1),\r\n\t\tnew StaticObject(19.5, 15.5, 1),\r\n\t\tnew StaticObject(19.5, 22.5, 1),\r\n\t];\r\n\r\n\tpublic ceiling = 5;\r\n\tpublic floor = 2;\r\n\r\n\tplayer: Player;\r\n\tinput: Input;\r\n\trenderer: Renderer;\r\n\t\r\n\tcurrentTileX = 0;\r\n\tcurrentTileY = 0;\r\n\r\n\tcurrentTime = 0;\r\n\tpreviousTime = 0;\r\n\r\n\tconstructor(renderer: Renderer, input: Input) {\r\n\t\tthis.renderer = renderer;\r\n\t\tthis.input = input;\r\n\t\tthis.player = new Player(17, 19);\r\n\t}\r\n\r\n\t/**\r\n\t * Progresses the game by 1 step, and schedules the next step\r\n\t */\r\n\tpublic tick() {\r\n\t\tthis.gameStep();\r\n\t\tthis.renderer.render(this);\r\n\r\n\t\twindow.requestAnimationFrame(this.tick.bind(this));\r\n\t}\r\n\r\n\tprivate gameStep() {\r\n\t\tif ( this.input.keyQueue.length > 0) {\r\n\t\t\tconsole.log(this.input.keyQueue);\r\n\t\t\tif ( this.input.keyQueue.find((k) => k === 'm') != null) {\r\n\t\t\t\tthis.renderer.toggleMap();\r\n\t\t\t}\r\n\r\n\t\t\tthis.input.clearQueue();\r\n\t\t}\r\n\r\n\t\tif ( !this.input.anyDirectional() && this.input.mouseDragStart == null ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tvar movement = this.getMovementFromInput();\r\n\t\tif ( movement.x === 0 && movement.y === 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst newPlayerX = this.player.posX + movement.x;\r\n\t\tconst newPlayerY = this.player.posY + movement.y;\r\n\r\n\t\t// Out of bounds\r\n\t\tif (newPlayerY > this.walls.length || newPlayerY < 0 || newPlayerX > this.walls[0].length || newPlayerX < 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.currentTileX = Math.floor(newPlayerX);\r\n\t\tthis.currentTileY = Math.floor(newPlayerY);\r\n\r\n\t\tconst currentTile = this.walls[this.currentTileY][this.currentTileX];\r\n\t\tif (currentTile !== 0 ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tfor (let s = 0; s < this.staticObjects.length; s++) {\r\n\t\t\tif ( this.staticObjects[s].distanceTo(newPlayerX, newPlayerY) <= 0.5) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.player.posX = newPlayerX;\r\n\t\tthis.player.posY = newPlayerY;\r\n\t}\r\n\r\n\tprivate getMovementFromInput(): Vector {\r\n\t\tif ( this.input.leftPressed) {\r\n\t\t\tthis.player.rotateBy(1.5);\r\n\t\t} else if ( this.input.rightPressed) {\r\n\t\t\tthis.player.rotateBy(-1.5);\r\n\t\t}\r\n\r\n\t\tlet xVel = 0;\r\n\t\tlet yVel = 0;\r\n\t\tif ( this.input.upPressed ) {\r\n\t\t\tyVel += this.player.direction.y * this.player.movementSpeed;\r\n\t\t\txVel += this.player.direction.x * this.player.movementSpeed;\r\n\t\t} else if (this.input.downPressed) {\r\n\t\t\tyVel -= this.player.direction.y * this.player.movementSpeed;\r\n\t\t\txVel -= this.player.direction.x * this.player.movementSpeed;\r\n\t\t} \r\n\r\n\t\tif ( this.input.mouseDragStart != null) {\r\n\t\t\tthis.player.rotateBy((this.input.mouseDragStart.x - this.input.mousePosition.x)*0.01);\r\n\t\t\tconst forward = (this.input.mouseDragStart.y - this.input.mousePosition.y) * 0.0005;\r\n\t\t\tif ( forward > 0.01 ) {\r\n\t\t\t\tyVel = this.player.direction.y * Math.min(forward, this.player.movementSpeed)\r\n\t\t\t\txVel = this.player.direction.x * Math.min(forward, this.player.movementSpeed)\r\n\t\t\t} else if (forward < -0.01) {\r\n\t\t\t\tyVel = this.player.direction.y * Math.max(forward, -this.player.movementSpeed)\r\n\t\t\t\txVel = this.player.direction.x * Math.max(forward, -this.player.movementSpeed)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn new Vector(xVel, yVel);\r\n\t}\r\n};","import { Vector } from \"./vector\";\r\n\r\nexport class Input {\r\n    public upPressed = false;\r\n    public downPressed = false;\r\n    public leftPressed = false;\r\n    public rightPressed = false;\r\n    public leftMousePressed = false;\r\n    public mouseDragStart: Vector | null = null;\r\n    public mousePosition = new Vector(0,0);\r\n    \r\n    public keyQueue = [];\r\n    \r\n    public attachEventListeners(el: HTMLElement) {\r\n        el.addEventListener(\"keydown\", (e: KeyboardEvent) => {\r\n            if (e.key === \"ArrowLeft\") { this.leftPressed = true; };\r\n            if (e.key === \"ArrowRight\") { this.rightPressed = true; };\r\n            if (e.key === \"ArrowUp\") { this.upPressed = true; };\r\n            if (e.key === \"ArrowDown\") { this.downPressed = true; };\r\n        });\r\n\r\n        el.addEventListener(\"keyup\", (e: KeyboardEvent) => {\r\n            if (e.key === \"ArrowLeft\") { this.leftPressed = false; };\r\n            if (e.key === \"ArrowRight\") { this.rightPressed = false; };\r\n            if (e.key === \"ArrowUp\") { this.upPressed = false; };\r\n            if (e.key === \"ArrowDown\") { this.downPressed = false; };\r\n            if (e.key.length === 1 ) { this.keyQueue.push(e.key); }\r\n        });\r\n\r\n        el.addEventListener(\"mousedown\", (e: MouseEvent) => {\r\n            if (e.button === 0) {\r\n                const rect = el.getBoundingClientRect();\r\n                this.leftMousePressed = true;\r\n                this.mouseDragStart = new Vector(e.clientX - rect.left, e.clientY - rect.top);\r\n            }\r\n        });\r\n\r\n        el.addEventListener(\"mousemove\", (e: MouseEvent) => {\r\n            const rect = el.getBoundingClientRect();\r\n            this.mousePosition = new Vector(e.clientX - rect.left, e.clientY - rect.top);\r\n        })\r\n\r\n        el.addEventListener(\"mouseup\", (e: MouseEvent) => {\r\n            if ( e.button === 0) {\r\n                this.leftMousePressed = false;\r\n                this.mouseDragStart = null;\r\n            }\r\n        });\r\n\r\n        el.addEventListener(\"touchstart\", (e: TouchEvent) => {\r\n            this.leftMousePressed = true;\r\n            const rect = el.getBoundingClientRect();\r\n            const relX = e.changedTouches.item(0).clientX - rect.left;\r\n            const relY = e.changedTouches.item(0).clientY - rect.top;\r\n            this.mouseDragStart = new Vector(relX, relY);\r\n        });\r\n\r\n        el.addEventListener(\"touchmove\", (e: TouchEvent) => {\r\n            const rect = el.getBoundingClientRect();\r\n            const relX = e.changedTouches.item(0).clientX - rect.left;\r\n            const relY = e.changedTouches.item(0).clientY - rect.top;\r\n            this.mousePosition = new Vector(relX, relY);\r\n        });\r\n\r\n        el.addEventListener(\"touchend\", (e: TouchEvent) => {\r\n            this.leftMousePressed = false;\r\n            this.mouseDragStart = null;\r\n        });\r\n    }\r\n\r\n    public anyDirectional(): boolean {\r\n        if (this.upPressed || this.downPressed || this.leftPressed || this.rightPressed)\r\n            return true;\r\n\r\n        return false;\r\n    }\r\n\r\n    public clearQueue() {\r\n        this.keyQueue = [];\r\n    }\r\n}","import { Vector } from './vector';\r\n\r\nexport class Player {\r\n    posX: number;\r\n    posY: number;\r\n    movementSpeed: number = 0.05;\r\n\r\n    direction: Vector;\r\n    plane: Vector;\r\n    \r\n    constructor(x: number, y: number) {\r\n        this.posX = x;\r\n        this.posY = y;\r\n        this.direction = new Vector(0, -1);\r\n        this.plane = new Vector(0.66, 0);\r\n    }\r\n\r\n    rotateBy(degrees: number) {\r\n        this.direction.rotateBy(degrees);\r\n        this.plane.rotateBy(degrees);\r\n    }\r\n}","import { Game } from \"../client/game\";\r\nimport { Color } from \"./color\";\r\nimport { StaticObject } from \"./static-object\";\r\n\r\nexport class Renderer {\r\n    screenWidth: number;\r\n\tscreenHeight: number;\r\n\tcanvas: HTMLCanvasElement;\r\n\r\n\tdrawContext: CanvasRenderingContext2D;\r\n    depthContext: CanvasRenderingContext2D;\r\n    mapVisible: boolean;\r\n    textures: HTMLImageElement;\r\n    sprites: HTMLImageElement;\r\n\r\n    texWidth = 64;\r\n    texHeight = 64;\r\n\r\n    constructor(width: number, height: number, canvasElement: HTMLCanvasElement, textures: HTMLImageElement, sprites: HTMLImageElement,\r\n        depthBuffer?: HTMLCanvasElement) {\r\n        this.screenWidth = width;\r\n\t\tthis.screenHeight = height;\r\n\r\n        this.textures = textures;\r\n        this.sprites = sprites;\r\n\t\tthis.canvas = canvasElement;\r\n\t\tthis.canvas.width = this.screenWidth;\r\n\t\tthis.canvas.height = this.screenHeight;\r\n\r\n        let context = this.canvas.getContext('2d');\r\n\t\tif ( context == null) {\r\n\t\t\tthrow new Error(\"Unable to get 2D rendering context from Canvas\");\r\n        }\r\n\r\n\t\tthis.drawContext = context;\r\n        this.drawContext.imageSmoothingEnabled = false;\r\n\r\n        if ( depthBuffer != null) {\r\n            this.depthContext = depthBuffer.getContext('2d');\r\n        }\r\n    }\r\n\r\n    public toggleMap() {\r\n        this.mapVisible = !this.mapVisible;\r\n    }\r\n\r\n    public render(game: Game) {\r\n        this.drawContext.fillStyle = \"#000\";\r\n        this.drawContext.fillRect(0,0,this.screenWidth, this.screenHeight);\r\n    \r\n        this.renderCeilingFloor(game);\r\n        this.renderWalls(game);\r\n\r\n        if ( this.mapVisible ) {\r\n            this.renderMap(game);\r\n        }\r\n    }\r\n\r\n    private renderCeilingFloor(game: Game) {\r\n        // Temporary implementation\r\n        var ceilColor = this.getBlockColor(game.ceiling);\r\n        this.drawContext.fillStyle = \"hsl(\" + ceilColor.hue + \",\" + ceilColor.saturation + \"%,\" + ceilColor.lightness/2 + \"%)\";\r\n        this.drawContext.fillRect(0, 0, this.screenWidth, this.screenHeight/2);\r\n\r\n        var floorColor = this.getBlockColor(game.floor);\r\n        this.drawContext.fillStyle = \"hsl(\" + floorColor.hue + \",\" + floorColor.saturation + \"%,\" + floorColor.lightness/4 + \"%)\";\r\n        this.drawContext.fillRect(0, this.screenHeight/2, this.screenWidth, this.screenHeight/2);\r\n    }\r\n\r\n    private renderWalls(game: Game) {\r\n        const pitch = 0;\r\n        var zBuffer: Array<number> = [];\r\n        zBuffer.fill(0, 0, this.screenWidth);\r\n\r\n        for(var x = 0; x < this.screenWidth; x++) {\r\n            var cameraX = 2 * x / this.screenWidth - 1; // X coordinate in camera space\r\n            var rayDirX = game.player.direction.x + game.player.plane.x * cameraX;\r\n            var rayDirY = game.player.direction.y + game.player.plane.y * cameraX;\r\n    \r\n            // Which box of the map we're in\r\n            var mapX = Math.floor(game.player.posX);\r\n            var mapY = Math.floor(game.player.posY);\r\n    \r\n            // Length of ray from one X or Y-side to next X or Y-side\r\n            var deltaDistX = Math.abs(1/rayDirX);\r\n            var deltaDistY = Math.abs(1/rayDirY);\r\n\r\n            // What direction to step in X or Y-direction (either +1 or -1)\r\n            var stepX;\r\n            var stepY;\r\n    \r\n            // Length of array from current position to next X or Y-side\r\n            var sideDistX;\r\n            var sideDistY;\r\n\r\n            // Calculate step and initial sideDist\r\n            if (rayDirX < 0)\r\n            {\r\n                stepX = -1;\r\n                sideDistX = (game.player.posX - mapX) * deltaDistX;\r\n            }\r\n            else\r\n            {\r\n                stepX = 1;\r\n                sideDistX = (mapX + 1.0 - game.player.posX) * deltaDistX;\r\n            }\r\n            if (rayDirY < 0)\r\n            {\r\n                stepY = -1;\r\n                sideDistY = (game.player.posY - mapY) * deltaDistY;\r\n            }\r\n            else\r\n            {\r\n                stepY = 1;\r\n                sideDistY = (mapY + 1.0 - game.player.posY) * deltaDistY;\r\n            }\r\n\r\n            var hit = 0;\r\n            var side;\r\n    \r\n            // Perform DDA\r\n            while (hit === 0)\r\n            {\r\n                // Jump to next map square, OR in X-direction, OR in Y-direction\r\n                if (sideDistX < sideDistY)\r\n                {\r\n                    sideDistX += deltaDistX;\r\n                    mapX += stepX;\r\n                    side = 0;\r\n                }\r\n                else\r\n                {\r\n                    sideDistY += deltaDistY;\r\n                    mapY += stepY;\r\n                    side = 1;\r\n                }\r\n                // Check if ray has hit a wall\r\n                if (game.walls[mapY][mapX] > 0) hit = 1;\r\n            }\r\n    \r\n            var perpWallDist;\r\n\r\n            // Calculate distance projected on camera direction (Euclidean distance will give fisheye effect!)\r\n            if (side === 0) perpWallDist = (mapX - game.player.posX + (1 - stepX) / 2) / rayDirX;\r\n            else           perpWallDist = (mapY - game.player.posY + (1 - stepY) / 2) / rayDirY;\r\n    \r\n            // Calculate height of line to draw on screen\r\n            var lineHeight = Math.floor(this.screenHeight / perpWallDist);\r\n\r\n            // Calculate lowest and highest pixel to fill in current stripe\r\n            const drawStart = -lineHeight / 2 + this.screenHeight / 2 + pitch;\r\n            const drawEnd = lineHeight / 2 + this.screenHeight / 2 + pitch;\r\n\r\n            var texNum = game.walls[mapY][mapX] - 1;\r\n\r\n            //calculate value of wallX\r\n            var wallX; //where exactly the wall was hit\r\n            if (side == 0) wallX = game.player.posY + perpWallDist * rayDirY;\r\n            else           wallX = game.player.posX + perpWallDist * rayDirX;\r\n            wallX -= Math.floor(wallX);\r\n\r\n            //x coordinate on the texture\r\n            var texX = wallX * this.texWidth;\r\n            if(side == 0 && rayDirX > 0) texX = this.texWidth - texX;\r\n            if(side == 1 && rayDirY < 0) texX = this.texWidth - texX;\r\n\r\n            const textureStartX = Math.floor(this.texWidth+(texNum*this.texWidth)-texX);\r\n            this.drawContext.drawImage(this.textures, textureStartX, 0, 1, this.texHeight, x, drawStart, 1, drawEnd - drawStart);\r\n            if ( side === 1 ) { \r\n                this.drawContext.strokeStyle = 'rgba(0,0,0,0.6)';\r\n                this.drawContext.beginPath();\r\n                this.drawContext.moveTo(x, drawStart);\r\n                this.drawContext.lineTo(x, drawEnd);\r\n                this.drawContext.stroke();\r\n            }\r\n\r\n            zBuffer[x] = perpWallDist;\r\n        }\r\n\r\n        var sortedSprites: Array<StaticObject> = [...game.staticObjects];\r\n        sortedSprites.sort((a: StaticObject, b: StaticObject): number => {\r\n            return b.distanceTo(game.player.posX, game.player.posY) - a.distanceTo(game.player.posX, game.player.posY);\r\n        });\r\n\r\n        //after sorting the sprites, do the projection and draw them\r\n        for(var i = 0; i < sortedSprites.length; i++)\r\n        {\r\n            //translate sprite position to relative to camera\r\n            const spriteX = sortedSprites[i].x - game.player.posX;\r\n            const spriteY = sortedSprites[i].y - game.player.posY;\r\n\r\n            const invDet = 1.0 / (game.player.plane.x * game.player.direction.y - game.player.direction.x * game.player.plane.y); //required for correct matrix multiplication\r\n\r\n            const transformX = invDet * (game.player.direction.y * spriteX - game.player.direction.x * spriteY);\r\n            const transformY = invDet * (-game.player.plane.y * spriteX + game.player.plane.x * spriteY); //this is actually the depth inside the screen, that what Z is in 3D\r\n\r\n            const spriteScreenX = Math.floor((this.screenWidth / 2) * (1 + transformX / transformY));\r\n\r\n            //calculate height of the sprite on screen\r\n            const spriteHeight = Math.abs(Math.floor(this.screenHeight / (transformY))); //using 'transformY' instead of the real distance prevents fisheye\r\n\r\n            //calculate width of the sprite\r\n            const spriteWidth = Math.abs(Math.floor(this.screenHeight / (transformY)));\r\n            var drawStartX = Math.floor(-spriteWidth / 2 + spriteScreenX);\r\n            if(drawStartX < 0) drawStartX = 0;\r\n            var drawEndX = spriteWidth / 2 + spriteScreenX;\r\n            if(drawEndX >= this.screenWidth) drawEndX = this.screenWidth - 1;\r\n\r\n            //loop through every vertical stripe of the sprite on screen\r\n            for(var stripe = drawStartX; stripe < drawEndX; stripe++)\r\n            {\r\n                const texX = Math.floor((stripe - (-spriteWidth / 2 + spriteScreenX)) * this.texWidth / spriteWidth);\r\n                //the conditions in the if are:\r\n                //1) it's in front of camera plane so you don't see things behind you\r\n                //2) it's on the screen (left)\r\n                //3) it's on the screen (right)\r\n                //4) ZBuffer, with perpendicular distance\r\n                if(transformY > 0 && stripe > 0 && stripe < this.screenWidth && transformY < zBuffer[stripe]) {\r\n                    const spriteStartX = (sortedSprites[i].sprite * this.texWidth) + texX;\r\n                    const startY = -(spriteHeight/2) + (this.screenHeight / 2) + pitch;\r\n                    this.drawContext.drawImage(this.sprites, spriteStartX, 0, 1, this.texHeight, stripe, startY, 1, spriteHeight);\r\n                    zBuffer[stripe] = transformY;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.depthContext == null) {\r\n            return;\r\n        }\r\n\r\n        var maxDepth = game.walls.length;\r\n        for (let x = 0; x < this.screenWidth; x++) {\r\n            const color = (zBuffer[x] / maxDepth) * 100;\r\n            this.depthContext.strokeStyle = `hsl(0, 0%, ${100-color}%)`\r\n            this.depthContext.beginPath();\r\n            this.depthContext.moveTo(x, 0);\r\n            this.depthContext.lineTo(x, this.screenHeight);\r\n            this.depthContext.stroke();\r\n        }\r\n    }\r\n\r\n    private renderMap(game: Game) {\r\n        const blockSize = 8;\r\n        this.drawContext.strokeStyle = '#f0f';\r\n\r\n        for (var y = 0; y < game.walls.length; y++) {\r\n            for (var x = 0; x < game.walls[y].length; x++) {\r\n                var color = this.getBlockColor(game.walls[y][x]);\r\n                this.drawContext.fillStyle = \"hsl(\" + color.hue + \",\" + color.saturation + \"%,\" + color.lightness + \"%)\";\r\n                this.drawContext.fillRect(x*blockSize, y*blockSize, blockSize, blockSize);\r\n                if ( game.currentTileX === x && game.currentTileY === y) {\r\n                    this.drawContext.strokeRect(x*blockSize, y*blockSize, blockSize, blockSize);\r\n                }\r\n            }\r\n        }\r\n        \r\n        this.drawContext.strokeStyle = '#f77';\r\n        game.staticObjects.forEach(o => {\r\n            this.drawCircle(o.x*blockSize, o.y*blockSize, blockSize/2);\r\n        })\r\n\r\n        const playerX = game.player.posX*blockSize;\r\n        const playerY = game.player.posY*blockSize;\r\n        this.drawContext.strokeStyle = \"#fff\";\r\n        this.drawCircle(playerX, playerY, blockSize/2);\r\n        this.drawContext.beginPath();\r\n        this.drawContext.moveTo(playerX, playerY);\r\n        this.drawContext.lineTo(playerX + game.player.direction.x*blockSize, playerY + game.player.direction.y*blockSize);\r\n        this.drawContext.stroke();\r\n    }\r\n\r\n    private drawCircle(x: number, y: number, r: number) {\r\n        this.drawContext.beginPath();\r\n        this.drawContext.arc(x, y, r, 0, 2 * Math.PI);\r\n        this.drawContext.stroke(); \r\n    }\r\n\r\n    private getBlockColor(blockId: number): Color {\r\n        var hue = 0;\r\n        var saturation = 100;\r\n        var lightness = 50\r\n\r\n        switch(blockId) {\r\n            case 0: // Empty\r\n                saturation = 0;\r\n                lightness = 0;\r\n                break;\r\n            \r\n            default:\r\n                hue = blockId*40;\r\n                break; \r\n        }\r\n\r\n        return new Color(hue, saturation, lightness);\r\n    }\r\n}\r\n","export class StaticObject {\r\n    x: number;\r\n    y: number;\r\n    sprite: number;\r\n\r\n    constructor(x: number, y: number, sprite: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.sprite = sprite;\r\n    }\r\n\r\n    distanceTo(x: number, y: number) : number {\r\n        return ((x - this.x) * (x - this.x) + (y - this.y) * (y - this.y));\r\n    }\r\n}","export class Vector {\r\n    public x: number;\r\n    public y: number;\r\n\r\n    constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    rotateBy(degrees: number) {\r\n        degrees = -degrees * (Math.PI / 180);\r\n        const cos = Math.cos(degrees);\r\n        const sin = Math.sin(degrees);\r\n        const newX = Math.round(10000 * (this.x * cos - this.y * sin)) / 10000;\r\n        const newY = Math.round(10000 * (this.x * sin + this.y * cos)) / 10000;\r\n        this.x = newX;\r\n        this.y = newY;\r\n    }\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { Game } from \"./client/game\";\r\nimport { Input } from \"./client/input\";\r\nimport { Renderer } from \"./client/renderer\";\r\n\r\nconst input = new Input();\r\ninput.attachEventListeners(document.getElementsByTagName('body')[0]);\r\n\r\nconst canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\r\nconst depth = document.getElementById(\"depth\") as HTMLCanvasElement;\r\nconst textures = document.getElementById(\"textures\") as HTMLImageElement;\r\nconst sprites = document.getElementById(\"sprites\") as HTMLImageElement;\r\nvar renderer = new Renderer(1024, 768, canvas, textures, sprites, depth);\r\nvar game = new Game(renderer, input);\r\ngame.tick();\r\n"],"names":["Color","hue","saturation","lightness","this","renderer","input","walls","staticObjects","StaticObject","ceiling","floor","currentTileX","currentTileY","currentTime","previousTime","player","Player","tick","gameStep","render","window","requestAnimationFrame","bind","keyQueue","length","console","log","find","k","toggleMap","clearQueue","anyDirectional","mouseDragStart","movement","getMovementFromInput","x","y","newPlayerX","posX","newPlayerY","posY","Math","s","distanceTo","leftPressed","rotateBy","rightPressed","xVel","yVel","upPressed","direction","movementSpeed","downPressed","mousePosition","forward","min","max","Vector","Game","leftMousePressed","attachEventListeners","el","addEventListener","e","key","push","button","rect","getBoundingClientRect","clientX","left","clientY","top","relX","changedTouches","item","relY","Input","plane","degrees","width","height","canvasElement","textures","sprites","depthBuffer","texWidth","texHeight","screenWidth","screenHeight","canvas","context","getContext","Error","drawContext","imageSmoothingEnabled","depthContext","mapVisible","game","fillStyle","fillRect","renderCeilingFloor","renderWalls","renderMap","ceilColor","getBlockColor","floorColor","zBuffer","fill","stepX","stepY","sideDistX","sideDistY","cameraX","rayDirX","rayDirY","mapX","mapY","deltaDistX","abs","deltaDistY","side","perpWallDist","hit","wallX","lineHeight","drawStart","drawEnd","texNum","texX","textureStartX","drawImage","strokeStyle","beginPath","moveTo","lineTo","stroke","sortedSprites","sort","a","b","i","spriteX","spriteY","invDet","transformX","transformY","spriteScreenX","spriteHeight","spriteWidth","drawStartX","drawEndX","stripe","spriteStartX","sprite","startY","maxDepth","color","strokeRect","forEach","o","drawCircle","blockSize","playerX","playerY","r","arc","PI","blockId","Renderer","cos","sin","newX","round","newY","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","call","document","getElementsByTagName","getElementById","depth"],"sourceRoot":""}