{"version":3,"file":"main.7d0a26dbe7d1f5c347cf.js","mappings":"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","sources":["webpack://weblabyrinth/./src/client/color.ts","webpack://weblabyrinth/./src/client/game.ts","webpack://weblabyrinth/./src/client/input.ts","webpack://weblabyrinth/./src/client/player.ts","webpack://weblabyrinth/./src/client/raycast.ts","webpack://weblabyrinth/./src/client/rendering/renderer.ts","webpack://weblabyrinth/./src/client/rendering/view-sprite.ts","webpack://weblabyrinth/./src/client/resource-resolver.ts","webpack://weblabyrinth/./src/client/room/room.ts","webpack://weblabyrinth/./src/client/vector.ts","webpack://weblabyrinth/./src/client/world/door.ts","webpack://weblabyrinth/./src/client/world/game-object.ts","webpack://weblabyrinth/./src/client/world/sprite.ts","webpack://weblabyrinth/./src/client/world/world.ts","webpack://weblabyrinth/webpack/bootstrap","webpack://weblabyrinth/./src/index.ts"],"sourcesContent":["export class Color\r\n{\r\n    hue: number;\r\n    saturation: number;\r\n    lightness: number;\r\n    \r\n    constructor(hue: number, saturation: number, lightness: number) {\r\n        this.hue = hue;\r\n        this.saturation = saturation;\r\n        this.lightness = lightness;\r\n    }\r\n}","import { Room } from \"./room/room\";\r\nimport { Input } from './input';\r\nimport { Player } from './player';\r\nimport { Renderer } from './rendering/renderer';\r\nimport { World } from './world/world';\r\nimport { Vector } from './vector';\r\nimport { RayCast } from \"./raycast\";\r\nimport { Door } from './world/door';\r\nimport { Interactable } from './world/interactable';\r\n\r\nexport class Game {\r\n\tpublic readonly textureLimit: number = 16;\r\n\r\n    public world: World;\r\n\r\n\tplayer: Player;\r\n\tinput: Input;\r\n\trenderer: Renderer;\r\n\t\r\n\tcurrentTileX = 0;\r\n\tcurrentTileY = 0;\r\n\r\n\tcurrentTime = 0;\r\n\tpreviousTime = 0;\r\n\r\n\tconstructor(renderer: Renderer, input: Input) {\r\n\t\tthis.renderer = renderer;\r\n\t\tthis.input = input;\r\n\t\tthis.player = new Player(17, 19);\r\n\t}\r\n\r\n\tpublic loadRoom(urlString: string) {\r\n\t\tconst url = new URL(urlString);\r\n\t\tconsole.log('Loading new room from URL', url.href);\r\n\r\n\t\tfetch(url.href).then((response) => {\r\n\t\t\tif ( response.ok ) {\r\n\t\t\t\tresponse.json().then(json => {\r\n\t\t\t\t\tconst room = json as Room;\r\n\t\t\t\t\tRoom.validate(room);\r\n\t\t\t\t\tthis.world = World.from(room, url);\r\n\t\t\t\t\tthis.tick();\r\n\t\t\t\t})\r\n\t\t\t} else {\r\n\t\t\t\tthrow new Error(`Unable to retrieve room at URL: ${urlString}`);\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Progresses the game by 1 step, and schedules the next step\r\n\t */\r\n\tpublic tick() {\r\n\t\tif (this.previousTime=== 0 ) {\r\n\t\t\tthis.previousTime = performance.now();\r\n\t\t} else {\r\n\t\t\tthis.previousTime = this.currentTime;\r\n\t\t}\r\n\r\n\t\tthis.currentTime = performance.now();\r\n\r\n\t\tconst delta = (this.currentTime - this.previousTime)/1000;\r\n\t\tthis.gameStep(delta);\r\n\t\tthis.world.step(delta);\r\n\t\tthis.renderer.render(this);\r\n\r\n\t\twindow.requestAnimationFrame(this.tick.bind(this));\r\n\t}\r\n\r\n\tprivate gameStep(delta: number) {\r\n\t\tif ( this.input.keyQueue.length > 0) {\r\n\t\t\tif ( this.input.keyQueue.find((k) => k === 'm') != null) {\r\n\t\t\t\tthis.renderer.toggleMap();\r\n\t\t\t}\r\n\r\n\t\t\tthis.input.clearQueue();\r\n\t\t}\r\n\r\n\t\t// Interact with doors\r\n\t\tif ( this.input.usePressed || this.input.leftMouseUp ) {\r\n\t\t\tconst ray = RayCast.ray(this.player.position, this.player.direction, this.player.plane, 0, this.world);\r\n\t\t\tif ( ray.hit && ray.perpWallDist < 2 ) {\r\n\t\t\t\tif ( ray.worldObject instanceof Door) {\r\n\t\t\t\t\tray.worldObject.interact();\r\n\t\t\t\t}\r\n\t\t\t} \r\n\t\t}\r\n\r\n\t\tif ( !this.input.anyDirectional() && this.input.mouseDragStart == null ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tvar movement = this.getMovementFromInput();\r\n\t\tif ( movement.x === 0 && movement.y === 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst newPlayerPos = this.player.position.add(movement);\r\n\r\n\t\t// Out of bounds\r\n\t\tif (newPlayerPos.y > this.world.objects.length || newPlayerPos.y < 0 || \r\n\t\t\tnewPlayerPos.x > this.world.objects[0].length || newPlayerPos.x < 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.currentTileX = Math.floor(newPlayerPos.x);\r\n\t\tthis.currentTileY = Math.floor(newPlayerPos.y);\r\n\r\n\t\tconst currentTile = this.world.objects[this.currentTileY][this.currentTileX];\r\n\t\tif (currentTile != null && currentTile.collidable()) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.player.position = newPlayerPos;\r\n\t}\r\n\r\n\tprivate getMovementFromInput(): Vector {\r\n\t\tif ( this.input.leftPressed) {\r\n\t\t\tthis.player.rotateBy(1.5);\r\n\t\t} else if ( this.input.rightPressed) {\r\n\t\t\tthis.player.rotateBy(-1.5);\r\n\t\t}\r\n\r\n\t\tlet xVel = 0;\r\n\t\tlet yVel = 0;\r\n\t\tif ( this.input.upPressed ) {\r\n\t\t\tyVel += this.player.direction.y * this.player.movementSpeed;\r\n\t\t\txVel += this.player.direction.x * this.player.movementSpeed;\r\n\t\t} else if (this.input.downPressed) {\r\n\t\t\tyVel -= this.player.direction.y * this.player.movementSpeed;\r\n\t\t\txVel -= this.player.direction.x * this.player.movementSpeed;\r\n\t\t} \r\n\r\n\t\tif ( this.input.mouseDragStart != null) {\r\n\t\t\tthis.player.rotateBy((this.input.mouseDragStart.x - this.input.mousePosition.x)*0.01);\r\n\t\t\tconst forward = (this.input.mouseDragStart.y - this.input.mousePosition.y) * 0.0005;\r\n\t\t\tif ( forward > 0.01 ) {\r\n\t\t\t\tyVel = this.player.direction.y * Math.min(forward, this.player.movementSpeed)\r\n\t\t\t\txVel = this.player.direction.x * Math.min(forward, this.player.movementSpeed)\r\n\t\t\t} else if (forward < -0.01) {\r\n\t\t\t\tyVel = this.player.direction.y * Math.max(forward, -this.player.movementSpeed)\r\n\t\t\t\txVel = this.player.direction.x * Math.max(forward, -this.player.movementSpeed)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn new Vector(xVel, yVel);\r\n\t}\r\n};","import { Vector } from \"./vector\";\r\n\r\nexport class Input {\r\n    public upPressed = false;\r\n    public downPressed = false;\r\n    public leftPressed = false;\r\n    public rightPressed = false;\r\n    public usePressed = false;\r\n\r\n    public leftMousePressed = false;\r\n    public previousLeftMousePressed = false;\r\n    public mouseDragStart: Vector | null = null;\r\n    public mousePosition = new Vector(0,0);\r\n    \r\n    public keyQueue = [];\r\n    \r\n    public get leftMouseUp(): boolean {\r\n        if ( this.previousLeftMousePressed) {\r\n            this.previousLeftMousePressed = false;\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public attachEventListeners(el: HTMLElement) {\r\n        el.addEventListener(\"keydown\", (e: KeyboardEvent) => {\r\n            if (e.key === \"ArrowLeft\") { this.leftPressed = true; };\r\n            if (e.key === \"ArrowRight\") { this.rightPressed = true; };\r\n            if (e.key === \"ArrowUp\") { this.upPressed = true; };\r\n            if (e.key === \"ArrowDown\") { this.downPressed = true; };\r\n            if (e.key === \" \" ) {this.usePressed = true;}\r\n        });\r\n\r\n        el.addEventListener(\"keyup\", (e: KeyboardEvent) => {\r\n            if (e.key === \"ArrowLeft\") { this.leftPressed = false; };\r\n            if (e.key === \"ArrowRight\") { this.rightPressed = false; };\r\n            if (e.key === \"ArrowUp\") { this.upPressed = false; };\r\n            if (e.key === \"ArrowDown\") { this.downPressed = false; };\r\n            if (e.key === \" \" ) {this.usePressed = false;}\r\n            if (e.key.length === 1 ) { this.keyQueue.push(e.key); }\r\n        });\r\n\r\n        el.addEventListener(\"mousedown\", (e: MouseEvent) => {\r\n            if (e.button === 0) {\r\n                const rect = el.getBoundingClientRect();\r\n                this.leftMousePressed = true;\r\n                this.mouseDragStart = new Vector(e.clientX - rect.left, e.clientY - rect.top);\r\n            }\r\n        });\r\n\r\n        el.addEventListener(\"mousemove\", (e: MouseEvent) => {\r\n            const rect = el.getBoundingClientRect();\r\n            this.mousePosition = new Vector(e.clientX - rect.left, e.clientY - rect.top);\r\n        })\r\n\r\n        el.addEventListener(\"mouseup\", (e: MouseEvent) => {\r\n            if ( e.button === 0) {\r\n                this.leftMousePressed = false;\r\n                this.previousLeftMousePressed = true;\r\n                this.mouseDragStart = null;\r\n            }\r\n        });\r\n\r\n        el.addEventListener(\"touchstart\", (e: TouchEvent) => {\r\n            this.leftMousePressed = true;\r\n            const rect = el.getBoundingClientRect();\r\n            const relX = e.changedTouches.item(0).clientX - rect.left;\r\n            const relY = e.changedTouches.item(0).clientY - rect.top;\r\n            this.mouseDragStart = new Vector(relX, relY);\r\n        });\r\n\r\n        el.addEventListener(\"touchmove\", (e: TouchEvent) => {\r\n            const rect = el.getBoundingClientRect();\r\n            const relX = e.changedTouches.item(0).clientX - rect.left;\r\n            const relY = e.changedTouches.item(0).clientY - rect.top;\r\n            this.mousePosition = new Vector(relX, relY);\r\n        });\r\n\r\n        el.addEventListener(\"touchend\", (e: TouchEvent) => {\r\n            this.leftMousePressed = false;\r\n            this.previousLeftMousePressed = true;\r\n            this.mouseDragStart = null;\r\n        });\r\n    }\r\n\r\n    public anyDirectional(): boolean {\r\n        if (this.upPressed || this.downPressed || this.leftPressed || this.rightPressed)\r\n            return true;\r\n\r\n        return false;\r\n    }\r\n\r\n    public clearQueue() {\r\n        this.keyQueue = [];\r\n    }\r\n}\r\n","import { Vector } from './vector';\r\n\r\nexport class Player {\r\n    movementSpeed: number = 0.05;\r\n\r\n    position: Vector;\r\n    direction: Vector;\r\n    plane: Vector;\r\n    \r\n    constructor(x: number, y: number) {\r\n        this.position = new Vector(x, y);\r\n        this.direction = new Vector(0, -1);\r\n        this.plane = new Vector(0.66, 0);\r\n    }\r\n\r\n    rotateBy(degrees: number) {\r\n        this.direction.rotateBy(degrees);\r\n        this.plane.rotateBy(degrees);\r\n    }\r\n}","import { World } from \"./world/world\";\r\nimport { Vector } from \"./vector\";\r\nimport { ViewSprite } from \"./rendering/view-sprite\";\r\nimport { Sprite } from \"./world/sprite\";\r\nimport { Door } from \"./world/door\";\r\nimport { GameObject } from \"./world/game-object\";\r\n\r\nexport class RayCastResult {\r\n    public sprites: Array<ViewSprite>;\r\n    public perpWallDist: number;\r\n    public worldObject: GameObject | null;\r\n    public inside: boolean;\r\n    public hit: boolean;\r\n    public side: number;\r\n    public texture: number;\r\n    public direction: Vector;\r\n}\r\n\r\nexport class RayCast {\r\n    public static ray(originPos: Vector, originDir: Vector, originPlane: Vector, cameraX: number, world: World, stopOnSprite: boolean = false): RayCastResult {\r\n        var rayDirX = originDir.x + originPlane.x * cameraX;\r\n        var rayDirY = originDir.y + originPlane.y * cameraX;\r\n\r\n        // Which box of the map we're in\r\n        var mapX = Math.floor(originPos.x);\r\n        var mapY = Math.floor(originPos.y);\r\n\r\n        // Length of ray from one X or Y-side to next X or Y-side\r\n        var deltaDistX = Math.abs(1/rayDirX);\r\n        var deltaDistY = Math.abs(1/rayDirY);\r\n\r\n        // What direction to step in X or Y-direction (either +1 or -1)\r\n        var stepX;\r\n        var stepY;\r\n\r\n        // Length of array from current position to next X or Y-side\r\n        var sideDistX;\r\n        var sideDistY;\r\n\r\n        // Calculate step and initial sideDist\r\n        if (rayDirX < 0)\r\n        {\r\n            stepX = -1;\r\n            sideDistX = (originPos.x - mapX) * deltaDistX;\r\n        }\r\n        else\r\n        {\r\n            stepX = 1;\r\n            sideDistX = (mapX + 1 - originPos.x) * deltaDistX;\r\n        }\r\n        if (rayDirY < 0)\r\n        {\r\n            stepY = -1;\r\n            sideDistY = (originPos.y - mapY) * deltaDistY;\r\n        }\r\n        else\r\n        {\r\n            stepY = 1;\r\n            sideDistY = (mapY + 1 - originPos.y) * deltaDistY;\r\n        }\r\n\r\n        var hit = 0;\r\n        var wallXOffset = 0;\r\n        var wallYOffset = 0;\r\n        var inside = false\r\n\r\n        const sprites: Array<ViewSprite> = [];\r\n        var wallX: number;\r\n        var side: number;\r\n        var texNum: number;\r\n        var worldObject: GameObject;\r\n        \r\n        // Perform DDA\r\n        while (hit === 0)\r\n        {\r\n            // Jump to next map square, OR in X-direction, OR in Y-direction\r\n            if (sideDistX < sideDistY)\r\n            {\r\n                sideDistX += deltaDistX;\r\n                mapX += stepX;\r\n                side = 0;\r\n            }\r\n            else\r\n            {\r\n                sideDistY += deltaDistY;\r\n                mapY += stepY;\r\n                side = 1;\r\n            }\r\n            // Check if ray has hit a wall\r\n            worldObject = world.objects[mapY][mapX];\r\n            if ( worldObject == null) continue;\r\n\r\n            if ( worldObject instanceof Sprite ) {\r\n                var viewSprite = new ViewSprite(mapX+0.5, mapY+0.5, worldObject.texture);\r\n                if ( sprites.findIndex(v => v.x === viewSprite.x && v.y === viewSprite.y) < 0) {\r\n                    sprites.push(viewSprite);\r\n                }\r\n                if ( stopOnSprite ) {\r\n                    hit = 1;\r\n                }\r\n                continue;\r\n            } else if ( worldObject instanceof Door) {\r\n                texNum = worldObject.texture;\r\n                hit = 1;\r\n                if (side == 1) {\r\n                    wallYOffset = 0.5 * stepY;\r\n                    perpWallDist = (mapY - originPos.y + wallYOffset + (1 - stepY) / 2) / rayDirY;\r\n                    if (sideDistY - (deltaDistY/2) < sideDistX) { //If ray hits offset wall\r\n                        wallX = originPos.x + perpWallDist * rayDirX;\r\n                        wallX -= Math.floor(wallX);\r\n                        if ( wallX <= worldObject.openAmount){\r\n                            hit = 0; //Continue raycast for open/opening doors\r\n                            wallYOffset = 0;\r\n                        }\r\n                    } else {\r\n                        mapX += stepX;\r\n                        side = 0;\r\n                        inside =  true;\r\n                        wallYOffset = 0;\r\n                        texNum = world.objects[mapY][mapX].texture;\r\n                    }\r\n                } else { //side == 0\r\n                    wallXOffset = 0.5 * stepX;\r\n                    perpWallDist  = (mapX - originPos.x + wallXOffset + (1 - stepX) / 2) / rayDirX;\r\n                    if (sideDistX - (deltaDistX/2) < sideDistY) {\r\n                        wallX = originPos.y + perpWallDist * rayDirY;\r\n                        wallX -= Math.floor(wallX);\r\n                        if ( wallX < worldObject.openAmount) {\r\n                            hit = 0;\r\n                            wallXOffset = 0;\r\n                        }\r\n                    } else {\r\n                        mapY += stepY;\r\n                        side = 1;\r\n                        inside = true;\r\n                        wallXOffset = 0;\r\n                        texNum = world.objects[mapY][mapX].texture;\r\n                    }\r\n                }\r\n            } else {\r\n                texNum = worldObject.texture;\r\n                hit = 1;\r\n            }\r\n        }\r\n\r\n        var perpWallDist;\r\n\r\n        // Calculate distance projected on camera direction (Euclidean distance will give fisheye effect!)\r\n        if (side === 0) perpWallDist = (mapX - originPos.x + wallXOffset + (1 - stepX) / 2) / rayDirX;\r\n        else           perpWallDist = (mapY - originPos.y + wallYOffset + (1 - stepY) / 2) / rayDirY;\r\n\r\n            var result = new RayCastResult();\r\n            result.sprites = sprites;\r\n            result.hit = hit === 1;\r\n            result.side = side;\r\n            result.perpWallDist = perpWallDist;\r\n            result.inside = inside;\r\n            result.worldObject = worldObject;\r\n            result.texture = texNum;\r\n            result.direction = new Vector(rayDirX, rayDirY);\r\n            return result;\r\n    }\r\n}","import { Game } from \"../game\";\r\nimport { Color } from \"../color\";\r\nimport { Sprite } from \"../world/sprite\";\r\nimport { ViewSprite } from \"./view-sprite\";\r\nimport { Door } from \"../world/door\";\r\nimport { GameObject } from \"../world/game-object\";\r\nimport { RayCast } from \"../raycast\";\r\nimport { ResourceResolver } from \"../resource-resolver\";\r\n\r\nexport class Renderer {\r\n    screenWidth: number;\r\n\tscreenHeight: number;\r\n\tcanvas: HTMLCanvasElement;\r\n\r\n    resourceResolver: ResourceResolver;\r\n\tdrawContext: CanvasRenderingContext2D;\r\n    depthContext: CanvasRenderingContext2D;\r\n    mapVisible: boolean;\r\n\r\n    texWidth = 64;\r\n    texHeight = 64;\r\n\r\n    constructor(width: number, height: number, resResolver: ResourceResolver, canvasElement: HTMLCanvasElement, depthBuffer?: HTMLCanvasElement) {\r\n        this.screenWidth = width;\r\n\t\tthis.screenHeight = height;\r\n\r\n        this.resourceResolver = resResolver;\r\n\t\tthis.canvas = canvasElement;\r\n\t\tthis.canvas.width = this.screenWidth;\r\n\t\tthis.canvas.height = this.screenHeight;\r\n\r\n        let context = this.canvas.getContext('2d');\r\n\t\tif ( context == null) {\r\n\t\t\tthrow new Error(\"Unable to get 2D rendering context from Canvas\");\r\n        }\r\n\r\n\t\tthis.drawContext = context;\r\n        this.drawContext.imageSmoothingEnabled = false;\r\n\r\n        if ( depthBuffer != null) {\r\n            this.depthContext = depthBuffer.getContext('2d');\r\n        }\r\n    }\r\n\r\n    public toggleMap() {\r\n        this.mapVisible = !this.mapVisible;\r\n    }\r\n\r\n    public render(game: Game) {\r\n        this.drawContext.fillStyle = \"#000\";\r\n        this.drawContext.fillRect(0,0,this.screenWidth, this.screenHeight);\r\n    \r\n        const textures = this.resourceResolver.getTextures(game.world);\r\n        const sprites = this.resourceResolver.getSprites(game.world);\r\n        \r\n        if ( textures.naturalWidth === 0 || textures.naturalHeight === 0 || \r\n            sprites.naturalWidth === 0  || sprites.naturalHeight === 0) {\r\n            this.drawContext.fillStyle = \"#fff\";\r\n            this.drawContext.font = \"30px Arial\";\r\n            this.drawContext.textAlign = \"center\";\r\n            this.drawContext.fillText(\"Loading textures...\", this.screenWidth/2, this.screenHeight/2);\r\n            return;\r\n        }\r\n\r\n        this.renderCeilingFloor(game);\r\n        this.renderWalls(game, textures, sprites);\r\n\r\n        if ( this.mapVisible ) {\r\n            this.renderMap(game);\r\n        }\r\n    }\r\n\r\n    private renderCeilingFloor(game: Game) {\r\n        // Temporary implementation\r\n        var ceilColor = this.getBlockColor(game.world.ceiling);\r\n        this.drawContext.fillStyle = \"hsl(\" + ceilColor.hue + \",\" + ceilColor.saturation + \"%,\" + ceilColor.lightness/2 + \"%)\";\r\n        this.drawContext.fillRect(0, 0, this.screenWidth, this.screenHeight/2);\r\n\r\n        var floorColor = this.getBlockColor(game.world.floor);\r\n        this.drawContext.fillStyle = \"hsl(\" + floorColor.hue + \",\" + floorColor.saturation + \"%,\" + floorColor.lightness/4 + \"%)\";\r\n        this.drawContext.fillRect(0, this.screenHeight/2, this.screenWidth, this.screenHeight/2);\r\n    }\r\n\r\n    private renderWalls(game: Game, textures: HTMLImageElement, spriteTextures: HTMLImageElement) {\r\n        const pitch = 0;\r\n        const zBuffer: Array<number> = [];\r\n        zBuffer.fill(0, 0, this.screenWidth);\r\n        const sprites: Array<ViewSprite> = [];\r\n\r\n        for(var x = 0; x < this.screenWidth; x++) {\r\n            var cameraX = 2 * x / this.screenWidth - 1; // X coordinate in camera space\r\n            var ray = RayCast.ray(game.player.position, game.player.direction, game.player.plane, cameraX, game.world);\r\n\r\n            ray.sprites.forEach(sprite => {\r\n                if ( sprites.findIndex(s => s.x === sprite.x && s.y === sprite.y && s.sprite === sprite.sprite) < 0) {\r\n                    sprites.push(sprite);\r\n                }\r\n            })\r\n\r\n            // Calculate height of line to draw on screen\r\n            var lineHeight = Math.floor(this.screenHeight / ray.perpWallDist);\r\n\r\n            // Calculate lowest and highest pixel to fill in current stripe\r\n            const drawStart = -lineHeight / 2 + this.screenHeight / 2 + pitch;\r\n            const drawEnd = lineHeight / 2 + this.screenHeight / 2 + pitch;\r\n\r\n            var wallX;\r\n            if (ray.side == 0) wallX = game.player.position.y + ray.perpWallDist * ray.direction.y;\r\n            else           wallX = game.player.position.x + ray.perpWallDist * ray.direction.x;\r\n            wallX -= Math.floor(wallX);\r\n\r\n            //x coordinate on the texture\r\n            var texX = wallX * this.texWidth;\r\n            if(ray.side == 0 && ray.direction.x > 0) texX = this.texWidth - texX;\r\n            if(ray.side == 1 && ray.direction.y < 0) texX = this.texWidth - texX;\r\n            \r\n            if ( ray.worldObject instanceof Door && !ray.inside ) { \r\n                if((ray.side == 0 && ray.direction.x > 0 )|| (ray.side == 1 && ray.direction.y < 0)) {\r\n                    texX += Math.floor(ray.worldObject.openAmount * this.texWidth);\r\n                } else {\r\n                    texX -= Math.floor(ray.worldObject.openAmount * this.texWidth);\r\n                }\r\n                \r\n            }\r\n\r\n            const textureStartX = Math.floor(this.texWidth+(ray.texture*this.texWidth)-texX);\r\n            this.drawContext.drawImage(textures, textureStartX, 0, 1, this.texHeight, x, drawStart, 1, drawEnd - drawStart);\r\n            if ( ray.side === 1 ) { \r\n                this.drawContext.strokeStyle = 'rgba(0,0,0,0.6)';\r\n                this.drawContext.beginPath();\r\n                this.drawContext.moveTo(x, drawStart);\r\n                this.drawContext.lineTo(x, drawEnd);\r\n                this.drawContext.stroke();\r\n            }\r\n\r\n            zBuffer[x] = ray.perpWallDist;\r\n        }\r\n\r\n        // Sort from farthest to closest\r\n        sprites.sort((a: ViewSprite, b: ViewSprite): number => {\r\n            return b.distanceTo(game.player.position.x, game.player.position.y) - a.distanceTo(game.player.position.x, game.player.position.y);\r\n        });\r\n\r\n        sprites.forEach(s => this.renderSpriteBillboard(s, game, zBuffer, pitch, spriteTextures));\r\n\r\n        if (this.depthContext == null) {\r\n            return;\r\n        }\r\n\r\n        var maxDepth = game.world.objects.length;\r\n        for (let x = 0; x < this.screenWidth; x++) {\r\n            const color = (zBuffer[x] / maxDepth) * 100;\r\n            this.depthContext.strokeStyle = `hsl(0, 0%, ${100-color}%)`\r\n            this.depthContext.beginPath();\r\n            this.depthContext.moveTo(x, 0);\r\n            this.depthContext.lineTo(x, this.screenHeight);\r\n            this.depthContext.stroke();\r\n        }\r\n    }\r\n\r\n    private renderSpriteBillboard(sprite: ViewSprite, game: Game, zBuffer: Array<number>, pitch: number, texture: HTMLImageElement) {\r\n        const spriteX = sprite.x - game.player.position.x;\r\n        const spriteY = sprite.y - game.player.position.y;\r\n\r\n        const invDet = 1.0 / (game.player.plane.x * game.player.direction.y - game.player.direction.x * game.player.plane.y); //required for correct matrix multiplication\r\n\r\n        const transformX = invDet * (game.player.direction.y * spriteX - game.player.direction.x * spriteY);\r\n        const transformY = invDet * (-game.player.plane.y * spriteX + game.player.plane.x * spriteY); //this is actually the depth inside the screen, that what Z is in 3D\r\n\r\n        const spriteScreenX = Math.floor((this.screenWidth / 2) * (1 + transformX / transformY));\r\n\r\n        //calculate height of the sprite on screen\r\n        const spriteHeight = Math.abs(Math.floor(this.screenHeight / (transformY))); //using 'transformY' instead of the real distance prevents fisheye\r\n\r\n        //calculate width of the sprite\r\n        const spriteWidth = Math.abs(Math.floor(this.screenHeight / (transformY)));\r\n        var drawStartX = Math.floor(-spriteWidth / 2 + spriteScreenX);\r\n        if(drawStartX < 0) drawStartX = 0;\r\n        var drawEndX = spriteWidth / 2 + spriteScreenX;\r\n        if(drawEndX >= this.screenWidth) drawEndX = this.screenWidth - 1;\r\n\r\n        //loop through every vertical stripe of the sprite on screen\r\n        for(var stripe = drawStartX; stripe < drawEndX; stripe++)\r\n        {\r\n            const texX = Math.floor((stripe - (-spriteWidth / 2 + spriteScreenX)) * this.texWidth / spriteWidth);\r\n            //the conditions in the if are:\r\n            //1) it's in front of camera plane so you don't see things behind you\r\n            //2) it's on the screen (left)\r\n            //3) it's on the screen (right)\r\n            //4) ZBuffer, with perpendicular distance\r\n            if(transformY > 0 && stripe > 0 && stripe < this.screenWidth && transformY < zBuffer[stripe]) {\r\n                const spriteStartX = (sprite.sprite * this.texWidth) + texX;\r\n                const startY = -(spriteHeight/2) + (this.screenHeight / 2) + pitch;\r\n                this.drawContext.drawImage(texture, spriteStartX, 0, 1, this.texHeight, stripe, startY, 1, spriteHeight);\r\n                zBuffer[stripe] = transformY;\r\n            }\r\n        }\r\n    }\r\n\r\n    private renderMap(game: Game) {\r\n        const blockSize = 8;\r\n\r\n        for (var y = 0; y < game.world.objects.length; y++) {\r\n            for (var x = 0; x < game.world.objects[y].length; x++) {\r\n                const obj = game.world.objects[y][x];\r\n                if ( obj == null) continue;\r\n\r\n                var color = this.getBlockColor(obj.texture+1);\r\n                this.drawContext.fillStyle = \"hsl(\" + color.hue + \",\" + color.saturation + \"%,\" + color.lightness + \"%)\";\r\n                if ( obj instanceof Sprite ) {\r\n                    this.drawContext.strokeStyle = '#f77';\r\n                    this.drawCircle((x+0.5)*blockSize, (y+0.5)*blockSize, blockSize/2);\r\n                } else if ( obj instanceof Door && !obj.block) {\r\n                    var neighbour: GameObject;\r\n                    if ( x > 0) {\r\n                        neighbour = game.world.objects[y][x-1];\r\n                    } else {\r\n                        neighbour = game.world.objects[y][x+1];\r\n                    }\r\n                    if ( neighbour == null ) { this.drawContext.fillRect((x+0.25)*blockSize, y*blockSize, blockSize/2, blockSize); }\r\n                    else { this.drawContext.fillRect(x*blockSize, (y+0.25)*blockSize, blockSize, blockSize/2); }\r\n                } else {\r\n                    this.drawContext.fillRect(x*blockSize, y*blockSize, blockSize, blockSize);\r\n                }\r\n                \r\n                if ( game.currentTileX === x && game.currentTileY === y) {\r\n                    this.drawContext.strokeStyle = '#f0f';\r\n                    this.drawContext.strokeRect(x*blockSize, y*blockSize, blockSize, blockSize);\r\n                }\r\n            }\r\n        }\r\n\r\n        const playerX = game.player.position.x*blockSize;\r\n        const playerY = game.player.position.y*blockSize;\r\n        this.drawContext.strokeStyle = \"#fff\";\r\n        this.drawCircle(playerX, playerY, blockSize/2);\r\n        this.drawContext.beginPath();\r\n        this.drawContext.moveTo(playerX, playerY);\r\n        this.drawContext.lineTo(playerX + game.player.direction.x*blockSize, playerY + game.player.direction.y*blockSize);\r\n        this.drawContext.stroke();\r\n    }\r\n\r\n    private drawCircle(x: number, y: number, r: number) {\r\n        this.drawContext.beginPath();\r\n        this.drawContext.arc(x, y, r, 0, 2 * Math.PI);\r\n        this.drawContext.stroke(); \r\n    }\r\n\r\n    private getBlockColor(blockId: number): Color {\r\n        var hue = 0;\r\n        var saturation = 100;\r\n        var lightness = 50\r\n\r\n        switch(blockId) {\r\n            case 0: // Empty\r\n                saturation = 0;\r\n                lightness = 0;\r\n                break;\r\n            \r\n            default:\r\n                hue = blockId*40;\r\n                break; \r\n        }\r\n\r\n        return new Color(hue, saturation, lightness);\r\n    }\r\n}\r\n","export class ViewSprite {\r\n    public x: number;\r\n    public y: number;\r\n    public sprite: number;\r\n\r\n    constructor(x: number, y: number, sprite: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.sprite = sprite;\r\n    }\r\n\r\n    distanceTo(x: number, y: number) : number {\r\n        return ((x - this.x) * (x - this.x) + (y - this.y) * (y - this.y));\r\n    }\r\n}","import { World } from \"./world/world\";\r\n\r\nexport class ResourceResolver {\r\n    public parentElement: HTMLElement;\r\n    public images: Map<string, HTMLImageElement>;\r\n\r\n    constructor(parent: HTMLElement) {\r\n        this.parentElement = parent;\r\n        this.images = new Map<string, HTMLImageElement>();\r\n    }\r\n\r\n    getTextures(world: World): HTMLImageElement {\r\n        let textureImage = this.images.get(world.textures.href);\r\n        if ( textureImage != null ) {\r\n            return textureImage;\r\n        }\r\n\r\n        return this.addResource(world.textures.href);\r\n    }\r\n\r\n    getSprites(world: World): HTMLImageElement {\r\n        let spriteImage = this.images.get(world.sprites.href);\r\n        if ( spriteImage != null ) {\r\n            return spriteImage;\r\n        }\r\n\r\n        return this.addResource(world.sprites.href);\r\n    }\r\n\r\n    private addResource(url: string): HTMLImageElement {\r\n        const img = document.createElement('img');\r\n        img.src = url;\r\n        img.classList.add('hidden');\r\n        this.parentElement.appendChild(img);\r\n        this.images.set(url, img);\r\n        return img;\r\n    }\r\n}","import { RoomObject } from \"./room-object\";\r\n\r\nexport class Room {\r\n    public objects: Array<RoomObject>;\r\n    public tiles: Array<Array<number>>;\r\n    public textures: string;\r\n    public sprites: string;\r\n\r\n    public static validate(room: Room) {\r\n        if ( room.textures == null || room.textures.length < 1) {\r\n            throw new Error(`Room does not reference a texture file`);\r\n        }\r\n\r\n        if ( room.sprites == null || room.sprites.length < 1) {\r\n            throw new Error(`Room does not reference a sprites file`);\r\n        }\r\n\r\n        if ( room.objects== null || room.objects.length < 1) {\r\n            throw new Error(`Room contains no objects`);\r\n        }\r\n\r\n        if (room.tiles == null || room.tiles.length < 1) {\r\n            throw new Error(`Room contains no tiles`);\r\n        }\r\n\r\n        var tilesWidth = room.tiles[0].length;\r\n        for (let y = 0; y < room.tiles.length; y++) {\r\n            if ( room.tiles[y].length != tilesWidth) {\r\n                throw new Error(`Irregular row length for row ${y}, expected: ${tilesWidth} actual: ${room.tiles[y].length}`);\r\n            }\r\n\r\n            for (let x = 0; x < room.tiles[y].length; x++) {\r\n                if ( room.tiles[y][x] < 0 || room.tiles[y][x] > room.objects.length) {\r\n                    throw new Error(`Tile reference out of bounds at coordinates ${x},${y}. Should be between 0 and ${room.objects.length}`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","export class Vector {\r\n    public x: number;\r\n    public y: number;\r\n\r\n    constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    add(vector: Vector): Vector {\r\n        return new Vector(this.x + vector.x, this.y + vector.y);\r\n    }\r\n\r\n    rotateBy(degrees: number) {\r\n        degrees = -degrees * (Math.PI / 180);\r\n        const cos = Math.cos(degrees);\r\n        const sin = Math.sin(degrees);\r\n        const newX = Math.round(10000 * (this.x * cos - this.y * sin)) / 10000;\r\n        const newY = Math.round(10000 * (this.x * sin + this.y * cos)) / 10000;\r\n        this.x = newX;\r\n        this.y = newY;\r\n    }\r\n}","import { GameObject } from \"./game-object\";\r\nimport { DynamicObject } from \"./dynamic-object\";\r\nimport { Interactable } from \"./interactable\";\r\n\r\nexport class Door extends GameObject implements DynamicObject, Interactable {\r\n    public closed: boolean;\r\n    public openAmount: number;\r\n    public block: boolean;\r\n    public openTime: number;\r\n\r\n    constructor(texture: number, block: boolean = false) {\r\n        super(texture);\r\n        this.closed = true;\r\n        this.openAmount = 0;\r\n        this.openTime = 0;\r\n        this.block = block;\r\n    }\r\n\r\n    public override collidable(): boolean {\r\n        return this.openAmount !== 1;\r\n    }\r\n\r\n    public interact() {\r\n        if ( this.closed && this.openAmount === 0 ) {\r\n           this.closed = false;\r\n           this.openTime = 0;\r\n        } else if ( !this.closed && this.openAmount === 1) {\r\n            this.closed = true;\r\n        }\r\n    }\r\n\r\n    public step(delta: number) {\r\n        if ( this.closed && this.openAmount > 0) { \r\n            console.log(\"Closing\", this.openAmount);\r\n            this.openAmount -= delta; \r\n        }\r\n        if ( !this.closed && this.openAmount < 1) { \r\n            console.log(\"Opening\", this.openAmount);\r\n            this.openAmount += delta; \r\n        }\r\n\r\n        if ( this.openAmount > 1) { this.openAmount = 1; }\r\n        if ( this.openAmount < 0) { this.openAmount = 0; }\r\n\r\n        // Automatically start closing the door if it's open for a few seconds\r\n        if ( this.openAmount === 1) { this.openTime += delta; }\r\n        if ( this.openTime > 5) { this.closed = true; }\r\n    }\r\n}","export class GameObject {\r\n    public texture: number;\r\n\r\n    constructor(texture: number) {\r\n        this.texture = texture;\r\n    }\r\n\r\n    public collidable(): boolean {\r\n        return true;\r\n    }\r\n}","import { GameObject } from \"./game-object\";\r\n\r\nexport class Sprite extends GameObject{\r\n    constructor(sprite: number) {\r\n        super(sprite);\r\n    }\r\n\r\n    distanceBetween(x: number, y: number, otherX: number, otherY: number) : number {\r\n        return ((otherX - x) * (otherX - x) + (otherY - y) * (otherY - y));\r\n    }\r\n}","import { GameObject } from \"./game-object\";\r\nimport { DynamicObject } from \"./dynamic-object\";\r\nimport { Door } from \"./door\";\r\nimport { Sprite } from \"./sprite\";\r\nimport { Room } from \"../room/room\";\r\n\r\nexport class World {\r\n    public objects: Array<Array<GameObject | null>>;\r\n    public textures: URL;\r\n    public sprites: URL;\r\n\r\n\tpublic ceiling = 5;\r\n\tpublic floor = 2;\r\n\r\n    private dynamicObjects: Array<DynamicObject>;\r\n\r\n    private constructor() {\r\n        this.objects = [];\r\n        this.dynamicObjects = [];\r\n    }\r\n\r\n    public step(delta: number) {\r\n        this.dynamicObjects.forEach(o => o.step(delta));\r\n    }\r\n\r\n    public cacheDynamicObjects() {\r\n        this.dynamicObjects.splice(0);\r\n        for (let x = 0; x < this.objects.length; x++) {\r\n            for (let y = 0; y < this.objects[x].length; y++) {\r\n                const obj = this.objects[x][y];\r\n                if ( obj instanceof Door ) {\r\n                    this.dynamicObjects.push(obj);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public static from(room: Room, url: URL): World {\r\n        let pathParts = url.pathname.split('/');\r\n        pathParts.splice(pathParts.length-1, 1);\r\n        const basePath = pathParts.join('/');\r\n\r\n\t\tlet world = new World();\r\n        world.textures = new URL(`${basePath}/${room.textures}`, url.origin);\r\n        world.sprites = new URL(`${basePath}/${room.sprites}`, url.origin);\r\n\r\n\t\tfor (let x = 0; x < room.tiles.length; x++) {\r\n\t\t\tlet row: Array<GameObject> = [];\r\n\r\n\t\t\tfor (let y = 0; y < room.tiles[x].length; y++) {\r\n\t\t\t\tconst tile = room.tiles[x][y]-1;\r\n\t\t\t\tif ( tile < 0) {\r\n                    row.push(null);\r\n                } else {\r\n                    const obj = room.objects[tile];\r\n                    switch (obj.type) {\r\n                        case \"block\":\r\n                            row.push(new GameObject(obj[\"texture\"] as number));\r\n                            break;\r\n\r\n                        case \"door\":\r\n                            row.push(new Door(obj[\"texture\"] as number, false));\r\n                            break;\r\n\r\n                        case \"sprite\":\r\n                            row.push(new Sprite(obj[\"texture\"] as number));\r\n                            break;\r\n\r\n                        default:\r\n                            throw new Error(`Unknown type '${obj.type}' for object ${tile} at ${y},${x}`);\r\n                    }\r\n                }\r\n\t\t\t}\r\n\r\n            world.objects.push(row);\r\n\t\t}\r\n\r\n        world.cacheDynamicObjects();\r\n        return world;\r\n\t}\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { Game } from \"./client/game\";\r\nimport { ResourceResolver } from \"./client/resource-resolver\";\r\nimport { Input } from \"./client/input\";\r\nimport { Renderer } from \"./client/rendering/renderer\";\r\n\r\nconst input = new Input();\r\ninput.attachEventListeners(document.getElementsByTagName('body')[0]);\r\n\r\nconst canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\r\nconst depth = document.getElementById(\"depth\") as HTMLCanvasElement;\r\nconst parent = document.getElementById(\"client-parent\") as HTMLElement;\r\nconst resources = new ResourceResolver(parent);\r\nconst renderer = new Renderer(1024, 768, resources, canvas, depth);\r\nconst game = new Game(renderer, input);\r\n\r\nvar url = new URL(\"./assets/room.json\", document.baseURI).href; // Local room is fallback\r\n\r\nconst params = new URLSearchParams(window.location.search);\r\nif ( params.get('url') != null) {\r\n    url = params.get('url');\r\n} \r\n\r\ngame.loadRoom(url);"],"names":["Color","hue","saturation","lightness","this","renderer","input","textureLimit","currentTileX","currentTileY","currentTime","previousTime","player","Player","loadRoom","urlString","url","URL","console","log","href","fetch","then","response","ok","Error","json","room","Room","validate","world","World","from","tick","performance","now","delta","gameStep","step","render","window","requestAnimationFrame","bind","keyQueue","length","find","k","toggleMap","clearQueue","usePressed","leftMouseUp","ray","RayCast","position","direction","plane","hit","perpWallDist","worldObject","Door","interact","anyDirectional","mouseDragStart","movement","getMovementFromInput","x","y","newPlayerPos","add","objects","Math","floor","currentTile","collidable","leftPressed","rotateBy","rightPressed","xVel","yVel","upPressed","movementSpeed","downPressed","mousePosition","forward","min","max","Vector","Game","leftMousePressed","previousLeftMousePressed","attachEventListeners","el","addEventListener","e","key","push","button","rect","getBoundingClientRect","clientX","left","clientY","top","relX","changedTouches","item","relY","Input","degrees","RayCastResult","originPos","originDir","originPlane","cameraX","stopOnSprite","stepX","stepY","sideDistX","sideDistY","rayDirX","rayDirY","mapX","mapY","deltaDistX","abs","deltaDistY","wallX","side","texNum","wallXOffset","wallYOffset","inside","sprites","Sprite","viewSprite","ViewSprite","texture","findIndex","v","openAmount","result","width","height","resResolver","canvasElement","depthBuffer","texWidth","texHeight","screenWidth","screenHeight","resourceResolver","canvas","context","getContext","drawContext","imageSmoothingEnabled","depthContext","mapVisible","game","fillStyle","fillRect","textures","getTextures","getSprites","naturalWidth","naturalHeight","font","textAlign","fillText","renderCeilingFloor","renderWalls","renderMap","ceilColor","getBlockColor","ceiling","floorColor","spriteTextures","zBuffer","fill","forEach","sprite","s","lineHeight","drawStart","drawEnd","texX","textureStartX","drawImage","strokeStyle","beginPath","moveTo","lineTo","stroke","sort","a","b","distanceTo","renderSpriteBillboard","maxDepth","color","pitch","spriteX","spriteY","invDet","transformX","transformY","spriteScreenX","spriteHeight","spriteWidth","drawStartX","drawEndX","stripe","spriteStartX","startY","obj","drawCircle","blockSize","block","strokeRect","playerX","playerY","r","arc","PI","blockId","Renderer","parent","parentElement","images","Map","textureImage","get","addResource","spriteImage","img","document","createElement","src","classList","appendChild","set","ResourceResolver","tiles","tilesWidth","vector","cos","sin","newX","round","newY","closed","openTime","GameObject","distanceBetween","otherX","otherY","dynamicObjects","o","cacheDynamicObjects","splice","pathParts","pathname","split","basePath","join","origin","row","tile","type","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","call","getElementsByTagName","getElementById","depth","resources","baseURI","params","URLSearchParams","location","search"],"sourceRoot":""}